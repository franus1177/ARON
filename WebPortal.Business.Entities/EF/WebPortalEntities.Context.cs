//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPortal.Business.Entities.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebPortalEntities : DbContext
    {
        public WebPortalEntities()
            : base("name=WebPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalFrequencyCheckList> AdditionalFrequencyCheckLists { get; set; }
        public virtual DbSet<AssessmentParameter> AssessmentParameters { get; set; }
        public virtual DbSet<AssessmentParameterLanguage> AssessmentParameterLanguages { get; set; }
        public virtual DbSet<Attribute> Attributes { get; set; }
        public virtual DbSet<AttributeLanguage> AttributeLanguages { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryAttribute> CategoryAttributes { get; set; }
        public virtual DbSet<CategoryLanguage> CategoryLanguages { get; set; }
        public virtual DbSet<Certification> Certifications { get; set; }
        public virtual DbSet<CertificationLanguage> CertificationLanguages { get; set; }
        public virtual DbSet<CheckList> CheckLists { get; set; }
        public virtual DbSet<CheckListTask> CheckListTasks { get; set; }
        public virtual DbSet<CheckListTaskDeviationType> CheckListTaskDeviationTypes { get; set; }
        public virtual DbSet<ChecklistTaskGroup> ChecklistTaskGroups { get; set; }
        public virtual DbSet<ChecklistTaskGroupLanguage> ChecklistTaskGroupLanguages { get; set; }
        public virtual DbSet<CheckListTaskLanguage> CheckListTaskLanguages { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractCategory> ContractCategories { get; set; }
        public virtual DbSet<ContractLocation> ContractLocations { get; set; }
        public virtual DbSet<ContractScheduledLocation> ContractScheduledLocations { get; set; }
        public virtual DbSet<ControllerTagging> ControllerTaggings { get; set; }
        public virtual DbSet<CountryHoliday> CountryHolidays { get; set; }
        public virtual DbSet<CountryHolidayName> CountryHolidayNames { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseAssessmentParameter> CourseAssessmentParameters { get; set; }
        public virtual DbSet<CourseDocument> CourseDocuments { get; set; }
        public virtual DbSet<CourseFeedbackParameter> CourseFeedbackParameters { get; set; }
        public virtual DbSet<CourseLanguage> CourseLanguages { get; set; }
        public virtual DbSet<CourseType> CourseTypes { get; set; }
        public virtual DbSet<CourseTypeLanguage> CourseTypeLanguages { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerContact> CustomerContacts { get; set; }
        public virtual DbSet<CustomerIRemark> CustomerIRemarks { get; set; }
        public virtual DbSet<CustomerLanguage> CustomerLanguages { get; set; }
        public virtual DbSet<CustomerLocation> CustomerLocations { get; set; }
        public virtual DbSet<CustomerLocationBarredInspection> CustomerLocationBarredInspections { get; set; }
        public virtual DbSet<CustomerLocationHoliday> CustomerLocationHolidays { get; set; }
        public virtual DbSet<CustomerLocationHolidayName> CustomerLocationHolidayNames { get; set; }
        public virtual DbSet<CustomerModule> CustomerModules { get; set; }
        public virtual DbSet<CustomerModuleConfiguration> CustomerModuleConfigurations { get; set; }
        public virtual DbSet<CustomerServiceLine> CustomerServiceLines { get; set; }
        public virtual DbSet<CustomerServiceLineConfiguration> CustomerServiceLineConfigurations { get; set; }
        public virtual DbSet<CustomerWeeklyOff> CustomerWeeklyOffs { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentLanguage> DepartmentLanguages { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DesignationLanguage> DesignationLanguages { get; set; }
        public virtual DbSet<Deviation> Deviations { get; set; }
        public virtual DbSet<DeviationLocationPhoto> DeviationLocationPhotoes { get; set; }
        public virtual DbSet<DeviationLocationPhotoElement> DeviationLocationPhotoElements { get; set; }
        public virtual DbSet<DeviationRepairComponent> DeviationRepairComponents { get; set; }
        public virtual DbSet<DeviationResolutionRemarksPhoto> DeviationResolutionRemarksPhotoes { get; set; }
        public virtual DbSet<DeviationType> DeviationTypes { get; set; }
        public virtual DbSet<DeviationTypeDepartment> DeviationTypeDepartments { get; set; }
        public virtual DbSet<DeviationTypeLanguage> DeviationTypeLanguages { get; set; }
        public virtual DbSet<DeviationTypeResolution> DeviationTypeResolutions { get; set; }
        public virtual DbSet<DeviationTypeResolutionLanguage> DeviationTypeResolutionLanguages { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentCategory> DocumentCategories { get; set; }
        public virtual DbSet<DocumentCategoryLanguage> DocumentCategoryLanguages { get; set; }
        public virtual DbSet<DocumentMapping> DocumentMappings { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<DocumentTypeLanguage> DocumentTypeLanguages { get; set; }
        public virtual DbSet<Drill> Drills { get; set; }
        public virtual DbSet<DrillActionType> DrillActionTypes { get; set; }
        public virtual DbSet<DrillActionTypeLanguage> DrillActionTypeLanguages { get; set; }
        public virtual DbSet<DrillCheckList> DrillCheckLists { get; set; }
        public virtual DbSet<DrillCheckListTask> DrillCheckListTasks { get; set; }
        public virtual DbSet<DrillCheckListTaskLanguage> DrillCheckListTaskLanguages { get; set; }
        public virtual DbSet<DrillData> DrillDatas { get; set; }
        public virtual DbSet<DrillProposal> DrillProposals { get; set; }
        public virtual DbSet<DrillSetup> DrillSetups { get; set; }
        public virtual DbSet<DrillStakeholder> DrillStakeholders { get; set; }
        public virtual DbSet<DrillStakeholderLanguage> DrillStakeholderLanguages { get; set; }
        public virtual DbSet<DrillType> DrillTypes { get; set; }
        public virtual DbSet<DrillTypeLanguage> DrillTypeLanguages { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EndUser> EndUsers { get; set; }
        public virtual DbSet<EndUserModule> EndUserModules { get; set; }
        public virtual DbSet<FeedbackParameter> FeedbackParameters { get; set; }
        public virtual DbSet<FeedbackParameterLanguage> FeedbackParameterLanguages { get; set; }
        public virtual DbSet<FeedbackParameterValue> FeedbackParameterValues { get; set; }
        public virtual DbSet<Folder> Folders { get; set; }
        public virtual DbSet<FolderFile> FolderFiles { get; set; }
        public virtual DbSet<FRASCheckList> FRASCheckLists { get; set; }
        public virtual DbSet<FRASCheckListTask> FRASCheckListTasks { get; set; }
        public virtual DbSet<FRASCheckListTaskLanguage> FRASCheckListTaskLanguages { get; set; }
        public virtual DbSet<FRASInspection> FRASInspections { get; set; }
        public virtual DbSet<FRASInspectionTask> FRASInspectionTasks { get; set; }
        public virtual DbSet<FRASRiskSetting> FRASRiskSettings { get; set; }
        public virtual DbSet<GetOnlySPsTable> GetOnlySPsTables { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<IncidentCategory> IncidentCategories { get; set; }
        public virtual DbSet<IncidentCategoryLanguage> IncidentCategoryLanguages { get; set; }
        public virtual DbSet<IncidentCauseType> IncidentCauseTypes { get; set; }
        public virtual DbSet<IncidentCauseTypeLanguage> IncidentCauseTypeLanguages { get; set; }
        public virtual DbSet<IncidentCheckList> IncidentCheckLists { get; set; }
        public virtual DbSet<IncidentCheckListTask> IncidentCheckListTasks { get; set; }
        public virtual DbSet<IncidentCheckListTaskLanguage> IncidentCheckListTaskLanguages { get; set; }
        public virtual DbSet<IncidentImpactType> IncidentImpactTypes { get; set; }
        public virtual DbSet<IncidentImpactTypeLanguage> IncidentImpactTypeLanguages { get; set; }
        public virtual DbSet<IncidentInspection> IncidentInspections { get; set; }
        public virtual DbSet<IncidentInspectionTask> IncidentInspectionTasks { get; set; }
        public virtual DbSet<IncidentStatu> IncidentStatus { get; set; }
        public virtual DbSet<IncidentStatusLanguage> IncidentStatusLanguages { get; set; }
        public virtual DbSet<IncidentType> IncidentTypes { get; set; }
        public virtual DbSet<IncidentTypeLanguage> IncidentTypeLanguages { get; set; }
        public virtual DbSet<InformationCode> InformationCodes { get; set; }
        public virtual DbSet<Inspection> Inspections { get; set; }
        public virtual DbSet<InspectionCheckList> InspectionCheckLists { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationRiskLevel> LocationRiskLevels { get; set; }
        public virtual DbSet<MailLog> MailLogs { get; set; }
        public virtual DbSet<MailType> MailTypes { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<NotInUseReason> NotInUseReasons { get; set; }
        public virtual DbSet<NotInUseReasonLanguage> NotInUseReasonLanguages { get; set; }
        public virtual DbSet<Object> Objects { get; set; }
        public virtual DbSet<ObjectAttribute> ObjectAttributes { get; set; }
        public virtual DbSet<ObjectDeviationPhoto> ObjectDeviationPhotoes { get; set; }
        public virtual DbSet<ObjectDeviationPhotoElement> ObjectDeviationPhotoElements { get; set; }
        public virtual DbSet<ObjectInstance> ObjectInstances { get; set; }
        public virtual DbSet<ObjectInstanceInspection> ObjectInstanceInspections { get; set; }
        public virtual DbSet<ObjectInstanceMake> ObjectInstanceMakes { get; set; }
        public virtual DbSet<ObjectInstancePhotoElement> ObjectInstancePhotoElements { get; set; }
        public virtual DbSet<ObjectInstanceTask> ObjectInstanceTasks { get; set; }
        public virtual DbSet<ObjectLanguage> ObjectLanguages { get; set; }
        public virtual DbSet<ObjectRepairComponent> ObjectRepairComponents { get; set; }
        public virtual DbSet<PublishedURL> PublishedURLs { get; set; }
        public virtual DbSet<RepairComponent> RepairComponents { get; set; }
        public virtual DbSet<RepairComponentLanguage> RepairComponentLanguages { get; set; }
        public virtual DbSet<ResolutionInspectionDeviation> ResolutionInspectionDeviations { get; set; }
        public virtual DbSet<Screen> Screens { get; set; }
        public virtual DbSet<ScreenAction> ScreenActions { get; set; }
        public virtual DbSet<ScreenTable> ScreenTables { get; set; }
        public virtual DbSet<Squad> Squads { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<Training> Trainings { get; set; }
        public virtual DbSet<TrainingAssessment> TrainingAssessments { get; set; }
        public virtual DbSet<TrainingEnrolment> TrainingEnrolments { get; set; }
        public virtual DbSet<TrainingFeedback> TrainingFeedbacks { get; set; }
        public virtual DbSet<UOM> UOMs { get; set; }
        public virtual DbSet<UOMLanguage> UOMLanguages { get; set; }
        public virtual DbSet<URLUsageType> URLUsageTypes { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserRoleScreen> UserRoleScreens { get; set; }
        public virtual DbSet<UserRoleScreenAction> UserRoleScreenActions { get; set; }
        public virtual DbSet<WorkCheckList> WorkCheckLists { get; set; }
        public virtual DbSet<WorkCheckListTask> WorkCheckListTasks { get; set; }
        public virtual DbSet<WorkCheckListTaskLanguage> WorkCheckListTaskLanguages { get; set; }
        public virtual DbSet<WorkingShift> WorkingShifts { get; set; }
        public virtual DbSet<WorkInspection> WorkInspections { get; set; }
        public virtual DbSet<WorkInspectionTask> WorkInspectionTasks { get; set; }
        public virtual DbSet<WorkPermit> WorkPermits { get; set; }
        public virtual DbSet<WorkPermitType> WorkPermitTypes { get; set; }
        public virtual DbSet<WorkPermitTypeLanguage> WorkPermitTypeLanguages { get; set; }
        public virtual DbSet<WorkType> WorkTypes { get; set; }
        public virtual DbSet<WorkTypeLanguage> WorkTypeLanguages { get; set; }
        public virtual DbSet<AuditPreImage> AuditPreImages { get; set; }
        public virtual DbSet<ControllerSpecialization> ControllerSpecializations { get; set; }
        public virtual DbSet<DesignationCourse> DesignationCourses { get; set; }
        public virtual DbSet<DeviationResolutionRemarksPhotoElement> DeviationResolutionRemarksPhotoElements { get; set; }
        public virtual DbSet<DeviationTypeResolutionRepairComponent> DeviationTypeResolutionRepairComponents { get; set; }
        public virtual DbSet<DrillDataPhoto> DrillDataPhotoes { get; set; }
        public virtual DbSet<DrillProposalStatu> DrillProposalStatus { get; set; }
        public virtual DbSet<EmployeeShift> EmployeeShifts { get; set; }
        public virtual DbSet<EmployeeSquad> EmployeeSquads { get; set; }
        public virtual DbSet<FRASInspectionPhoto> FRASInspectionPhotoes { get; set; }
        public virtual DbSet<IncidentAttachment> IncidentAttachments { get; set; }
        public virtual DbSet<IncidentCause> IncidentCauses { get; set; }
        public virtual DbSet<IncidentDespatch> IncidentDespatches { get; set; }
        public virtual DbSet<IncidentImpact> IncidentImpacts { get; set; }
        public virtual DbSet<IncidentInspectionPhoto> IncidentInspectionPhotoes { get; set; }
        public virtual DbSet<IncidentLocation> IncidentLocations { get; set; }
        public virtual DbSet<IncidentObjectInstance> IncidentObjectInstances { get; set; }
        public virtual DbSet<InformationValue> InformationValues { get; set; }
        public virtual DbSet<TrainingTrainer> TrainingTrainers { get; set; }
        public virtual DbSet<UserLocation> UserLocations { get; set; }
        public virtual DbSet<AssessmentParameterView> AssessmentParameterViews { get; set; }
        public virtual DbSet<CategoryView> CategoryViews { get; set; }
        public virtual DbSet<CertificationView> CertificationViews { get; set; }
        public virtual DbSet<ChecklistTaskGroupView> ChecklistTaskGroupViews { get; set; }
        public virtual DbSet<CourseTypeView> CourseTypeViews { get; set; }
        public virtual DbSet<CourseView> CourseViews { get; set; }
        public virtual DbSet<DepartmentView> DepartmentViews { get; set; }
        public virtual DbSet<DesignationView> DesignationViews { get; set; }
        public virtual DbSet<DeviationTypeView> DeviationTypeViews { get; set; }
        public virtual DbSet<DrillActionTypeView> DrillActionTypeViews { get; set; }
        public virtual DbSet<DrillCheckListTaskView> DrillCheckListTaskViews { get; set; }
        public virtual DbSet<DrillStakeholderView> DrillStakeholderViews { get; set; }
        public virtual DbSet<DrillTypeView> DrillTypeViews { get; set; }
        public virtual DbSet<EmployeeView> EmployeeViews { get; set; }
        public virtual DbSet<EndUserView> EndUserViews { get; set; }
        public virtual DbSet<FeedbackParameterView> FeedbackParameterViews { get; set; }
        public virtual DbSet<FRASCheckListTaskView> FRASCheckListTaskViews { get; set; }
        public virtual DbSet<GetFileinfo_View> GetFileinfo_View { get; set; }
        public virtual DbSet<IncidentCheckListTaskView> IncidentCheckListTaskViews { get; set; }
        public virtual DbSet<WorkPermitTypeView> WorkPermitTypeViews { get; set; }
    
        [DbFunction("Entities", "f__GetConfigurationAttributeType")]
        public virtual IQueryable<f__GetConfigurationAttributeType_Result> f__GetConfigurationAttributeType(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationAttributeType_Result>("[Entities].[f__GetConfigurationAttributeType](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationCountry")]
        public virtual IQueryable<f__GetConfigurationCountry_Result> f__GetConfigurationCountry(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationCountry_Result>("[Entities].[f__GetConfigurationCountry](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationFRASInspectionType")]
        public virtual IQueryable<f__GetConfigurationFRASInspectionType_Result> f__GetConfigurationFRASInspectionType(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationFRASInspectionType_Result>("[Entities].[f__GetConfigurationFRASInspectionType](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationInspectionType")]
        public virtual IQueryable<f__GetConfigurationInspectionType_Result> f__GetConfigurationInspectionType(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationInspectionType_Result>("[Entities].[f__GetConfigurationInspectionType](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationLanguage")]
        public virtual IQueryable<f__GetConfigurationLanguage_Result> f__GetConfigurationLanguage(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationLanguage_Result>("[Entities].[f__GetConfigurationLanguage](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationModule")]
        public virtual IQueryable<f__GetConfigurationModule_Result> f__GetConfigurationModule(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationModule_Result>("[Entities].[f__GetConfigurationModule](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationPriorityLevel")]
        public virtual IQueryable<f__GetConfigurationPriorityLevel_Result> f__GetConfigurationPriorityLevel(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationPriorityLevel_Result>("[Entities].[f__GetConfigurationPriorityLevel](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationRiskLevel")]
        public virtual IQueryable<f__GetConfigurationRiskLevel_Result> f__GetConfigurationRiskLevel(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationRiskLevel_Result>("[Entities].[f__GetConfigurationRiskLevel](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationServiceLevel")]
        public virtual IQueryable<f__GetConfigurationServiceLevel_Result> f__GetConfigurationServiceLevel(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationServiceLevel_Result>("[Entities].[f__GetConfigurationServiceLevel](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationServiceLine")]
        public virtual IQueryable<f__GetConfigurationServiceLine_Result> f__GetConfigurationServiceLine(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationServiceLine_Result>("[Entities].[f__GetConfigurationServiceLine](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationSeverityLevel")]
        public virtual IQueryable<f__GetConfigurationSeverityLevel_Result> f__GetConfigurationSeverityLevel(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationSeverityLevel_Result>("[Entities].[f__GetConfigurationSeverityLevel](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationTimeUnitConversion")]
        public virtual IQueryable<f__GetConfigurationTimeUnitConversion_Result> f__GetConfigurationTimeUnitConversion(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationTimeUnitConversion_Result>("[Entities].[f__GetConfigurationTimeUnitConversion](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationTimeUnitData")]
        public virtual IQueryable<f__GetConfigurationTimeUnitData_Result> f__GetConfigurationTimeUnitData(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationTimeUnitData_Result>("[Entities].[f__GetConfigurationTimeUnitData](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "f__GetConfigurationYearlyMonth")]
        public virtual IQueryable<f__GetConfigurationYearlyMonth_Result> f__GetConfigurationYearlyMonth(string langCode)
        {
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f__GetConfigurationYearlyMonth_Result>("[Entities].[f__GetConfigurationYearlyMonth](@LangCode)", langCodeParameter);
        }
    
        [DbFunction("Entities", "GetHigherFrequency")]
        public virtual IQueryable<GetHigherFrequency_Result> GetHigherFrequency(string p_Frequency)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHigherFrequency_Result>("[Entities].[GetHigherFrequency](@p_Frequency)", p_FrequencyParameter);
        }
    
        [DbFunction("Entities", "GetLowerFrequency")]
        public virtual IQueryable<GetLowerFrequency_Result> GetLowerFrequency(string p_Frequency)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLowerFrequency_Result>("[Entities].[GetLowerFrequency](@p_Frequency)", p_FrequencyParameter);
        }
    
        [DbFunction("Entities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[Entities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> f__GetCMConfigurationData(string l)
        {
            var lParameter = l != null ?
                new ObjectParameter("L", l) :
                new ObjectParameter("L", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("f__GetCMConfigurationData", lParameter);
        }
    
        public virtual ObjectResult<f__GetConfigurationData_Result> f__GetConfigurationData(string m, string l)
        {
            var mParameter = m != null ?
                new ObjectParameter("M", m) :
                new ObjectParameter("M", typeof(string));
    
            var lParameter = l != null ?
                new ObjectParameter("L", l) :
                new ObjectParameter("L", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f__GetConfigurationData_Result>("f__GetConfigurationData", mParameter, lParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> f__GetDRConfigurationData(string l)
        {
            var lParameter = l != null ?
                new ObjectParameter("L", l) :
                new ObjectParameter("L", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("f__GetDRConfigurationData", lParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> f__GetINConfigurationData(string l)
        {
            var lParameter = l != null ?
                new ObjectParameter("L", l) :
                new ObjectParameter("L", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("f__GetINConfigurationData", lParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> f__GetRKConfigurationData(string l)
        {
            var lParameter = l != null ?
                new ObjectParameter("L", l) :
                new ObjectParameter("L", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("f__GetRKConfigurationData", lParameter);
        }
    
        public virtual ObjectResult<f__GetSFConfigurationData_Result> f__GetSFConfigurationData(string l)
        {
            var lParameter = l != null ?
                new ObjectParameter("L", l) :
                new ObjectParameter("L", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f__GetSFConfigurationData_Result>("f__GetSFConfigurationData", lParameter);
        }
    
        public virtual int f_GetAllLeafCategorys(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetAllLeafCategorys", p_LanguageCodeParameter);
        }
    
        public virtual int f_GetAllLeafLevelLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetAllLeafLevelLocation");
        }
    
        public virtual int f_GetAllLeafLevelLocationTemp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetAllLeafLevelLocationTemp");
        }
    
        public virtual ObjectResult<f_GetAllLevelCategory_Result> f_GetAllLevelCategory(Nullable<short> p_CategoryID, string p_LanguageCode)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetAllLevelCategory_Result>("f_GetAllLevelCategory", p_CategoryIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<f_GetAllLevelLocation_Result> f_GetAllLevelLocation(Nullable<short> p_CustomerID, Nullable<int> p_LocationID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetAllLevelLocation_Result>("f_GetAllLevelLocation", p_CustomerIDParameter, p_LocationIDParameter);
        }
    
        public virtual int f_GetFolder(Nullable<long> pFileID, ObjectParameter pFolderID, ObjectParameter pFolderPath)
        {
            var pFileIDParameter = pFileID.HasValue ?
                new ObjectParameter("pFileID", pFileID) :
                new ObjectParameter("pFileID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetFolder", pFileIDParameter, pFolderID, pFolderPath);
        }
    
        public virtual int f_GetLeafCategory(Nullable<int> p_LocationID)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetLeafCategory", p_LocationIDParameter);
        }
    
        public virtual ObjectResult<f_GetLeafLevelCategory_Result> f_GetLeafLevelCategory(Nullable<short> p_CategoryID, string p_LanguageCode)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetLeafLevelCategory_Result>("f_GetLeafLevelCategory", p_CategoryIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<f_GetLeafLevelContractCategory_Result> f_GetLeafLevelContractCategory(Nullable<int> p_ContractID, Nullable<int> p_LocationID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetLeafLevelContractCategory_Result>("f_GetLeafLevelContractCategory", p_ContractIDParameter, p_LocationIDParameter);
        }
    
        public virtual int f_GetLeafLevelContractLocation(Nullable<int> p_ContractID, Nullable<int> p_LocationID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetLeafLevelContractLocation", p_ContractIDParameter, p_LocationIDParameter);
        }
    
        public virtual ObjectResult<f_GetLeafLevelLocation_Result> f_GetLeafLevelLocation(Nullable<short> p_CustomerID, Nullable<int> p_LocationID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetLeafLevelLocation_Result>("f_GetLeafLevelLocation", p_CustomerIDParameter, p_LocationIDParameter);
        }
    
        public virtual int f_GetLeafLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_GetLeafLocation");
        }
    
        public virtual ObjectResult<f_GetLocationWithQR_Result> f_GetLocationWithQR(Nullable<short> p_CustomerID, Nullable<int> p_LocationID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetLocationWithQR_Result>("f_GetLocationWithQR", p_CustomerIDParameter, p_LocationIDParameter);
        }
    
        public virtual ObjectResult<f_GetRootAndLeafLevelLocations_Result> f_GetRootAndLeafLevelLocations(Nullable<short> p_CustomerID, Nullable<int> p_LocationID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetRootAndLeafLevelLocations_Result>("f_GetRootAndLeafLevelLocations", p_CustomerIDParameter, p_LocationIDParameter);
        }
    
        public virtual int AddAssessmentParameter(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_AssessmentParameterID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAssessmentParameter", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_AssessmentParameterID);
        }
    
        public virtual int AddCancellationRemark(Nullable<int> p_TrainingID, Nullable<int> p_TraineeID, string p_TraineeName, string p_CancellationRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_TraineeNameParameter = p_TraineeName != null ?
                new ObjectParameter("p_TraineeName", p_TraineeName) :
                new ObjectParameter("p_TraineeName", typeof(string));
    
            var p_CancellationRemarksParameter = p_CancellationRemarks != null ?
                new ObjectParameter("p_CancellationRemarks", p_CancellationRemarks) :
                new ObjectParameter("p_CancellationRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCancellationRemark", p_TrainingIDParameter, p_TraineeIDParameter, p_TraineeNameParameter, p_CancellationRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddCategory(string p_ServiceLineCode, Nullable<short> p_ParentCategoryID, Nullable<bool> p_IsLeaf, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CategoryID)
        {
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_ParentCategoryIDParameter = p_ParentCategoryID.HasValue ?
                new ObjectParameter("p_ParentCategoryID", p_ParentCategoryID) :
                new ObjectParameter("p_ParentCategoryID", typeof(short));
    
            var p_IsLeafParameter = p_IsLeaf.HasValue ?
                new ObjectParameter("p_IsLeaf", p_IsLeaf) :
                new ObjectParameter("p_IsLeaf", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCategory", p_ServiceLineCodeParameter, p_ParentCategoryIDParameter, p_IsLeafParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CategoryID);
        }
    
        public virtual int AddCertification(string p_ShortCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CertificationID)
        {
            var p_ShortCodeParameter = p_ShortCode != null ?
                new ObjectParameter("p_ShortCode", p_ShortCode) :
                new ObjectParameter("p_ShortCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCertification", p_ShortCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CertificationID);
        }
    
        public virtual int AddCheckList(Nullable<short> p_CategoryID, string p_InspectionType, string p_Frequency, Nullable<byte> p_ExecutionDuration, string p_ExecutionUnit, Nullable<byte> p_ServiceLevelID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CheckListID)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ExecutionDurationParameter = p_ExecutionDuration.HasValue ?
                new ObjectParameter("p_ExecutionDuration", p_ExecutionDuration) :
                new ObjectParameter("p_ExecutionDuration", typeof(byte));
    
            var p_ExecutionUnitParameter = p_ExecutionUnit != null ?
                new ObjectParameter("p_ExecutionUnit", p_ExecutionUnit) :
                new ObjectParameter("p_ExecutionUnit", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCheckList", p_CategoryIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_ExecutionDurationParameter, p_ExecutionUnitParameter, p_ServiceLevelIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CheckListID);
        }
    
        public virtual int AddCheckListTask(Nullable<short> p_CheckListID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, string p_ChecklistTaskCode, string p_AttributeType, Nullable<short> p_TextLength, Nullable<byte> p_FloatPrecision, Nullable<byte> p_FloatScale, Nullable<short> p_UOMID, Nullable<bool> p_DeviationIfFalse, Nullable<short> p_BoolDeviationTypeID, Nullable<double> p_DeviationIfLessValue, Nullable<short> p_LessValueDeviationTypeID, Nullable<double> p_DeviationIfMoreValue, Nullable<short> p_MoreValueDeviationTypeID, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CheckListTaskID)
        {
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_ChecklistTaskCodeParameter = p_ChecklistTaskCode != null ?
                new ObjectParameter("p_ChecklistTaskCode", p_ChecklistTaskCode) :
                new ObjectParameter("p_ChecklistTaskCode", typeof(string));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_TextLengthParameter = p_TextLength.HasValue ?
                new ObjectParameter("p_TextLength", p_TextLength) :
                new ObjectParameter("p_TextLength", typeof(short));
    
            var p_FloatPrecisionParameter = p_FloatPrecision.HasValue ?
                new ObjectParameter("p_FloatPrecision", p_FloatPrecision) :
                new ObjectParameter("p_FloatPrecision", typeof(byte));
    
            var p_FloatScaleParameter = p_FloatScale.HasValue ?
                new ObjectParameter("p_FloatScale", p_FloatScale) :
                new ObjectParameter("p_FloatScale", typeof(byte));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_DeviationIfFalseParameter = p_DeviationIfFalse.HasValue ?
                new ObjectParameter("p_DeviationIfFalse", p_DeviationIfFalse) :
                new ObjectParameter("p_DeviationIfFalse", typeof(bool));
    
            var p_BoolDeviationTypeIDParameter = p_BoolDeviationTypeID.HasValue ?
                new ObjectParameter("p_BoolDeviationTypeID", p_BoolDeviationTypeID) :
                new ObjectParameter("p_BoolDeviationTypeID", typeof(short));
    
            var p_DeviationIfLessValueParameter = p_DeviationIfLessValue.HasValue ?
                new ObjectParameter("p_DeviationIfLessValue", p_DeviationIfLessValue) :
                new ObjectParameter("p_DeviationIfLessValue", typeof(double));
    
            var p_LessValueDeviationTypeIDParameter = p_LessValueDeviationTypeID.HasValue ?
                new ObjectParameter("p_LessValueDeviationTypeID", p_LessValueDeviationTypeID) :
                new ObjectParameter("p_LessValueDeviationTypeID", typeof(short));
    
            var p_DeviationIfMoreValueParameter = p_DeviationIfMoreValue.HasValue ?
                new ObjectParameter("p_DeviationIfMoreValue", p_DeviationIfMoreValue) :
                new ObjectParameter("p_DeviationIfMoreValue", typeof(double));
    
            var p_MoreValueDeviationTypeIDParameter = p_MoreValueDeviationTypeID.HasValue ?
                new ObjectParameter("p_MoreValueDeviationTypeID", p_MoreValueDeviationTypeID) :
                new ObjectParameter("p_MoreValueDeviationTypeID", typeof(short));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCheckListTask", p_CheckListIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_ChecklistTaskCodeParameter, p_AttributeTypeParameter, p_TextLengthParameter, p_FloatPrecisionParameter, p_FloatScaleParameter, p_UOMIDParameter, p_DeviationIfFalseParameter, p_BoolDeviationTypeIDParameter, p_DeviationIfLessValueParameter, p_LessValueDeviationTypeIDParameter, p_DeviationIfMoreValueParameter, p_MoreValueDeviationTypeIDParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CheckListTaskID);
        }
    
        public virtual int AddCheckListTaskGroup(string p_ModuleCode, Nullable<short> p_GroupSequence, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_ChecklistTaskGroupID)
        {
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_GroupSequenceParameter = p_GroupSequence.HasValue ?
                new ObjectParameter("p_GroupSequence", p_GroupSequence) :
                new ObjectParameter("p_GroupSequence", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCheckListTaskGroup", p_ModuleCodeParameter, p_GroupSequenceParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_ChecklistTaskGroupID);
        }
    
        public virtual int AddCheckListTaskList(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCheckListTaskList", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddContract(Nullable<short> p_CustomerID, Nullable<System.DateTime> p_ContractDate, Nullable<System.DateTime> p_ContractStartDate, Nullable<byte> p_ContractDuration, string p_SourceRefID, Nullable<int> p_ResponsiblePersonID, string p_Remarks, string p_InspectionType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_ContractID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractDateParameter = p_ContractDate.HasValue ?
                new ObjectParameter("p_ContractDate", p_ContractDate) :
                new ObjectParameter("p_ContractDate", typeof(System.DateTime));
    
            var p_ContractStartDateParameter = p_ContractStartDate.HasValue ?
                new ObjectParameter("p_ContractStartDate", p_ContractStartDate) :
                new ObjectParameter("p_ContractStartDate", typeof(System.DateTime));
    
            var p_ContractDurationParameter = p_ContractDuration.HasValue ?
                new ObjectParameter("p_ContractDuration", p_ContractDuration) :
                new ObjectParameter("p_ContractDuration", typeof(byte));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContract", p_CustomerIDParameter, p_ContractDateParameter, p_ContractStartDateParameter, p_ContractDurationParameter, p_SourceRefIDParameter, p_ResponsiblePersonIDParameter, p_RemarksParameter, p_InspectionTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_ContractID);
        }
    
        public virtual int AddControllerSpecialization(Nullable<int> p_ControllerID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddControllerSpecialization", p_ControllerIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddControllerTagging(Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_ControllerTaggingID)
        {
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddControllerTagging", p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_ControllerTaggingID);
        }
    
        public virtual int AddCountryHoliday(Nullable<System.DateTime> p_HolidayDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_HolidayDateParameter = p_HolidayDate.HasValue ?
                new ObjectParameter("p_HolidayDate", p_HolidayDate) :
                new ObjectParameter("p_HolidayDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCountryHoliday", p_HolidayDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddCourse(Nullable<short> p_CourseTypeID, string p_CourseCode, string p_Frequency, string p_Remarks, Nullable<byte> p_CourseMarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, Nullable<short> p_CustomerID, ObjectParameter p_CourseID)
        {
            var p_CourseTypeIDParameter = p_CourseTypeID.HasValue ?
                new ObjectParameter("p_CourseTypeID", p_CourseTypeID) :
                new ObjectParameter("p_CourseTypeID", typeof(short));
    
            var p_CourseCodeParameter = p_CourseCode != null ?
                new ObjectParameter("p_CourseCode", p_CourseCode) :
                new ObjectParameter("p_CourseCode", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CourseMarksParameter = p_CourseMarks.HasValue ?
                new ObjectParameter("p_CourseMarks", p_CourseMarks) :
                new ObjectParameter("p_CourseMarks", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCourse", p_CourseTypeIDParameter, p_CourseCodeParameter, p_FrequencyParameter, p_RemarksParameter, p_CourseMarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CustomerIDParameter, p_CourseID);
        }
    
        public virtual int AddCourseType(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CourseTypeID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCourseType", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CourseTypeID);
        }
    
        public virtual int AddCustomer(string p_CustomerShortCode, string p_CustomerName, string p_LegalEntityName, Nullable<long> p_Logo, string p_Remarks, Nullable<int> p_AccountManagerID, Nullable<System.DateTime> p_EffectiveFromDate, Nullable<System.DateTime> p_EffectiveTillDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CustomerID)
        {
            var p_CustomerShortCodeParameter = p_CustomerShortCode != null ?
                new ObjectParameter("p_CustomerShortCode", p_CustomerShortCode) :
                new ObjectParameter("p_CustomerShortCode", typeof(string));
    
            var p_CustomerNameParameter = p_CustomerName != null ?
                new ObjectParameter("p_CustomerName", p_CustomerName) :
                new ObjectParameter("p_CustomerName", typeof(string));
    
            var p_LegalEntityNameParameter = p_LegalEntityName != null ?
                new ObjectParameter("p_LegalEntityName", p_LegalEntityName) :
                new ObjectParameter("p_LegalEntityName", typeof(string));
    
            var p_LogoParameter = p_Logo.HasValue ?
                new ObjectParameter("p_Logo", p_Logo) :
                new ObjectParameter("p_Logo", typeof(long));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_EffectiveFromDateParameter = p_EffectiveFromDate.HasValue ?
                new ObjectParameter("p_EffectiveFromDate", p_EffectiveFromDate) :
                new ObjectParameter("p_EffectiveFromDate", typeof(System.DateTime));
    
            var p_EffectiveTillDateParameter = p_EffectiveTillDate.HasValue ?
                new ObjectParameter("p_EffectiveTillDate", p_EffectiveTillDate) :
                new ObjectParameter("p_EffectiveTillDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomer", p_CustomerShortCodeParameter, p_CustomerNameParameter, p_LegalEntityNameParameter, p_LogoParameter, p_RemarksParameter, p_AccountManagerIDParameter, p_EffectiveFromDateParameter, p_EffectiveTillDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CustomerID);
        }
    
        public virtual int AddCustomerAddress(Nullable<short> p_CustomerID, string p_AddressType, string p_AddressLine1, string p_AddressLine2, string p_CityName, string p_StateName, string p_CountryName, string p_Pincode, Nullable<bool> p_IsPrimaryAddress, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_AddressTypeParameter = p_AddressType != null ?
                new ObjectParameter("p_AddressType", p_AddressType) :
                new ObjectParameter("p_AddressType", typeof(string));
    
            var p_AddressLine1Parameter = p_AddressLine1 != null ?
                new ObjectParameter("p_AddressLine1", p_AddressLine1) :
                new ObjectParameter("p_AddressLine1", typeof(string));
    
            var p_AddressLine2Parameter = p_AddressLine2 != null ?
                new ObjectParameter("p_AddressLine2", p_AddressLine2) :
                new ObjectParameter("p_AddressLine2", typeof(string));
    
            var p_CityNameParameter = p_CityName != null ?
                new ObjectParameter("p_CityName", p_CityName) :
                new ObjectParameter("p_CityName", typeof(string));
    
            var p_StateNameParameter = p_StateName != null ?
                new ObjectParameter("p_StateName", p_StateName) :
                new ObjectParameter("p_StateName", typeof(string));
    
            var p_CountryNameParameter = p_CountryName != null ?
                new ObjectParameter("p_CountryName", p_CountryName) :
                new ObjectParameter("p_CountryName", typeof(string));
    
            var p_PincodeParameter = p_Pincode != null ?
                new ObjectParameter("p_Pincode", p_Pincode) :
                new ObjectParameter("p_Pincode", typeof(string));
    
            var p_IsPrimaryAddressParameter = p_IsPrimaryAddress.HasValue ?
                new ObjectParameter("p_IsPrimaryAddress", p_IsPrimaryAddress) :
                new ObjectParameter("p_IsPrimaryAddress", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerAddress", p_CustomerIDParameter, p_AddressTypeParameter, p_AddressLine1Parameter, p_AddressLine2Parameter, p_CityNameParameter, p_StateNameParameter, p_CountryNameParameter, p_PincodeParameter, p_IsPrimaryAddressParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddCustomerContact(Nullable<short> p_CustomerID, string p_ContactName, string p_Email, string p_Telephone, string p_Mobile, Nullable<bool> p_IsPrimaryContact, Nullable<int> p_UserID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContactNameParameter = p_ContactName != null ?
                new ObjectParameter("p_ContactName", p_ContactName) :
                new ObjectParameter("p_ContactName", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_TelephoneParameter = p_Telephone != null ?
                new ObjectParameter("p_Telephone", p_Telephone) :
                new ObjectParameter("p_Telephone", typeof(string));
    
            var p_MobileParameter = p_Mobile != null ?
                new ObjectParameter("p_Mobile", p_Mobile) :
                new ObjectParameter("p_Mobile", typeof(string));
    
            var p_IsPrimaryContactParameter = p_IsPrimaryContact.HasValue ?
                new ObjectParameter("p_IsPrimaryContact", p_IsPrimaryContact) :
                new ObjectParameter("p_IsPrimaryContact", typeof(bool));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerContact", p_CustomerIDParameter, p_ContactNameParameter, p_EmailParameter, p_TelephoneParameter, p_MobileParameter, p_IsPrimaryContactParameter, p_UserIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddCustomerLocationHoliday(Nullable<short> p_CustomerID, Nullable<System.DateTime> p_HolidayDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_HolidayDateParameter = p_HolidayDate.HasValue ?
                new ObjectParameter("p_HolidayDate", p_HolidayDate) :
                new ObjectParameter("p_HolidayDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerLocationHoliday", p_CustomerIDParameter, p_HolidayDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddCustomerLocationRiskLevel(string p_LocationName, Nullable<int> p_ParentLocationID, Nullable<bool> p_HasCustomers, Nullable<short> p_CustomerID, Nullable<double> p_Longitude, Nullable<double> p_Latitude, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_LocationID)
        {
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ParentLocationIDParameter = p_ParentLocationID.HasValue ?
                new ObjectParameter("p_ParentLocationID", p_ParentLocationID) :
                new ObjectParameter("p_ParentLocationID", typeof(int));
    
            var p_HasCustomersParameter = p_HasCustomers.HasValue ?
                new ObjectParameter("p_HasCustomers", p_HasCustomers) :
                new ObjectParameter("p_HasCustomers", typeof(bool));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerLocationRiskLevel", p_LocationNameParameter, p_ParentLocationIDParameter, p_HasCustomersParameter, p_CustomerIDParameter, p_LongitudeParameter, p_LatitudeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_LocationID);
        }
    
        public virtual int AddCustomerServiceLineConfiguration(Nullable<short> p_CustomerID, string p_ServiceLineCode, string p_ConfigurationCode, Nullable<int> p_ConfigurationValue, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_ConfigurationCodeParameter = p_ConfigurationCode != null ?
                new ObjectParameter("p_ConfigurationCode", p_ConfigurationCode) :
                new ObjectParameter("p_ConfigurationCode", typeof(string));
    
            var p_ConfigurationValueParameter = p_ConfigurationValue.HasValue ?
                new ObjectParameter("p_ConfigurationValue", p_ConfigurationValue) :
                new ObjectParameter("p_ConfigurationValue", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerServiceLineConfiguration", p_CustomerIDParameter, p_ServiceLineCodeParameter, p_ConfigurationCodeParameter, p_ConfigurationValueParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddCustomerWeeklyOff(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerWeeklyOff", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddDepartment(Nullable<bool> p_IsExternal, string p_ZipCode, string p_City, string p_ContractorCode, string p_Email, string p_WebURL, string p_TelePhone, string p_Address, string p_ContactPerson, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DepartmentID)
        {
            var p_IsExternalParameter = p_IsExternal.HasValue ?
                new ObjectParameter("p_IsExternal", p_IsExternal) :
                new ObjectParameter("p_IsExternal", typeof(bool));
    
            var p_ZipCodeParameter = p_ZipCode != null ?
                new ObjectParameter("p_ZipCode", p_ZipCode) :
                new ObjectParameter("p_ZipCode", typeof(string));
    
            var p_CityParameter = p_City != null ?
                new ObjectParameter("p_City", p_City) :
                new ObjectParameter("p_City", typeof(string));
    
            var p_ContractorCodeParameter = p_ContractorCode != null ?
                new ObjectParameter("p_ContractorCode", p_ContractorCode) :
                new ObjectParameter("p_ContractorCode", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_WebURLParameter = p_WebURL != null ?
                new ObjectParameter("p_WebURL", p_WebURL) :
                new ObjectParameter("p_WebURL", typeof(string));
    
            var p_TelePhoneParameter = p_TelePhone != null ?
                new ObjectParameter("p_TelePhone", p_TelePhone) :
                new ObjectParameter("p_TelePhone", typeof(string));
    
            var p_AddressParameter = p_Address != null ?
                new ObjectParameter("p_Address", p_Address) :
                new ObjectParameter("p_Address", typeof(string));
    
            var p_ContactPersonParameter = p_ContactPerson != null ?
                new ObjectParameter("p_ContactPerson", p_ContactPerson) :
                new ObjectParameter("p_ContactPerson", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDepartment", p_IsExternalParameter, p_ZipCodeParameter, p_CityParameter, p_ContractorCodeParameter, p_EmailParameter, p_WebURLParameter, p_TelePhoneParameter, p_AddressParameter, p_ContactPersonParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DepartmentID);
        }
    
        public virtual int AddDesignation(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DesignationID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDesignation", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DesignationID);
        }
    
        public virtual int AddDeviationType(string p_ServiceLineCode, Nullable<short> p_CategoryID, Nullable<short> p_DeviationTypeSequence, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<byte> p_RiskLevelID, string p_DeviationTypeCode, Nullable<short> p_DeviationGroupID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DeviationTypeID)
        {
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DeviationTypeSequenceParameter = p_DeviationTypeSequence.HasValue ?
                new ObjectParameter("p_DeviationTypeSequence", p_DeviationTypeSequence) :
                new ObjectParameter("p_DeviationTypeSequence", typeof(short));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_DeviationTypeCodeParameter = p_DeviationTypeCode != null ?
                new ObjectParameter("p_DeviationTypeCode", p_DeviationTypeCode) :
                new ObjectParameter("p_DeviationTypeCode", typeof(string));
    
            var p_DeviationGroupIDParameter = p_DeviationGroupID.HasValue ?
                new ObjectParameter("p_DeviationGroupID", p_DeviationGroupID) :
                new ObjectParameter("p_DeviationGroupID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviationType", p_ServiceLineCodeParameter, p_CategoryIDParameter, p_DeviationTypeSequenceParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_RiskLevelIDParameter, p_DeviationTypeCodeParameter, p_DeviationGroupIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DeviationTypeID);
        }
    
        public virtual int AddDeviationTypeResolution(Nullable<short> p_DeviationTypeID, Nullable<short> p_ResolutionSequence, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<bool> p_CanAddRepairComponent, Nullable<bool> p_UseRepairComponents, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DeviationTypeResolutionID)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ResolutionSequenceParameter = p_ResolutionSequence.HasValue ?
                new ObjectParameter("p_ResolutionSequence", p_ResolutionSequence) :
                new ObjectParameter("p_ResolutionSequence", typeof(short));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_CanAddRepairComponentParameter = p_CanAddRepairComponent.HasValue ?
                new ObjectParameter("p_CanAddRepairComponent", p_CanAddRepairComponent) :
                new ObjectParameter("p_CanAddRepairComponent", typeof(bool));
    
            var p_UseRepairComponentsParameter = p_UseRepairComponents.HasValue ?
                new ObjectParameter("p_UseRepairComponents", p_UseRepairComponents) :
                new ObjectParameter("p_UseRepairComponents", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviationTypeResolution", p_DeviationTypeIDParameter, p_ResolutionSequenceParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_CanAddRepairComponentParameter, p_UseRepairComponentsParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DeviationTypeResolutionID);
        }
    
        public virtual int AddDeviationWithPhoto(Nullable<int> p_InspectionID, Nullable<int> p_LocationID, Nullable<int> p_ObjectInstanceID, Nullable<int> p_CheckListTaskID, Nullable<short> p_DeviationTypeID, string p_DeviationDescription, Nullable<System.DateTime> p_DeviationDateTime, string p_DeviationRemarks, Nullable<System.DateTime> p_ProposedResolutionDateTime, Nullable<System.DateTime> p_ResolutionDateTime, Nullable<System.DateTime> p_ClosureDateTime, Nullable<int> p_ControllerID, string p_ResolutionRemarks, Nullable<double> p_Latitude, Nullable<double> p_Longitude, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_CheckListTaskIDParameter = p_CheckListTaskID.HasValue ?
                new ObjectParameter("p_CheckListTaskID", p_CheckListTaskID) :
                new ObjectParameter("p_CheckListTaskID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_DeviationDescriptionParameter = p_DeviationDescription != null ?
                new ObjectParameter("p_DeviationDescription", p_DeviationDescription) :
                new ObjectParameter("p_DeviationDescription", typeof(string));
    
            var p_DeviationDateTimeParameter = p_DeviationDateTime.HasValue ?
                new ObjectParameter("p_DeviationDateTime", p_DeviationDateTime) :
                new ObjectParameter("p_DeviationDateTime", typeof(System.DateTime));
    
            var p_DeviationRemarksParameter = p_DeviationRemarks != null ?
                new ObjectParameter("p_DeviationRemarks", p_DeviationRemarks) :
                new ObjectParameter("p_DeviationRemarks", typeof(string));
    
            var p_ProposedResolutionDateTimeParameter = p_ProposedResolutionDateTime.HasValue ?
                new ObjectParameter("p_ProposedResolutionDateTime", p_ProposedResolutionDateTime) :
                new ObjectParameter("p_ProposedResolutionDateTime", typeof(System.DateTime));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_ResolutionRemarksParameter = p_ResolutionRemarks != null ?
                new ObjectParameter("p_ResolutionRemarks", p_ResolutionRemarks) :
                new ObjectParameter("p_ResolutionRemarks", typeof(string));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviationWithPhoto", p_InspectionIDParameter, p_LocationIDParameter, p_ObjectInstanceIDParameter, p_CheckListTaskIDParameter, p_DeviationTypeIDParameter, p_DeviationDescriptionParameter, p_DeviationDateTimeParameter, p_DeviationRemarksParameter, p_ProposedResolutionDateTimeParameter, p_ResolutionDateTimeParameter, p_ClosureDateTimeParameter, p_ControllerIDParameter, p_ResolutionRemarksParameter, p_LatitudeParameter, p_LongitudeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddDocument(Nullable<short> p_DocumentCategoryID, string p_DocumentNumber, string p_DocumentName, Nullable<byte> p_DocumentTypeID, Nullable<long> p_FileID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DocumentID)
        {
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_DocumentNumberParameter = p_DocumentNumber != null ?
                new ObjectParameter("p_DocumentNumber", p_DocumentNumber) :
                new ObjectParameter("p_DocumentNumber", typeof(string));
    
            var p_DocumentNameParameter = p_DocumentName != null ?
                new ObjectParameter("p_DocumentName", p_DocumentName) :
                new ObjectParameter("p_DocumentName", typeof(string));
    
            var p_DocumentTypeIDParameter = p_DocumentTypeID.HasValue ?
                new ObjectParameter("p_DocumentTypeID", p_DocumentTypeID) :
                new ObjectParameter("p_DocumentTypeID", typeof(byte));
    
            var p_FileIDParameter = p_FileID.HasValue ?
                new ObjectParameter("p_FileID", p_FileID) :
                new ObjectParameter("p_FileID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDocument", p_DocumentCategoryIDParameter, p_DocumentNumberParameter, p_DocumentNameParameter, p_DocumentTypeIDParameter, p_FileIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DocumentID);
        }
    
        public virtual int AddDocumentCategory(Nullable<short> p_ParentDocumentCategoryID, Nullable<bool> p_HasDocuments, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DocumentCategoryID)
        {
            var p_ParentDocumentCategoryIDParameter = p_ParentDocumentCategoryID.HasValue ?
                new ObjectParameter("p_ParentDocumentCategoryID", p_ParentDocumentCategoryID) :
                new ObjectParameter("p_ParentDocumentCategoryID", typeof(short));
    
            var p_HasDocumentsParameter = p_HasDocuments.HasValue ?
                new ObjectParameter("p_HasDocuments", p_HasDocuments) :
                new ObjectParameter("p_HasDocuments", typeof(bool));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDocumentCategory", p_ParentDocumentCategoryIDParameter, p_HasDocumentsParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DocumentCategoryID);
        }
    
        public virtual int AddDrill(Nullable<byte> p_DrillTypeID, Nullable<System.DateTime> p_DrillDatetime, Nullable<int> p_LocationID, string p_DrillTitle, string p_Remarks, Nullable<System.DateTime> p_InitiationDateTime, Nullable<System.DateTime> p_ConclusionDateTime, Nullable<int> p_OwnerID, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosureDateTime, string p_ClosureRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DrillID)
        {
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillDatetimeParameter = p_DrillDatetime.HasValue ?
                new ObjectParameter("p_DrillDatetime", p_DrillDatetime) :
                new ObjectParameter("p_DrillDatetime", typeof(System.DateTime));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DrillTitleParameter = p_DrillTitle != null ?
                new ObjectParameter("p_DrillTitle", p_DrillTitle) :
                new ObjectParameter("p_DrillTitle", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_InitiationDateTimeParameter = p_InitiationDateTime.HasValue ?
                new ObjectParameter("p_InitiationDateTime", p_InitiationDateTime) :
                new ObjectParameter("p_InitiationDateTime", typeof(System.DateTime));
    
            var p_ConclusionDateTimeParameter = p_ConclusionDateTime.HasValue ?
                new ObjectParameter("p_ConclusionDateTime", p_ConclusionDateTime) :
                new ObjectParameter("p_ConclusionDateTime", typeof(System.DateTime));
    
            var p_OwnerIDParameter = p_OwnerID.HasValue ?
                new ObjectParameter("p_OwnerID", p_OwnerID) :
                new ObjectParameter("p_OwnerID", typeof(int));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrill", p_DrillTypeIDParameter, p_DrillDatetimeParameter, p_LocationIDParameter, p_DrillTitleParameter, p_RemarksParameter, p_InitiationDateTimeParameter, p_ConclusionDateTimeParameter, p_OwnerIDParameter, p_ClosedByParameter, p_ClosureDateTimeParameter, p_ClosureRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DrillID);
        }
    
        public virtual int AddDrillActionType(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DrillActionTypeID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillActionType", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DrillActionTypeID);
        }
    
        public virtual int AddDrillCheckList(Nullable<byte> p_DrillTypeID, Nullable<short> p_DrillStakeHolderID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DrillChecklistID)
        {
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillStakeHolderIDParameter = p_DrillStakeHolderID.HasValue ?
                new ObjectParameter("p_DrillStakeHolderID", p_DrillStakeHolderID) :
                new ObjectParameter("p_DrillStakeHolderID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillCheckList", p_DrillTypeIDParameter, p_DrillStakeHolderIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DrillChecklistID);
        }
    
        public virtual int AddDrillCheckListTaskList(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DrillCheckListTaskID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillCheckListTaskList", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DrillCheckListTaskID);
        }
    
        public virtual int AddDrillProposal(Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, Nullable<System.DateTime> p_ProposedDrillDatetime, string p_ProposalRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, Nullable<int> p_ParentDrillProposalID, ObjectParameter p_DrillProposalID)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_ProposedDrillDatetimeParameter = p_ProposedDrillDatetime.HasValue ?
                new ObjectParameter("p_ProposedDrillDatetime", p_ProposedDrillDatetime) :
                new ObjectParameter("p_ProposedDrillDatetime", typeof(System.DateTime));
    
            var p_ProposalRemarksParameter = p_ProposalRemarks != null ?
                new ObjectParameter("p_ProposalRemarks", p_ProposalRemarks) :
                new ObjectParameter("p_ProposalRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            var p_ParentDrillProposalIDParameter = p_ParentDrillProposalID.HasValue ?
                new ObjectParameter("p_ParentDrillProposalID", p_ParentDrillProposalID) :
                new ObjectParameter("p_ParentDrillProposalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillProposal", p_DrillIDParameter, p_DrillSetupIDParameter, p_ProposedDrillDatetimeParameter, p_ProposalRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_ParentDrillProposalIDParameter, p_DrillProposalID);
        }
    
        public virtual int AddDrillProposalStatus(Nullable<int> p_DrillID, Nullable<int> p_DrillProposalID, Nullable<int> p_DrillSetupID, Nullable<bool> p_IsApproved, Nullable<System.DateTime> p_ActionDatetime, Nullable<System.DateTime> p_ProposedDrillDatetime, string p_ProposalRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillProposalIDParameter = p_DrillProposalID.HasValue ?
                new ObjectParameter("p_DrillProposalID", p_DrillProposalID) :
                new ObjectParameter("p_DrillProposalID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_IsApprovedParameter = p_IsApproved.HasValue ?
                new ObjectParameter("p_IsApproved", p_IsApproved) :
                new ObjectParameter("p_IsApproved", typeof(bool));
    
            var p_ActionDatetimeParameter = p_ActionDatetime.HasValue ?
                new ObjectParameter("p_ActionDatetime", p_ActionDatetime) :
                new ObjectParameter("p_ActionDatetime", typeof(System.DateTime));
    
            var p_ProposedDrillDatetimeParameter = p_ProposedDrillDatetime.HasValue ?
                new ObjectParameter("p_ProposedDrillDatetime", p_ProposedDrillDatetime) :
                new ObjectParameter("p_ProposedDrillDatetime", typeof(System.DateTime));
    
            var p_ProposalRemarksParameter = p_ProposalRemarks != null ?
                new ObjectParameter("p_ProposalRemarks", p_ProposalRemarks) :
                new ObjectParameter("p_ProposalRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillProposalStatus", p_DrillIDParameter, p_DrillProposalIDParameter, p_DrillSetupIDParameter, p_IsApprovedParameter, p_ActionDatetimeParameter, p_ProposedDrillDatetimeParameter, p_ProposalRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddDrillStakeholder(Nullable<short> p_DepartmentID, string p_EmailID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DrillStakeholderID)
        {
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_EmailIDParameter = p_EmailID != null ?
                new ObjectParameter("p_EmailID", p_EmailID) :
                new ObjectParameter("p_EmailID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillStakeholder", p_DepartmentIDParameter, p_EmailIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DrillStakeholderID);
        }
    
        public virtual int AddDrillType(string p_Frequency, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_DrillTypeID)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrillType", p_FrequencyParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_DrillTypeID);
        }
    
        public virtual int AddEditAssessmentParameterMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditAssessmentParameterMapping");
        }
    
        public virtual int AddEditCourseMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditCourseMapping");
        }
    
        public virtual int AddEditDrillActionData(Nullable<int> p_DrillID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditDrillActionData", p_DrillIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEditDrillClosureData(Nullable<int> p_DrillID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditDrillClosureData", p_DrillIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEditDrillDataActualValue(Nullable<int> p_DrillID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditDrillDataActualValue", p_DrillIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEditDrillDataExpectedValue(Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditDrillDataExpectedValue", p_DrillIDParameter, p_DrillSetupIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEditDrillFollowupData(Nullable<int> p_DrillID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditDrillFollowupData", p_DrillIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEditFeedbackParameterMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditFeedbackParameterMapping");
        }
    
        public virtual int AddEditInspectionDeviationRepairComponent(Nullable<long> p_DeviationID, Nullable<System.DateTime> p_ResolutionDateTime, string p_ResolutionRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationIDParameter = p_DeviationID.HasValue ?
                new ObjectParameter("p_DeviationID", p_DeviationID) :
                new ObjectParameter("p_DeviationID", typeof(long));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_ResolutionRemarksParameter = p_ResolutionRemarks != null ?
                new ObjectParameter("p_ResolutionRemarks", p_ResolutionRemarks) :
                new ObjectParameter("p_ResolutionRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditInspectionDeviationRepairComponent", p_DeviationIDParameter, p_ResolutionDateTimeParameter, p_ResolutionRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEditLocationDeviationRepairComponent(Nullable<long> p_DeviationID, Nullable<System.DateTime> p_ResolutionDateTime, string p_ResolutionRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationIDParameter = p_DeviationID.HasValue ?
                new ObjectParameter("p_DeviationID", p_DeviationID) :
                new ObjectParameter("p_DeviationID", typeof(long));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_ResolutionRemarksParameter = p_ResolutionRemarks != null ?
                new ObjectParameter("p_ResolutionRemarks", p_ResolutionRemarks) :
                new ObjectParameter("p_ResolutionRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditLocationDeviationRepairComponent", p_DeviationIDParameter, p_ResolutionDateTimeParameter, p_ResolutionRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEmergencyInspection(Nullable<System.DateTime> p_ScheduleStartDate, Nullable<System.DateTime> p_ScheduleEndDate, Nullable<int> p_RaisedBy, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ScheduleStartDateParameter = p_ScheduleStartDate.HasValue ?
                new ObjectParameter("p_ScheduleStartDate", p_ScheduleStartDate) :
                new ObjectParameter("p_ScheduleStartDate", typeof(System.DateTime));
    
            var p_ScheduleEndDateParameter = p_ScheduleEndDate.HasValue ?
                new ObjectParameter("p_ScheduleEndDate", p_ScheduleEndDate) :
                new ObjectParameter("p_ScheduleEndDate", typeof(System.DateTime));
    
            var p_RaisedByParameter = p_RaisedBy.HasValue ?
                new ObjectParameter("p_RaisedBy", p_RaisedBy) :
                new ObjectParameter("p_RaisedBy", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmergencyInspection", p_ScheduleStartDateParameter, p_ScheduleEndDateParameter, p_RaisedByParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEmergencyInspectionOnline(Nullable<int> p_LocationID, Nullable<int> p_ObjectInstanceID, Nullable<long> p_ObjectInstanceInspectionID, Nullable<bool> p_IsMobileDeviceUsed, Nullable<bool> p_IsObjectLocatedWithQRCode, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<System.DateTime> p_InspectionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectInstanceInspectionIDParameter = p_ObjectInstanceInspectionID.HasValue ?
                new ObjectParameter("p_ObjectInstanceInspectionID", p_ObjectInstanceInspectionID) :
                new ObjectParameter("p_ObjectInstanceInspectionID", typeof(long));
    
            var p_IsMobileDeviceUsedParameter = p_IsMobileDeviceUsed.HasValue ?
                new ObjectParameter("p_IsMobileDeviceUsed", p_IsMobileDeviceUsed) :
                new ObjectParameter("p_IsMobileDeviceUsed", typeof(bool));
    
            var p_IsObjectLocatedWithQRCodeParameter = p_IsObjectLocatedWithQRCode.HasValue ?
                new ObjectParameter("p_IsObjectLocatedWithQRCode", p_IsObjectLocatedWithQRCode) :
                new ObjectParameter("p_IsObjectLocatedWithQRCode", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_InspectionDateTimeParameter = p_InspectionDateTime.HasValue ?
                new ObjectParameter("p_InspectionDateTime", p_InspectionDateTime) :
                new ObjectParameter("p_InspectionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmergencyInspectionOnline", p_LocationIDParameter, p_ObjectInstanceIDParameter, p_ObjectInstanceInspectionIDParameter, p_IsMobileDeviceUsedParameter, p_IsObjectLocatedWithQRCodeParameter, p_LongitudeParameter, p_LatitudeParameter, p_InspectionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddEmployee(string p_HRMSEmployeeID, string p_Salutation, string p_FirstName, string p_MiddleName, string p_LastName, string p_Gender, string p_ShortCode, string p_FullEmployeeAddress, string p_TelephoneNo, string p_CellNo, string p_ExtensionNo, string p_Email, string p_EmergencyContact1, string p_EmergencyContact2, Nullable<int> p_ReportingEmployeeID, Nullable<System.DateTime> p_AppointmentDate, Nullable<System.DateTime> p_LeavingDate, Nullable<short> p_DesignationID, Nullable<short> p_DepartmentID, Nullable<System.DateTime> p_DOB, Nullable<short> p_CustomerID, string p_Shiftcode, string p_SquadCode, Nullable<int> p_UserID, Nullable<int> p_EndUserID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_EmployeeID)
        {
            var p_HRMSEmployeeIDParameter = p_HRMSEmployeeID != null ?
                new ObjectParameter("p_HRMSEmployeeID", p_HRMSEmployeeID) :
                new ObjectParameter("p_HRMSEmployeeID", typeof(string));
    
            var p_SalutationParameter = p_Salutation != null ?
                new ObjectParameter("p_Salutation", p_Salutation) :
                new ObjectParameter("p_Salutation", typeof(string));
    
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("p_FirstName", p_FirstName) :
                new ObjectParameter("p_FirstName", typeof(string));
    
            var p_MiddleNameParameter = p_MiddleName != null ?
                new ObjectParameter("p_MiddleName", p_MiddleName) :
                new ObjectParameter("p_MiddleName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("p_LastName", p_LastName) :
                new ObjectParameter("p_LastName", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_ShortCodeParameter = p_ShortCode != null ?
                new ObjectParameter("p_ShortCode", p_ShortCode) :
                new ObjectParameter("p_ShortCode", typeof(string));
    
            var p_FullEmployeeAddressParameter = p_FullEmployeeAddress != null ?
                new ObjectParameter("p_FullEmployeeAddress", p_FullEmployeeAddress) :
                new ObjectParameter("p_FullEmployeeAddress", typeof(string));
    
            var p_TelephoneNoParameter = p_TelephoneNo != null ?
                new ObjectParameter("p_TelephoneNo", p_TelephoneNo) :
                new ObjectParameter("p_TelephoneNo", typeof(string));
    
            var p_CellNoParameter = p_CellNo != null ?
                new ObjectParameter("p_CellNo", p_CellNo) :
                new ObjectParameter("p_CellNo", typeof(string));
    
            var p_ExtensionNoParameter = p_ExtensionNo != null ?
                new ObjectParameter("p_ExtensionNo", p_ExtensionNo) :
                new ObjectParameter("p_ExtensionNo", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_EmergencyContact1Parameter = p_EmergencyContact1 != null ?
                new ObjectParameter("p_EmergencyContact1", p_EmergencyContact1) :
                new ObjectParameter("p_EmergencyContact1", typeof(string));
    
            var p_EmergencyContact2Parameter = p_EmergencyContact2 != null ?
                new ObjectParameter("p_EmergencyContact2", p_EmergencyContact2) :
                new ObjectParameter("p_EmergencyContact2", typeof(string));
    
            var p_ReportingEmployeeIDParameter = p_ReportingEmployeeID.HasValue ?
                new ObjectParameter("p_ReportingEmployeeID", p_ReportingEmployeeID) :
                new ObjectParameter("p_ReportingEmployeeID", typeof(int));
    
            var p_AppointmentDateParameter = p_AppointmentDate.HasValue ?
                new ObjectParameter("p_AppointmentDate", p_AppointmentDate) :
                new ObjectParameter("p_AppointmentDate", typeof(System.DateTime));
    
            var p_LeavingDateParameter = p_LeavingDate.HasValue ?
                new ObjectParameter("p_LeavingDate", p_LeavingDate) :
                new ObjectParameter("p_LeavingDate", typeof(System.DateTime));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_DOBParameter = p_DOB.HasValue ?
                new ObjectParameter("p_DOB", p_DOB) :
                new ObjectParameter("p_DOB", typeof(System.DateTime));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ShiftcodeParameter = p_Shiftcode != null ?
                new ObjectParameter("p_Shiftcode", p_Shiftcode) :
                new ObjectParameter("p_Shiftcode", typeof(string));
    
            var p_SquadCodeParameter = p_SquadCode != null ?
                new ObjectParameter("p_SquadCode", p_SquadCode) :
                new ObjectParameter("p_SquadCode", typeof(string));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", p_HRMSEmployeeIDParameter, p_SalutationParameter, p_FirstNameParameter, p_MiddleNameParameter, p_LastNameParameter, p_GenderParameter, p_ShortCodeParameter, p_FullEmployeeAddressParameter, p_TelephoneNoParameter, p_CellNoParameter, p_ExtensionNoParameter, p_EmailParameter, p_EmergencyContact1Parameter, p_EmergencyContact2Parameter, p_ReportingEmployeeIDParameter, p_AppointmentDateParameter, p_LeavingDateParameter, p_DesignationIDParameter, p_DepartmentIDParameter, p_DOBParameter, p_CustomerIDParameter, p_ShiftcodeParameter, p_SquadCodeParameter, p_UserIDParameter, p_EndUserIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_EmployeeID);
        }
    
        public virtual int AddEndUser(string p_LoginID, string p_FirstName, string p_MiddleName, string p_LastName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, string p_DefaultModuleCode, string p_Gender, string p_EmailID, string p_UserIdentity, Nullable<System.DateTime> p_ActivatedDTM, string p_LastAccessPoint, Nullable<System.DateTime> p_LastLoginDTM, string p_SecretQuestion, string p_SecretAnswer, Nullable<int> p_ActivationURLID, Nullable<int> p_ResetPasswordURLID, Nullable<short> p_DesignationID, Nullable<short> p_DepartmentID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_CurrentAccessPoint, ObjectParameter p_EndUserID)
        {
            var p_LoginIDParameter = p_LoginID != null ?
                new ObjectParameter("p_LoginID", p_LoginID) :
                new ObjectParameter("p_LoginID", typeof(string));
    
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("p_FirstName", p_FirstName) :
                new ObjectParameter("p_FirstName", typeof(string));
    
            var p_MiddleNameParameter = p_MiddleName != null ?
                new ObjectParameter("p_MiddleName", p_MiddleName) :
                new ObjectParameter("p_MiddleName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("p_LastName", p_LastName) :
                new ObjectParameter("p_LastName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_DefaultModuleCodeParameter = p_DefaultModuleCode != null ?
                new ObjectParameter("p_DefaultModuleCode", p_DefaultModuleCode) :
                new ObjectParameter("p_DefaultModuleCode", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_EmailIDParameter = p_EmailID != null ?
                new ObjectParameter("p_EmailID", p_EmailID) :
                new ObjectParameter("p_EmailID", typeof(string));
    
            var p_UserIdentityParameter = p_UserIdentity != null ?
                new ObjectParameter("p_UserIdentity", p_UserIdentity) :
                new ObjectParameter("p_UserIdentity", typeof(string));
    
            var p_ActivatedDTMParameter = p_ActivatedDTM.HasValue ?
                new ObjectParameter("p_ActivatedDTM", p_ActivatedDTM) :
                new ObjectParameter("p_ActivatedDTM", typeof(System.DateTime));
    
            var p_LastAccessPointParameter = p_LastAccessPoint != null ?
                new ObjectParameter("p_LastAccessPoint", p_LastAccessPoint) :
                new ObjectParameter("p_LastAccessPoint", typeof(string));
    
            var p_LastLoginDTMParameter = p_LastLoginDTM.HasValue ?
                new ObjectParameter("p_LastLoginDTM", p_LastLoginDTM) :
                new ObjectParameter("p_LastLoginDTM", typeof(System.DateTime));
    
            var p_SecretQuestionParameter = p_SecretQuestion != null ?
                new ObjectParameter("p_SecretQuestion", p_SecretQuestion) :
                new ObjectParameter("p_SecretQuestion", typeof(string));
    
            var p_SecretAnswerParameter = p_SecretAnswer != null ?
                new ObjectParameter("p_SecretAnswer", p_SecretAnswer) :
                new ObjectParameter("p_SecretAnswer", typeof(string));
    
            var p_ActivationURLIDParameter = p_ActivationURLID.HasValue ?
                new ObjectParameter("p_ActivationURLID", p_ActivationURLID) :
                new ObjectParameter("p_ActivationURLID", typeof(int));
    
            var p_ResetPasswordURLIDParameter = p_ResetPasswordURLID.HasValue ?
                new ObjectParameter("p_ResetPasswordURLID", p_ResetPasswordURLID) :
                new ObjectParameter("p_ResetPasswordURLID", typeof(int));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_CurrentAccessPointParameter = p_CurrentAccessPoint != null ?
                new ObjectParameter("p_CurrentAccessPoint", p_CurrentAccessPoint) :
                new ObjectParameter("p_CurrentAccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEndUser", p_LoginIDParameter, p_FirstNameParameter, p_MiddleNameParameter, p_LastNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_DefaultModuleCodeParameter, p_GenderParameter, p_EmailIDParameter, p_UserIdentityParameter, p_ActivatedDTMParameter, p_LastAccessPointParameter, p_LastLoginDTMParameter, p_SecretQuestionParameter, p_SecretAnswerParameter, p_ActivationURLIDParameter, p_ResetPasswordURLIDParameter, p_DesignationIDParameter, p_DepartmentIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_CurrentAccessPointParameter, p_EndUserID);
        }
    
        public virtual int AddFeedbackParameter(string p_AttributeType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_FeedbackParameterID)
        {
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFeedbackParameter", p_AttributeTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_FeedbackParameterID);
        }
    
        public virtual int AddFile(string pObjectType, Nullable<int> pObjectInstanceID, string pFileName, string pFileType, Nullable<long> pFileSize, string pFileRemarks, ObjectParameter pFileID, ObjectParameter pFileRelativePath)
        {
            var pObjectTypeParameter = pObjectType != null ?
                new ObjectParameter("pObjectType", pObjectType) :
                new ObjectParameter("pObjectType", typeof(string));
    
            var pObjectInstanceIDParameter = pObjectInstanceID.HasValue ?
                new ObjectParameter("pObjectInstanceID", pObjectInstanceID) :
                new ObjectParameter("pObjectInstanceID", typeof(int));
    
            var pFileNameParameter = pFileName != null ?
                new ObjectParameter("pFileName", pFileName) :
                new ObjectParameter("pFileName", typeof(string));
    
            var pFileTypeParameter = pFileType != null ?
                new ObjectParameter("pFileType", pFileType) :
                new ObjectParameter("pFileType", typeof(string));
    
            var pFileSizeParameter = pFileSize.HasValue ?
                new ObjectParameter("pFileSize", pFileSize) :
                new ObjectParameter("pFileSize", typeof(long));
    
            var pFileRemarksParameter = pFileRemarks != null ?
                new ObjectParameter("pFileRemarks", pFileRemarks) :
                new ObjectParameter("pFileRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFile", pObjectTypeParameter, pObjectInstanceIDParameter, pFileNameParameter, pFileTypeParameter, pFileSizeParameter, pFileRemarksParameter, pFileID, pFileRelativePath);
        }
    
        public virtual int AddFRASCheckList(string p_FRASInspectionType, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_FRASChecklistID)
        {
            var p_FRASInspectionTypeParameter = p_FRASInspectionType != null ?
                new ObjectParameter("p_FRASInspectionType", p_FRASInspectionType) :
                new ObjectParameter("p_FRASInspectionType", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFRASCheckList", p_FRASInspectionTypeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_FRASChecklistID);
        }
    
        public virtual int AddFRASCheckListTaskList(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_FRASCheckListTaskID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFRASCheckListTaskList", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_FRASCheckListTaskID);
        }
    
        public virtual int AddFRASInspection(Nullable<short> p_FRASCheckListID, Nullable<int> p_LocationID, Nullable<int> p_ExecutedByUser, Nullable<System.DateTime> p_ExecutedDateTime, string p_Remarks, Nullable<bool> p_IsMobileDeviceUsed, Nullable<bool> p_IsLocationLocatedWithQRCode, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<byte> p_ActualRiskLevelID, Nullable<double> p_ActualMarkValue, Nullable<byte> p_RiskLevelID, Nullable<double> p_MarkValue, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_ENDUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_FRASInspectionID)
        {
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ExecutedByUserParameter = p_ExecutedByUser.HasValue ?
                new ObjectParameter("p_ExecutedByUser", p_ExecutedByUser) :
                new ObjectParameter("p_ExecutedByUser", typeof(int));
    
            var p_ExecutedDateTimeParameter = p_ExecutedDateTime.HasValue ?
                new ObjectParameter("p_ExecutedDateTime", p_ExecutedDateTime) :
                new ObjectParameter("p_ExecutedDateTime", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_IsMobileDeviceUsedParameter = p_IsMobileDeviceUsed.HasValue ?
                new ObjectParameter("p_IsMobileDeviceUsed", p_IsMobileDeviceUsed) :
                new ObjectParameter("p_IsMobileDeviceUsed", typeof(bool));
    
            var p_IsLocationLocatedWithQRCodeParameter = p_IsLocationLocatedWithQRCode.HasValue ?
                new ObjectParameter("p_IsLocationLocatedWithQRCode", p_IsLocationLocatedWithQRCode) :
                new ObjectParameter("p_IsLocationLocatedWithQRCode", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_ActualRiskLevelIDParameter = p_ActualRiskLevelID.HasValue ?
                new ObjectParameter("p_ActualRiskLevelID", p_ActualRiskLevelID) :
                new ObjectParameter("p_ActualRiskLevelID", typeof(byte));
    
            var p_ActualMarkValueParameter = p_ActualMarkValue.HasValue ?
                new ObjectParameter("p_ActualMarkValue", p_ActualMarkValue) :
                new ObjectParameter("p_ActualMarkValue", typeof(double));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_MarkValueParameter = p_MarkValue.HasValue ?
                new ObjectParameter("p_MarkValue", p_MarkValue) :
                new ObjectParameter("p_MarkValue", typeof(double));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_ENDUserIDParameter = p_ENDUserID.HasValue ?
                new ObjectParameter("p_ENDUserID", p_ENDUserID) :
                new ObjectParameter("p_ENDUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFRASInspection", p_FRASCheckListIDParameter, p_LocationIDParameter, p_ExecutedByUserParameter, p_ExecutedDateTimeParameter, p_RemarksParameter, p_IsMobileDeviceUsedParameter, p_IsLocationLocatedWithQRCodeParameter, p_LongitudeParameter, p_LatitudeParameter, p_ActualRiskLevelIDParameter, p_ActualMarkValueParameter, p_RiskLevelIDParameter, p_MarkValueParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_ENDUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_FRASInspectionID);
        }
    
        public virtual int AddGeneralInspection(Nullable<short> p_CustomerID, string p_Frequency, string p_InspectionType, Nullable<byte> p_ServiceLevelID, Nullable<short> p_CategoryID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGeneralInspection", p_CustomerIDParameter, p_FrequencyParameter, p_InspectionTypeParameter, p_ServiceLevelIDParameter, p_CategoryIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddGeneralInspectionMultiCategory(Nullable<short> p_CustomerID, string p_Frequency, string p_InspectionType, Nullable<byte> p_ServiceLevelID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGeneralInspectionMultiCategory", p_CustomerIDParameter, p_FrequencyParameter, p_InspectionTypeParameter, p_ServiceLevelIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddIncident(string p_IncidentTitle, Nullable<byte> p_IncidentTypeID, Nullable<short> p_IncidentCategoryID, Nullable<byte> p_IncidentSeverityLevel, Nullable<byte> p_IncidentPriorityLevel, Nullable<System.DateTime> p_OccurenceDateTime, Nullable<int> p_RecordedBy, Nullable<System.DateTime> p_RecordedDateTime, string p_ReportedBy, Nullable<System.DateTime> p_ReportedDateTime, string p_BriefDescription, string p_DetailedDescription, Nullable<int> p_IncidentOwner, Nullable<byte> p_IncidentStatus, string p_IncidentTag, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosureDateTime, string p_ClosureRemarks, Nullable<int> p_WaterQuantityUsed, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentID)
        {
            var p_IncidentTitleParameter = p_IncidentTitle != null ?
                new ObjectParameter("p_IncidentTitle", p_IncidentTitle) :
                new ObjectParameter("p_IncidentTitle", typeof(string));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_IncidentSeverityLevelParameter = p_IncidentSeverityLevel.HasValue ?
                new ObjectParameter("p_IncidentSeverityLevel", p_IncidentSeverityLevel) :
                new ObjectParameter("p_IncidentSeverityLevel", typeof(byte));
    
            var p_IncidentPriorityLevelParameter = p_IncidentPriorityLevel.HasValue ?
                new ObjectParameter("p_IncidentPriorityLevel", p_IncidentPriorityLevel) :
                new ObjectParameter("p_IncidentPriorityLevel", typeof(byte));
    
            var p_OccurenceDateTimeParameter = p_OccurenceDateTime.HasValue ?
                new ObjectParameter("p_OccurenceDateTime", p_OccurenceDateTime) :
                new ObjectParameter("p_OccurenceDateTime", typeof(System.DateTime));
    
            var p_RecordedByParameter = p_RecordedBy.HasValue ?
                new ObjectParameter("p_RecordedBy", p_RecordedBy) :
                new ObjectParameter("p_RecordedBy", typeof(int));
    
            var p_RecordedDateTimeParameter = p_RecordedDateTime.HasValue ?
                new ObjectParameter("p_RecordedDateTime", p_RecordedDateTime) :
                new ObjectParameter("p_RecordedDateTime", typeof(System.DateTime));
    
            var p_ReportedByParameter = p_ReportedBy != null ?
                new ObjectParameter("p_ReportedBy", p_ReportedBy) :
                new ObjectParameter("p_ReportedBy", typeof(string));
    
            var p_ReportedDateTimeParameter = p_ReportedDateTime.HasValue ?
                new ObjectParameter("p_ReportedDateTime", p_ReportedDateTime) :
                new ObjectParameter("p_ReportedDateTime", typeof(System.DateTime));
    
            var p_BriefDescriptionParameter = p_BriefDescription != null ?
                new ObjectParameter("p_BriefDescription", p_BriefDescription) :
                new ObjectParameter("p_BriefDescription", typeof(string));
    
            var p_DetailedDescriptionParameter = p_DetailedDescription != null ?
                new ObjectParameter("p_DetailedDescription", p_DetailedDescription) :
                new ObjectParameter("p_DetailedDescription", typeof(string));
    
            var p_IncidentOwnerParameter = p_IncidentOwner.HasValue ?
                new ObjectParameter("p_IncidentOwner", p_IncidentOwner) :
                new ObjectParameter("p_IncidentOwner", typeof(int));
    
            var p_IncidentStatusParameter = p_IncidentStatus.HasValue ?
                new ObjectParameter("p_IncidentStatus", p_IncidentStatus) :
                new ObjectParameter("p_IncidentStatus", typeof(byte));
    
            var p_IncidentTagParameter = p_IncidentTag != null ?
                new ObjectParameter("p_IncidentTag", p_IncidentTag) :
                new ObjectParameter("p_IncidentTag", typeof(string));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_WaterQuantityUsedParameter = p_WaterQuantityUsed.HasValue ?
                new ObjectParameter("p_WaterQuantityUsed", p_WaterQuantityUsed) :
                new ObjectParameter("p_WaterQuantityUsed", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncident", p_IncidentTitleParameter, p_IncidentTypeIDParameter, p_IncidentCategoryIDParameter, p_IncidentSeverityLevelParameter, p_IncidentPriorityLevelParameter, p_OccurenceDateTimeParameter, p_RecordedByParameter, p_RecordedDateTimeParameter, p_ReportedByParameter, p_ReportedDateTimeParameter, p_BriefDescriptionParameter, p_DetailedDescriptionParameter, p_IncidentOwnerParameter, p_IncidentStatusParameter, p_IncidentTagParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_ClosedByParameter, p_ClosureDateTimeParameter, p_ClosureRemarksParameter, p_WaterQuantityUsedParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentID);
        }
    
        public virtual int AddIncidentCategory(Nullable<short> p_ParentCategoryID, Nullable<bool> p_IsLeaf, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentCategoryID)
        {
            var p_ParentCategoryIDParameter = p_ParentCategoryID.HasValue ?
                new ObjectParameter("p_ParentCategoryID", p_ParentCategoryID) :
                new ObjectParameter("p_ParentCategoryID", typeof(short));
    
            var p_IsLeafParameter = p_IsLeaf.HasValue ?
                new ObjectParameter("p_IsLeaf", p_IsLeaf) :
                new ObjectParameter("p_IsLeaf", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentCategory", p_ParentCategoryIDParameter, p_IsLeafParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentCategoryID);
        }
    
        public virtual int AddIncidentCause(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentCause", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddIncidentCauseType(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentCauseTypeID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentCauseType", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentCauseTypeID);
        }
    
        public virtual int AddIncidentCheckList(Nullable<byte> p_IncidentTypeID, Nullable<short> p_DepartmentID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentChecklistID)
        {
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentCheckList", p_IncidentTypeIDParameter, p_DepartmentIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentChecklistID);
        }
    
        public virtual int AddIncidentCheckListTask(Nullable<int> p_IncidentInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentInspectionIDParameter = p_IncidentInspectionID.HasValue ?
                new ObjectParameter("p_IncidentInspectionID", p_IncidentInspectionID) :
                new ObjectParameter("p_IncidentInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentCheckListTask", p_IncidentInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddIncidentCheckListTaskList(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentCheckListTaskID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentCheckListTaskList", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentCheckListTaskID);
        }
    
        public virtual int AddIncidentImpact(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentImpact", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddIncidentImpactType(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentImpactTypeID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentImpactType", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentImpactTypeID);
        }
    
        public virtual int AddIncidentStatus(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentStatusID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentStatus", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentStatusID);
        }
    
        public virtual int AddIncidentType(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_IncidentTypeID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIncidentType", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_IncidentTypeID);
        }
    
        public virtual int AddInspection(Nullable<int> p_ContractID, Nullable<short> p_CategoryID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInspection", p_ContractIDParameter, p_CategoryIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddInspectionScheduler(Nullable<int> p_ContractID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_ScheduleStartDate, Nullable<System.DateTime> p_ScheduleEndDate, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ScheduleStartDateParameter = p_ScheduleStartDate.HasValue ?
                new ObjectParameter("p_ScheduleStartDate", p_ScheduleStartDate) :
                new ObjectParameter("p_ScheduleStartDate", typeof(System.DateTime));
    
            var p_ScheduleEndDateParameter = p_ScheduleEndDate.HasValue ?
                new ObjectParameter("p_ScheduleEndDate", p_ScheduleEndDate) :
                new ObjectParameter("p_ScheduleEndDate", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInspectionScheduler", p_ContractIDParameter, p_LocationIDParameter, p_ScheduleStartDateParameter, p_ScheduleEndDateParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddLocation(string p_LocationName, Nullable<int> p_ParentLocationID, Nullable<bool> p_HasCustomers, Nullable<double> p_Longitude, Nullable<double> p_Latitude, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_LocationID)
        {
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ParentLocationIDParameter = p_ParentLocationID.HasValue ?
                new ObjectParameter("p_ParentLocationID", p_ParentLocationID) :
                new ObjectParameter("p_ParentLocationID", typeof(int));
    
            var p_HasCustomersParameter = p_HasCustomers.HasValue ?
                new ObjectParameter("p_HasCustomers", p_HasCustomers) :
                new ObjectParameter("p_HasCustomers", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLocation", p_LocationNameParameter, p_ParentLocationIDParameter, p_HasCustomersParameter, p_LongitudeParameter, p_LatitudeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_LocationID);
        }
    
        public virtual int AddMailLog(string p_MailType, Nullable<System.DateTime> p_CreatedDate, Nullable<bool> p_IsMailFromFrontEnd, string p_FromMailID, string p_RecipientMailList, string p_CCMailList, string p_BCCMailList, string p_MailSubject, string p_Body, Nullable<int> p_UserID, Nullable<int> p_UserRoleID, Nullable<int> p_ScreenID, string p_AccessPoint, ObjectParameter p_MailID)
        {
            var p_MailTypeParameter = p_MailType != null ?
                new ObjectParameter("p_MailType", p_MailType) :
                new ObjectParameter("p_MailType", typeof(string));
    
            var p_CreatedDateParameter = p_CreatedDate.HasValue ?
                new ObjectParameter("p_CreatedDate", p_CreatedDate) :
                new ObjectParameter("p_CreatedDate", typeof(System.DateTime));
    
            var p_IsMailFromFrontEndParameter = p_IsMailFromFrontEnd.HasValue ?
                new ObjectParameter("p_IsMailFromFrontEnd", p_IsMailFromFrontEnd) :
                new ObjectParameter("p_IsMailFromFrontEnd", typeof(bool));
    
            var p_FromMailIDParameter = p_FromMailID != null ?
                new ObjectParameter("p_FromMailID", p_FromMailID) :
                new ObjectParameter("p_FromMailID", typeof(string));
    
            var p_RecipientMailListParameter = p_RecipientMailList != null ?
                new ObjectParameter("p_RecipientMailList", p_RecipientMailList) :
                new ObjectParameter("p_RecipientMailList", typeof(string));
    
            var p_CCMailListParameter = p_CCMailList != null ?
                new ObjectParameter("p_CCMailList", p_CCMailList) :
                new ObjectParameter("p_CCMailList", typeof(string));
    
            var p_BCCMailListParameter = p_BCCMailList != null ?
                new ObjectParameter("p_BCCMailList", p_BCCMailList) :
                new ObjectParameter("p_BCCMailList", typeof(string));
    
            var p_MailSubjectParameter = p_MailSubject != null ?
                new ObjectParameter("p_MailSubject", p_MailSubject) :
                new ObjectParameter("p_MailSubject", typeof(string));
    
            var p_BodyParameter = p_Body != null ?
                new ObjectParameter("p_Body", p_Body) :
                new ObjectParameter("p_Body", typeof(string));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(int));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMailLog", p_MailTypeParameter, p_CreatedDateParameter, p_IsMailFromFrontEndParameter, p_FromMailIDParameter, p_RecipientMailListParameter, p_CCMailListParameter, p_BCCMailListParameter, p_MailSubjectParameter, p_BodyParameter, p_UserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_MailID);
        }
    
        public virtual int AddNotInUseReason(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_NotInUseReasonID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNotInUseReason", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_NotInUseReasonID);
        }
    
        public virtual int AddObject(Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_ObjectID)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddObject", p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_ObjectID);
        }
    
        public virtual int AddObjectInstanceCheckListTaskDeviation(Nullable<int> p_InspectionID, Nullable<int> p_LocationID, Nullable<int> p_ObjectInstanceID, Nullable<long> p_ObjectInstanceInspectionID, Nullable<bool> p_IsMobileDeviceUsed, Nullable<bool> p_IsObjectLocatedWithQRCode, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<System.DateTime> p_InspectionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectInstanceInspectionIDParameter = p_ObjectInstanceInspectionID.HasValue ?
                new ObjectParameter("p_ObjectInstanceInspectionID", p_ObjectInstanceInspectionID) :
                new ObjectParameter("p_ObjectInstanceInspectionID", typeof(long));
    
            var p_IsMobileDeviceUsedParameter = p_IsMobileDeviceUsed.HasValue ?
                new ObjectParameter("p_IsMobileDeviceUsed", p_IsMobileDeviceUsed) :
                new ObjectParameter("p_IsMobileDeviceUsed", typeof(bool));
    
            var p_IsObjectLocatedWithQRCodeParameter = p_IsObjectLocatedWithQRCode.HasValue ?
                new ObjectParameter("p_IsObjectLocatedWithQRCode", p_IsObjectLocatedWithQRCode) :
                new ObjectParameter("p_IsObjectLocatedWithQRCode", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_InspectionDateTimeParameter = p_InspectionDateTime.HasValue ?
                new ObjectParameter("p_InspectionDateTime", p_InspectionDateTime) :
                new ObjectParameter("p_InspectionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddObjectInstanceCheckListTaskDeviation", p_InspectionIDParameter, p_LocationIDParameter, p_ObjectInstanceIDParameter, p_ObjectInstanceInspectionIDParameter, p_IsMobileDeviceUsedParameter, p_IsObjectLocatedWithQRCodeParameter, p_LongitudeParameter, p_LatitudeParameter, p_InspectionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddObjectInstanceCheckListTaskDeviationMobile(Nullable<int> p_InspectionID, Nullable<int> p_LocationID, Nullable<int> p_ObjectInstanceID, Nullable<bool> p_IsMobileDeviceUsed, Nullable<bool> p_IsObjectLocatedWithQRCode, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<System.DateTime> p_InspectionDateTime, string p_DeviceType, string p_DeviceID, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_IsMobileDeviceUsedParameter = p_IsMobileDeviceUsed.HasValue ?
                new ObjectParameter("p_IsMobileDeviceUsed", p_IsMobileDeviceUsed) :
                new ObjectParameter("p_IsMobileDeviceUsed", typeof(bool));
    
            var p_IsObjectLocatedWithQRCodeParameter = p_IsObjectLocatedWithQRCode.HasValue ?
                new ObjectParameter("p_IsObjectLocatedWithQRCode", p_IsObjectLocatedWithQRCode) :
                new ObjectParameter("p_IsObjectLocatedWithQRCode", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_InspectionDateTimeParameter = p_InspectionDateTime.HasValue ?
                new ObjectParameter("p_InspectionDateTime", p_InspectionDateTime) :
                new ObjectParameter("p_InspectionDateTime", typeof(System.DateTime));
    
            var p_DeviceTypeParameter = p_DeviceType != null ?
                new ObjectParameter("p_DeviceType", p_DeviceType) :
                new ObjectParameter("p_DeviceType", typeof(string));
    
            var p_DeviceIDParameter = p_DeviceID != null ?
                new ObjectParameter("p_DeviceID", p_DeviceID) :
                new ObjectParameter("p_DeviceID", typeof(string));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddObjectInstanceCheckListTaskDeviationMobile", p_InspectionIDParameter, p_LocationIDParameter, p_ObjectInstanceIDParameter, p_IsMobileDeviceUsedParameter, p_IsObjectLocatedWithQRCodeParameter, p_LongitudeParameter, p_LatitudeParameter, p_InspectionDateTimeParameter, p_DeviceTypeParameter, p_DeviceIDParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddObjectInstanceList(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddObjectInstanceList", p_CustomerIDParameter, p_LocationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddObjectInstanceMake(string p_MakeName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MakeNameParameter = p_MakeName != null ?
                new ObjectParameter("p_MakeName", p_MakeName) :
                new ObjectParameter("p_MakeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddObjectInstanceMake", p_MakeNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddRepairComponent(Nullable<short> p_UOMID, Nullable<bool> p_IsResidentOnDevice, string p_SourceRefID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_RepairComponentID)
        {
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_IsResidentOnDeviceParameter = p_IsResidentOnDevice.HasValue ?
                new ObjectParameter("p_IsResidentOnDevice", p_IsResidentOnDevice) :
                new ObjectParameter("p_IsResidentOnDevice", typeof(bool));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRepairComponent", p_UOMIDParameter, p_IsResidentOnDeviceParameter, p_SourceRefIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_RepairComponentID);
        }
    
        public virtual int AddRepeatTraining(Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRepeatTraining", p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddSquad(string p_Squadcode, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_SquadcodeParameter = p_Squadcode != null ?
                new ObjectParameter("p_Squadcode", p_Squadcode) :
                new ObjectParameter("p_Squadcode", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSquad", p_SquadcodeParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddTraining(Nullable<short> p_CourseID, Nullable<System.DateTime> p_EffectiveFromDateTime, Nullable<System.DateTime> p_EffectiveTillDateTime, Nullable<int> p_CreatedBy, string p_Remarks, Nullable<short> p_CertificationID, Nullable<bool> p_IsExternalTraining, string p_TrainingLocation, string p_SourceRefID, Nullable<bool> p_EnrolmentRequired, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_TrainingID)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_EffectiveFromDateTimeParameter = p_EffectiveFromDateTime.HasValue ?
                new ObjectParameter("p_EffectiveFromDateTime", p_EffectiveFromDateTime) :
                new ObjectParameter("p_EffectiveFromDateTime", typeof(System.DateTime));
    
            var p_EffectiveTillDateTimeParameter = p_EffectiveTillDateTime.HasValue ?
                new ObjectParameter("p_EffectiveTillDateTime", p_EffectiveTillDateTime) :
                new ObjectParameter("p_EffectiveTillDateTime", typeof(System.DateTime));
    
            var p_CreatedByParameter = p_CreatedBy.HasValue ?
                new ObjectParameter("p_CreatedBy", p_CreatedBy) :
                new ObjectParameter("p_CreatedBy", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CertificationIDParameter = p_CertificationID.HasValue ?
                new ObjectParameter("p_CertificationID", p_CertificationID) :
                new ObjectParameter("p_CertificationID", typeof(short));
    
            var p_IsExternalTrainingParameter = p_IsExternalTraining.HasValue ?
                new ObjectParameter("p_IsExternalTraining", p_IsExternalTraining) :
                new ObjectParameter("p_IsExternalTraining", typeof(bool));
    
            var p_TrainingLocationParameter = p_TrainingLocation != null ?
                new ObjectParameter("p_TrainingLocation", p_TrainingLocation) :
                new ObjectParameter("p_TrainingLocation", typeof(string));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_EnrolmentRequiredParameter = p_EnrolmentRequired.HasValue ?
                new ObjectParameter("p_EnrolmentRequired", p_EnrolmentRequired) :
                new ObjectParameter("p_EnrolmentRequired", typeof(bool));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTraining", p_CourseIDParameter, p_EffectiveFromDateTimeParameter, p_EffectiveTillDateTimeParameter, p_CreatedByParameter, p_RemarksParameter, p_CertificationIDParameter, p_IsExternalTrainingParameter, p_TrainingLocationParameter, p_SourceRefIDParameter, p_EnrolmentRequiredParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_TrainingID);
        }
    
        public virtual int AddUOM(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_UOMID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUOM", p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_UOMID);
        }
    
        public virtual int AddUpdateCourseDocument(Nullable<short> p_CourseID, Nullable<int> p_DocumentID, string p_CourseLink, Nullable<int> p_Document, Nullable<int> p_ExternalLink, string p_Title, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_DocumentIDParameter = p_DocumentID.HasValue ?
                new ObjectParameter("p_DocumentID", p_DocumentID) :
                new ObjectParameter("p_DocumentID", typeof(int));
    
            var p_CourseLinkParameter = p_CourseLink != null ?
                new ObjectParameter("p_CourseLink", p_CourseLink) :
                new ObjectParameter("p_CourseLink", typeof(string));
    
            var p_DocumentParameter = p_Document.HasValue ?
                new ObjectParameter("p_Document", p_Document) :
                new ObjectParameter("p_Document", typeof(int));
    
            var p_ExternalLinkParameter = p_ExternalLink.HasValue ?
                new ObjectParameter("p_ExternalLink", p_ExternalLink) :
                new ObjectParameter("p_ExternalLink", typeof(int));
    
            var p_TitleParameter = p_Title != null ?
                new ObjectParameter("p_Title", p_Title) :
                new ObjectParameter("p_Title", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateCourseDocument", p_CourseIDParameter, p_DocumentIDParameter, p_CourseLinkParameter, p_DocumentParameter, p_ExternalLinkParameter, p_TitleParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateDeviationTypeDepartment(Nullable<short> p_DeviationTypeID, string p_ServiceLineCode, Nullable<bool> p_HasLocation, Nullable<short> p_CategoryID, Nullable<short> p_DeviationGroupID, string p_LanguageCode, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_HasLocationParameter = p_HasLocation.HasValue ?
                new ObjectParameter("p_HasLocation", p_HasLocation) :
                new ObjectParameter("p_HasLocation", typeof(bool));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DeviationGroupIDParameter = p_DeviationGroupID.HasValue ?
                new ObjectParameter("p_DeviationGroupID", p_DeviationGroupID) :
                new ObjectParameter("p_DeviationGroupID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateDeviationTypeDepartment", p_DeviationTypeIDParameter, p_ServiceLineCodeParameter, p_HasLocationParameter, p_CategoryIDParameter, p_DeviationGroupIDParameter, p_LanguageCodeParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateDocumentMapping(Nullable<int> p_EntityID, string p_EntityType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EntityIDParameter = p_EntityID.HasValue ?
                new ObjectParameter("p_EntityID", p_EntityID) :
                new ObjectParameter("p_EntityID", typeof(int));
    
            var p_EntityTypeParameter = p_EntityType != null ?
                new ObjectParameter("p_EntityType", p_EntityType) :
                new ObjectParameter("p_EntityType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateDocumentMapping", p_EntityIDParameter, p_EntityTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<AddUpdateObjectDataFile_Result> AddUpdateObjectDataFile(Nullable<int> p_LocationID, string pObjectType, Nullable<int> pObjectInstanceID, string pFileName, string pFileType, Nullable<int> pFileSize, string pFileRemarks, ObjectParameter pFileID, ObjectParameter pFileRelativePath)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var pObjectTypeParameter = pObjectType != null ?
                new ObjectParameter("pObjectType", pObjectType) :
                new ObjectParameter("pObjectType", typeof(string));
    
            var pObjectInstanceIDParameter = pObjectInstanceID.HasValue ?
                new ObjectParameter("pObjectInstanceID", pObjectInstanceID) :
                new ObjectParameter("pObjectInstanceID", typeof(int));
    
            var pFileNameParameter = pFileName != null ?
                new ObjectParameter("pFileName", pFileName) :
                new ObjectParameter("pFileName", typeof(string));
    
            var pFileTypeParameter = pFileType != null ?
                new ObjectParameter("pFileType", pFileType) :
                new ObjectParameter("pFileType", typeof(string));
    
            var pFileSizeParameter = pFileSize.HasValue ?
                new ObjectParameter("pFileSize", pFileSize) :
                new ObjectParameter("pFileSize", typeof(int));
    
            var pFileRemarksParameter = pFileRemarks != null ?
                new ObjectParameter("pFileRemarks", pFileRemarks) :
                new ObjectParameter("pFileRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUpdateObjectDataFile_Result>("AddUpdateObjectDataFile", p_LocationIDParameter, pObjectTypeParameter, pObjectInstanceIDParameter, pFileNameParameter, pFileTypeParameter, pFileSizeParameter, pFileRemarksParameter, pFileID, pFileRelativePath);
        }
    
        public virtual int AddUpdateObjectReplacement(string p_OICondition, Nullable<int> p_SearchLocationID, Nullable<int> p_ObjectInstanceID, Nullable<short> p_CustomerID, string p_LocationName, Nullable<short> p_ObjectID, Nullable<int> p_LocationID, string p_QRCode, string p_SerialNumber, Nullable<short> p_ObjectSequence, string p_Make, string p_Remarks, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<System.DateTime> p_WarrantyEndDate, Nullable<System.DateTime> p_EffectiveFromDate, Nullable<System.DateTime> p_EffectiveTillDate, Nullable<System.DateTime> p_AMCStartDate, Nullable<System.DateTime> p_AMCEndDate, Nullable<short> p_NotInUseReasonID, string p_SourceRefID, Nullable<int> p_OldObjectInstanceID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_OIConditionParameter = p_OICondition != null ?
                new ObjectParameter("p_OICondition", p_OICondition) :
                new ObjectParameter("p_OICondition", typeof(string));
    
            var p_SearchLocationIDParameter = p_SearchLocationID.HasValue ?
                new ObjectParameter("p_SearchLocationID", p_SearchLocationID) :
                new ObjectParameter("p_SearchLocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_QRCodeParameter = p_QRCode != null ?
                new ObjectParameter("p_QRCode", p_QRCode) :
                new ObjectParameter("p_QRCode", typeof(string));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("p_SerialNumber", p_SerialNumber) :
                new ObjectParameter("p_SerialNumber", typeof(string));
    
            var p_ObjectSequenceParameter = p_ObjectSequence.HasValue ?
                new ObjectParameter("p_ObjectSequence", p_ObjectSequence) :
                new ObjectParameter("p_ObjectSequence", typeof(short));
    
            var p_MakeParameter = p_Make != null ?
                new ObjectParameter("p_Make", p_Make) :
                new ObjectParameter("p_Make", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_WarrantyEndDateParameter = p_WarrantyEndDate.HasValue ?
                new ObjectParameter("p_WarrantyEndDate", p_WarrantyEndDate) :
                new ObjectParameter("p_WarrantyEndDate", typeof(System.DateTime));
    
            var p_EffectiveFromDateParameter = p_EffectiveFromDate.HasValue ?
                new ObjectParameter("p_EffectiveFromDate", p_EffectiveFromDate) :
                new ObjectParameter("p_EffectiveFromDate", typeof(System.DateTime));
    
            var p_EffectiveTillDateParameter = p_EffectiveTillDate.HasValue ?
                new ObjectParameter("p_EffectiveTillDate", p_EffectiveTillDate) :
                new ObjectParameter("p_EffectiveTillDate", typeof(System.DateTime));
    
            var p_AMCStartDateParameter = p_AMCStartDate.HasValue ?
                new ObjectParameter("p_AMCStartDate", p_AMCStartDate) :
                new ObjectParameter("p_AMCStartDate", typeof(System.DateTime));
    
            var p_AMCEndDateParameter = p_AMCEndDate.HasValue ?
                new ObjectParameter("p_AMCEndDate", p_AMCEndDate) :
                new ObjectParameter("p_AMCEndDate", typeof(System.DateTime));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_OldObjectInstanceIDParameter = p_OldObjectInstanceID.HasValue ?
                new ObjectParameter("p_OldObjectInstanceID", p_OldObjectInstanceID) :
                new ObjectParameter("p_OldObjectInstanceID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateObjectReplacement", p_OIConditionParameter, p_SearchLocationIDParameter, p_ObjectInstanceIDParameter, p_CustomerIDParameter, p_LocationNameParameter, p_ObjectIDParameter, p_LocationIDParameter, p_QRCodeParameter, p_SerialNumberParameter, p_ObjectSequenceParameter, p_MakeParameter, p_RemarksParameter, p_LongitudeParameter, p_LatitudeParameter, p_WarrantyEndDateParameter, p_EffectiveFromDateParameter, p_EffectiveTillDateParameter, p_AMCStartDateParameter, p_AMCEndDateParameter, p_NotInUseReasonIDParameter, p_SourceRefIDParameter, p_OldObjectInstanceIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateTraineeAttendance(Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateTraineeAttendance", p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateTrainersData(Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateTrainersData", p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateTrainingAssessmentTraineeAndTrainerwise(Nullable<int> p_TraineeID, string p_TraineeEmail, Nullable<int> p_TrainerID, string p_TrainerName, Nullable<int> p_TrainingID, Nullable<int> p_Score, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_TraineeEmailParameter = p_TraineeEmail != null ?
                new ObjectParameter("p_TraineeEmail", p_TraineeEmail) :
                new ObjectParameter("p_TraineeEmail", typeof(string));
    
            var p_TrainerIDParameter = p_TrainerID.HasValue ?
                new ObjectParameter("p_TrainerID", p_TrainerID) :
                new ObjectParameter("p_TrainerID", typeof(int));
    
            var p_TrainerNameParameter = p_TrainerName != null ?
                new ObjectParameter("p_TrainerName", p_TrainerName) :
                new ObjectParameter("p_TrainerName", typeof(string));
    
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_ScoreParameter = p_Score.HasValue ?
                new ObjectParameter("p_Score", p_Score) :
                new ObjectParameter("p_Score", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateTrainingAssessmentTraineeAndTrainerwise", p_TraineeIDParameter, p_TraineeEmailParameter, p_TrainerIDParameter, p_TrainerNameParameter, p_TrainingIDParameter, p_ScoreParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateTrainingEnrolment(Nullable<int> p_TrainingID, Nullable<bool> p_EnrolmentwithAttendance, Nullable<System.DateTime> p_EnrolmentDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_EnrolmentwithAttendanceParameter = p_EnrolmentwithAttendance.HasValue ?
                new ObjectParameter("p_EnrolmentwithAttendance", p_EnrolmentwithAttendance) :
                new ObjectParameter("p_EnrolmentwithAttendance", typeof(bool));
    
            var p_EnrolmentDateTimeParameter = p_EnrolmentDateTime.HasValue ?
                new ObjectParameter("p_EnrolmentDateTime", p_EnrolmentDateTime) :
                new ObjectParameter("p_EnrolmentDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateTrainingEnrolment", p_TrainingIDParameter, p_EnrolmentwithAttendanceParameter, p_EnrolmentDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateTrainingEnrolmentNotRequired(Nullable<int> p_TrainingID, Nullable<short> p_AttendanceCount, Nullable<int> p_EvidenceDocument, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_AttendanceCountParameter = p_AttendanceCount.HasValue ?
                new ObjectParameter("p_AttendanceCount", p_AttendanceCount) :
                new ObjectParameter("p_AttendanceCount", typeof(short));
    
            var p_EvidenceDocumentParameter = p_EvidenceDocument.HasValue ?
                new ObjectParameter("p_EvidenceDocument", p_EvidenceDocument) :
                new ObjectParameter("p_EvidenceDocument", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateTrainingEnrolmentNotRequired", p_TrainingIDParameter, p_AttendanceCountParameter, p_EvidenceDocumentParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateTrainingFeedbackDataTraineewise(Nullable<int> p_TrainingID, string p_TraineeEmail, Nullable<int> p_TraineeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_TraineeEmailParameter = p_TraineeEmail != null ?
                new ObjectParameter("p_TraineeEmail", p_TraineeEmail) :
                new ObjectParameter("p_TraineeEmail", typeof(string));
    
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateTrainingFeedbackDataTraineewise", p_TrainingIDParameter, p_TraineeEmailParameter, p_TraineeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddUpdateUserLocation(Nullable<int> p_EndUserID, Nullable<int> p_CustomerID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_CurrentAccessPoint)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_CurrentAccessPointParameter = p_CurrentAccessPoint != null ?
                new ObjectParameter("p_CurrentAccessPoint", p_CurrentAccessPoint) :
                new ObjectParameter("p_CurrentAccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUserLocation", p_EndUserIDParameter, p_CustomerIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_CurrentAccessPointParameter);
        }
    
        public virtual int AddUserRole(string p_UserRoleName, Nullable<int> p_UserID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_UserRoleID)
        {
            var p_UserRoleNameParameter = p_UserRoleName != null ?
                new ObjectParameter("p_UserRoleName", p_UserRoleName) :
                new ObjectParameter("p_UserRoleName", typeof(string));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserRole", p_UserRoleNameParameter, p_UserIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_UserRoleID);
        }
    
        public virtual int AddUserRoleScreen(string p_ModuleCode, string p_MenuCode, Nullable<int> p_UserRoleID, Nullable<int> p_UserID, Nullable<int> p_CurrentUserRoleID, string p_AccessPoint, Nullable<short> p_ScreenID)
        {
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_MenuCodeParameter = p_MenuCode != null ?
                new ObjectParameter("p_MenuCode", p_MenuCode) :
                new ObjectParameter("p_MenuCode", typeof(string));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserRoleScreen", p_ModuleCodeParameter, p_MenuCodeParameter, p_UserRoleIDParameter, p_UserIDParameter, p_CurrentUserRoleIDParameter, p_AccessPointParameter, p_ScreenIDParameter);
        }
    
        public virtual int AddWorkCheckListTask(Nullable<short> p_WorkCheckListID, Nullable<System.DateTime> p_WorkInspectionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkCheckListIDParameter = p_WorkCheckListID.HasValue ?
                new ObjectParameter("p_WorkCheckListID", p_WorkCheckListID) :
                new ObjectParameter("p_WorkCheckListID", typeof(short));
    
            var p_WorkInspectionDateTimeParameter = p_WorkInspectionDateTime.HasValue ?
                new ObjectParameter("p_WorkInspectionDateTime", p_WorkInspectionDateTime) :
                new ObjectParameter("p_WorkInspectionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWorkCheckListTask", p_WorkCheckListIDParameter, p_WorkInspectionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddWorkingShift(string p_Shiftcode, Nullable<System.TimeSpan> p_StartTime, Nullable<System.TimeSpan> p_EndTime, string p_Remarks, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_ShiftcodeParameter = p_Shiftcode != null ?
                new ObjectParameter("p_Shiftcode", p_Shiftcode) :
                new ObjectParameter("p_Shiftcode", typeof(string));
    
            var p_StartTimeParameter = p_StartTime.HasValue ?
                new ObjectParameter("p_StartTime", p_StartTime) :
                new ObjectParameter("p_StartTime", typeof(System.TimeSpan));
    
            var p_EndTimeParameter = p_EndTime.HasValue ?
                new ObjectParameter("p_EndTime", p_EndTime) :
                new ObjectParameter("p_EndTime", typeof(System.TimeSpan));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWorkingShift", p_ShiftcodeParameter, p_StartTimeParameter, p_EndTimeParameter, p_RemarksParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int AddWorkPermit(Nullable<short> p_WorkPermitTypeID, string p_WPTitle, Nullable<System.DateTime> p_WPRecordedDateTime, Nullable<int> p_WPRecordedBy, string p_RequesterName, string p_RequesterCompany, string p_RequesterMobile, string p_RequesterEmail, Nullable<int> p_Location, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<System.TimeSpan> p_WorkFrom, Nullable<System.TimeSpan> p_WorkTill, Nullable<short> p_PeopleCount, string p_SupervisorName, string p_HelperName, string p_Remarks, string p_SafetyEquipment, string p_ApprovalRemarks, Nullable<int> p_ApprovedBy, Nullable<System.DateTime> p_ApprovedDatetime, string p_CancellationRemarks, Nullable<int> p_CancelledBy, Nullable<System.DateTime> p_CancellationDatetime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_WorkPermitID)
        {
            var p_WorkPermitTypeIDParameter = p_WorkPermitTypeID.HasValue ?
                new ObjectParameter("p_WorkPermitTypeID", p_WorkPermitTypeID) :
                new ObjectParameter("p_WorkPermitTypeID", typeof(short));
    
            var p_WPTitleParameter = p_WPTitle != null ?
                new ObjectParameter("p_WPTitle", p_WPTitle) :
                new ObjectParameter("p_WPTitle", typeof(string));
    
            var p_WPRecordedDateTimeParameter = p_WPRecordedDateTime.HasValue ?
                new ObjectParameter("p_WPRecordedDateTime", p_WPRecordedDateTime) :
                new ObjectParameter("p_WPRecordedDateTime", typeof(System.DateTime));
    
            var p_WPRecordedByParameter = p_WPRecordedBy.HasValue ?
                new ObjectParameter("p_WPRecordedBy", p_WPRecordedBy) :
                new ObjectParameter("p_WPRecordedBy", typeof(int));
    
            var p_RequesterNameParameter = p_RequesterName != null ?
                new ObjectParameter("p_RequesterName", p_RequesterName) :
                new ObjectParameter("p_RequesterName", typeof(string));
    
            var p_RequesterCompanyParameter = p_RequesterCompany != null ?
                new ObjectParameter("p_RequesterCompany", p_RequesterCompany) :
                new ObjectParameter("p_RequesterCompany", typeof(string));
    
            var p_RequesterMobileParameter = p_RequesterMobile != null ?
                new ObjectParameter("p_RequesterMobile", p_RequesterMobile) :
                new ObjectParameter("p_RequesterMobile", typeof(string));
    
            var p_RequesterEmailParameter = p_RequesterEmail != null ?
                new ObjectParameter("p_RequesterEmail", p_RequesterEmail) :
                new ObjectParameter("p_RequesterEmail", typeof(string));
    
            var p_LocationParameter = p_Location.HasValue ?
                new ObjectParameter("p_Location", p_Location) :
                new ObjectParameter("p_Location", typeof(int));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_WorkFromParameter = p_WorkFrom.HasValue ?
                new ObjectParameter("p_WorkFrom", p_WorkFrom) :
                new ObjectParameter("p_WorkFrom", typeof(System.TimeSpan));
    
            var p_WorkTillParameter = p_WorkTill.HasValue ?
                new ObjectParameter("p_WorkTill", p_WorkTill) :
                new ObjectParameter("p_WorkTill", typeof(System.TimeSpan));
    
            var p_PeopleCountParameter = p_PeopleCount.HasValue ?
                new ObjectParameter("p_PeopleCount", p_PeopleCount) :
                new ObjectParameter("p_PeopleCount", typeof(short));
    
            var p_SupervisorNameParameter = p_SupervisorName != null ?
                new ObjectParameter("p_SupervisorName", p_SupervisorName) :
                new ObjectParameter("p_SupervisorName", typeof(string));
    
            var p_HelperNameParameter = p_HelperName != null ?
                new ObjectParameter("p_HelperName", p_HelperName) :
                new ObjectParameter("p_HelperName", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_SafetyEquipmentParameter = p_SafetyEquipment != null ?
                new ObjectParameter("p_SafetyEquipment", p_SafetyEquipment) :
                new ObjectParameter("p_SafetyEquipment", typeof(string));
    
            var p_ApprovalRemarksParameter = p_ApprovalRemarks != null ?
                new ObjectParameter("p_ApprovalRemarks", p_ApprovalRemarks) :
                new ObjectParameter("p_ApprovalRemarks", typeof(string));
    
            var p_ApprovedByParameter = p_ApprovedBy.HasValue ?
                new ObjectParameter("p_ApprovedBy", p_ApprovedBy) :
                new ObjectParameter("p_ApprovedBy", typeof(int));
    
            var p_ApprovedDatetimeParameter = p_ApprovedDatetime.HasValue ?
                new ObjectParameter("p_ApprovedDatetime", p_ApprovedDatetime) :
                new ObjectParameter("p_ApprovedDatetime", typeof(System.DateTime));
    
            var p_CancellationRemarksParameter = p_CancellationRemarks != null ?
                new ObjectParameter("p_CancellationRemarks", p_CancellationRemarks) :
                new ObjectParameter("p_CancellationRemarks", typeof(string));
    
            var p_CancelledByParameter = p_CancelledBy.HasValue ?
                new ObjectParameter("p_CancelledBy", p_CancelledBy) :
                new ObjectParameter("p_CancelledBy", typeof(int));
    
            var p_CancellationDatetimeParameter = p_CancellationDatetime.HasValue ?
                new ObjectParameter("p_CancellationDatetime", p_CancellationDatetime) :
                new ObjectParameter("p_CancellationDatetime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWorkPermit", p_WorkPermitTypeIDParameter, p_WPTitleParameter, p_WPRecordedDateTimeParameter, p_WPRecordedByParameter, p_RequesterNameParameter, p_RequesterCompanyParameter, p_RequesterMobileParameter, p_RequesterEmailParameter, p_LocationParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_WorkFromParameter, p_WorkTillParameter, p_PeopleCountParameter, p_SupervisorNameParameter, p_HelperNameParameter, p_RemarksParameter, p_SafetyEquipmentParameter, p_ApprovalRemarksParameter, p_ApprovedByParameter, p_ApprovedDatetimeParameter, p_CancellationRemarksParameter, p_CancelledByParameter, p_CancellationDatetimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_WorkPermitID);
        }
    
        public virtual int AddWorkPermitType(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_WorkPermitTypeID)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWorkPermitType", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_WorkPermitTypeID);
        }
    
        public virtual int ChangePassword(Nullable<int> p_EndUserID, string p_OldPassword, string p_NewPassword)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_OldPasswordParameter = p_OldPassword != null ?
                new ObjectParameter("p_OldPassword", p_OldPassword) :
                new ObjectParameter("p_OldPassword", typeof(string));
    
            var p_NewPasswordParameter = p_NewPassword != null ?
                new ObjectParameter("p_NewPassword", p_NewPassword) :
                new ObjectParameter("p_NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePassword", p_EndUserIDParameter, p_OldPasswordParameter, p_NewPasswordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckForgotPasswordURL(Nullable<int> p_EndUserID)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckForgotPasswordURL", p_EndUserIDParameter);
        }
    
        public virtual int CopyCheckListTask(Nullable<short> p_CategoryID, string p_InspectionType, string p_Frequency, Nullable<byte> p_ExecutionDuration, string p_ExecutionUnit, Nullable<byte> p_ServiceLevelID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_CheckListID)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ExecutionDurationParameter = p_ExecutionDuration.HasValue ?
                new ObjectParameter("p_ExecutionDuration", p_ExecutionDuration) :
                new ObjectParameter("p_ExecutionDuration", typeof(byte));
    
            var p_ExecutionUnitParameter = p_ExecutionUnit != null ?
                new ObjectParameter("p_ExecutionUnit", p_ExecutionUnit) :
                new ObjectParameter("p_ExecutionUnit", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyCheckListTask", p_CategoryIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_ExecutionDurationParameter, p_ExecutionUnitParameter, p_ServiceLevelIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_CheckListID);
        }
    
        public virtual ObjectResult<CustomerModuleName_Result> CustomerModuleName(Nullable<int> customerID, string p_LanguageCode)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerModuleName_Result>("CustomerModuleName", customerIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual int DeleteAssessmentParameter(Nullable<int> p_AssessmentParameterID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_AssessmentParameterIDParameter = p_AssessmentParameterID.HasValue ?
                new ObjectParameter("p_AssessmentParameterID", p_AssessmentParameterID) :
                new ObjectParameter("p_AssessmentParameterID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAssessmentParameter", p_AssessmentParameterIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCategory(Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategory", p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCertification(Nullable<short> p_CertificationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CertificationIDParameter = p_CertificationID.HasValue ?
                new ObjectParameter("p_CertificationID", p_CertificationID) :
                new ObjectParameter("p_CertificationID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCertification", p_CertificationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCheckList(Nullable<short> p_CheckListID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCheckList", p_CheckListIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCheckListTask(Nullable<int> p_CheckListTaskID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListTaskIDParameter = p_CheckListTaskID.HasValue ?
                new ObjectParameter("p_CheckListTaskID", p_CheckListTaskID) :
                new ObjectParameter("p_CheckListTaskID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCheckListTask", p_CheckListTaskIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteChecklistTaskGroup(Nullable<short> p_ChecklistTaskGroupID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ChecklistTaskGroupIDParameter = p_ChecklistTaskGroupID.HasValue ?
                new ObjectParameter("p_ChecklistTaskGroupID", p_ChecklistTaskGroupID) :
                new ObjectParameter("p_ChecklistTaskGroupID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteChecklistTaskGroup", p_ChecklistTaskGroupIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<DeleteContract_Result> DeleteContract(Nullable<int> p_ContractID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteContract_Result>("DeleteContract", p_ContractIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteControllerSpecializationEndUser(Nullable<int> p_ControllerID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_CurrentAccessPoint)
        {
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_CurrentAccessPointParameter = p_CurrentAccessPoint != null ?
                new ObjectParameter("p_CurrentAccessPoint", p_CurrentAccessPoint) :
                new ObjectParameter("p_CurrentAccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteControllerSpecializationEndUser", p_ControllerIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_CurrentAccessPointParameter);
        }
    
        public virtual int DeleteControllerTagging(Nullable<int> p_ControllerTaggingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ControllerTaggingIDParameter = p_ControllerTaggingID.HasValue ?
                new ObjectParameter("p_ControllerTaggingID", p_ControllerTaggingID) :
                new ObjectParameter("p_ControllerTaggingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteControllerTagging", p_ControllerTaggingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCountryHoliday(string p_CountryCode, Nullable<System.DateTime> p_HolidayDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CountryCodeParameter = p_CountryCode != null ?
                new ObjectParameter("p_CountryCode", p_CountryCode) :
                new ObjectParameter("p_CountryCode", typeof(string));
    
            var p_HolidayDateParameter = p_HolidayDate.HasValue ?
                new ObjectParameter("p_HolidayDate", p_HolidayDate) :
                new ObjectParameter("p_HolidayDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCountryHoliday", p_CountryCodeParameter, p_HolidayDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCourse(Nullable<short> p_CourseID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourse", p_CourseIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCourseDocument(Nullable<int> p_CourseDocumentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseDocumentIDParameter = p_CourseDocumentID.HasValue ?
                new ObjectParameter("p_CourseDocumentID", p_CourseDocumentID) :
                new ObjectParameter("p_CourseDocumentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourseDocument", p_CourseDocumentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCourseType(Nullable<short> p_CourseTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseTypeIDParameter = p_CourseTypeID.HasValue ?
                new ObjectParameter("p_CourseTypeID", p_CourseTypeID) :
                new ObjectParameter("p_CourseTypeID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourseType", p_CourseTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCustomer(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCustomerAddress(Nullable<short> p_CustomerID, string p_AddressType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_AddressTypeParameter = p_AddressType != null ?
                new ObjectParameter("p_AddressType", p_AddressType) :
                new ObjectParameter("p_AddressType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerAddress", p_CustomerIDParameter, p_AddressTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCustomerContact(Nullable<short> p_CustomerID, string p_ContactName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContactNameParameter = p_ContactName != null ?
                new ObjectParameter("p_ContactName", p_ContactName) :
                new ObjectParameter("p_ContactName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerContact", p_CustomerIDParameter, p_ContactNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCustomerLocationHoliday(Nullable<int> p_CustomerLocationID, Nullable<System.DateTime> p_HolidayDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerLocationIDParameter = p_CustomerLocationID.HasValue ?
                new ObjectParameter("p_CustomerLocationID", p_CustomerLocationID) :
                new ObjectParameter("p_CustomerLocationID", typeof(int));
    
            var p_HolidayDateParameter = p_HolidayDate.HasValue ?
                new ObjectParameter("p_HolidayDate", p_HolidayDate) :
                new ObjectParameter("p_HolidayDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerLocationHoliday", p_CustomerLocationIDParameter, p_HolidayDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCustomerLocationRiskLevel(Nullable<int> p_LocationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerLocationRiskLevel", p_LocationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteCustomerWeeklyOff(Nullable<int> p_LocationID, string p_DayName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DayNameParameter = p_DayName != null ?
                new ObjectParameter("p_DayName", p_DayName) :
                new ObjectParameter("p_DayName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerWeeklyOff", p_LocationIDParameter, p_DayNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDepartment(Nullable<short> p_DepartmentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDepartment", p_DepartmentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDesignation(Nullable<short> p_DesignationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDesignation", p_DesignationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDeviationType(Nullable<short> p_DeviationTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDeviationType", p_DeviationTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDeviationTypeResolution(Nullable<int> p_DeviationTypeResolutionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeResolutionIDParameter = p_DeviationTypeResolutionID.HasValue ?
                new ObjectParameter("p_DeviationTypeResolutionID", p_DeviationTypeResolutionID) :
                new ObjectParameter("p_DeviationTypeResolutionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDeviationTypeResolution", p_DeviationTypeResolutionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDocument(Nullable<int> p_DocumentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentIDParameter = p_DocumentID.HasValue ?
                new ObjectParameter("p_DocumentID", p_DocumentID) :
                new ObjectParameter("p_DocumentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDocument", p_DocumentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDocumentCategory(Nullable<short> p_DocumentCategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDocumentCategory", p_DocumentCategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDrill(Nullable<int> p_DrillID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrill", p_DrillIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDrillActionType(Nullable<byte> p_DrillActionTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillActionTypeIDParameter = p_DrillActionTypeID.HasValue ?
                new ObjectParameter("p_DrillActionTypeID", p_DrillActionTypeID) :
                new ObjectParameter("p_DrillActionTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrillActionType", p_DrillActionTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDrillCheckList(Nullable<short> p_DrillChecklistID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillChecklistIDParameter = p_DrillChecklistID.HasValue ?
                new ObjectParameter("p_DrillChecklistID", p_DrillChecklistID) :
                new ObjectParameter("p_DrillChecklistID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrillCheckList", p_DrillChecklistIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDrillCheckListTask(Nullable<int> p_DrillCheckListTaskID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillCheckListTaskIDParameter = p_DrillCheckListTaskID.HasValue ?
                new ObjectParameter("p_DrillCheckListTaskID", p_DrillCheckListTaskID) :
                new ObjectParameter("p_DrillCheckListTaskID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrillCheckListTask", p_DrillCheckListTaskIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDrillStakeholder(Nullable<short> p_DrillStakeholderID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillStakeholderIDParameter = p_DrillStakeholderID.HasValue ?
                new ObjectParameter("p_DrillStakeholderID", p_DrillStakeholderID) :
                new ObjectParameter("p_DrillStakeholderID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrillStakeholder", p_DrillStakeholderIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteDrillType(Nullable<byte> p_DrillTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDrillType", p_DrillTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> p_EmployeeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EmployeeIDParameter = p_EmployeeID.HasValue ?
                new ObjectParameter("p_EmployeeID", p_EmployeeID) :
                new ObjectParameter("p_EmployeeID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", p_EmployeeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteEndUser(Nullable<int> p_EndUserID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_CurrentAccessPoint)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_CurrentAccessPointParameter = p_CurrentAccessPoint != null ?
                new ObjectParameter("p_CurrentAccessPoint", p_CurrentAccessPoint) :
                new ObjectParameter("p_CurrentAccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEndUser", p_EndUserIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_CurrentAccessPointParameter);
        }
    
        public virtual int DeleteFeedbackParameter(Nullable<short> p_FeedbackParameterID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FeedbackParameterIDParameter = p_FeedbackParameterID.HasValue ?
                new ObjectParameter("p_FeedbackParameterID", p_FeedbackParameterID) :
                new ObjectParameter("p_FeedbackParameterID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFeedbackParameter", p_FeedbackParameterIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteFile(Nullable<long> pFileID, byte[] pTxnTimestamp)
        {
            var pFileIDParameter = pFileID.HasValue ?
                new ObjectParameter("pFileID", pFileID) :
                new ObjectParameter("pFileID", typeof(long));
    
            var pTxnTimestampParameter = pTxnTimestamp != null ?
                new ObjectParameter("pTxnTimestamp", pTxnTimestamp) :
                new ObjectParameter("pTxnTimestamp", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFile", pFileIDParameter, pTxnTimestampParameter);
        }
    
        public virtual int DeleteFRASCheckList(Nullable<short> p_FRASChecklistID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASChecklistIDParameter = p_FRASChecklistID.HasValue ?
                new ObjectParameter("p_FRASChecklistID", p_FRASChecklistID) :
                new ObjectParameter("p_FRASChecklistID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFRASCheckList", p_FRASChecklistIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteFRASCheckListTask(Nullable<int> p_FRASCheckListTaskID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASCheckListTaskIDParameter = p_FRASCheckListTaskID.HasValue ?
                new ObjectParameter("p_FRASCheckListTaskID", p_FRASCheckListTaskID) :
                new ObjectParameter("p_FRASCheckListTaskID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFRASCheckListTask", p_FRASCheckListTaskIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteFRASInspection(Nullable<int> p_FRASInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_ENDUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_ENDUserIDParameter = p_ENDUserID.HasValue ?
                new ObjectParameter("p_ENDUserID", p_ENDUserID) :
                new ObjectParameter("p_ENDUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFRASInspection", p_FRASInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_ENDUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncident(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncident", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentCategory(Nullable<short> p_IncidentCategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentCategory", p_IncidentCategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentCauseType(Nullable<byte> p_IncidentCauseTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCauseTypeIDParameter = p_IncidentCauseTypeID.HasValue ?
                new ObjectParameter("p_IncidentCauseTypeID", p_IncidentCauseTypeID) :
                new ObjectParameter("p_IncidentCauseTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentCauseType", p_IncidentCauseTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentCheckList(Nullable<short> p_IncidentChecklistID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentChecklistIDParameter = p_IncidentChecklistID.HasValue ?
                new ObjectParameter("p_IncidentChecklistID", p_IncidentChecklistID) :
                new ObjectParameter("p_IncidentChecklistID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentCheckList", p_IncidentChecklistIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentCheckListTask(Nullable<int> p_IncidentCheckListTaskID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCheckListTaskIDParameter = p_IncidentCheckListTaskID.HasValue ?
                new ObjectParameter("p_IncidentCheckListTaskID", p_IncidentCheckListTaskID) :
                new ObjectParameter("p_IncidentCheckListTaskID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentCheckListTask", p_IncidentCheckListTaskIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentImpactType(Nullable<byte> p_IncidentImpactTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentImpactTypeIDParameter = p_IncidentImpactTypeID.HasValue ?
                new ObjectParameter("p_IncidentImpactTypeID", p_IncidentImpactTypeID) :
                new ObjectParameter("p_IncidentImpactTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentImpactType", p_IncidentImpactTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentStatus(Nullable<byte> p_IncidentStatusID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentStatusIDParameter = p_IncidentStatusID.HasValue ?
                new ObjectParameter("p_IncidentStatusID", p_IncidentStatusID) :
                new ObjectParameter("p_IncidentStatusID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentStatus", p_IncidentStatusIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteIncidentType(Nullable<byte> p_IncidentTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIncidentType", p_IncidentTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteInspectionCheck(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInspectionCheck", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteInspectionMultiple(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInspectionMultiple", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteLocation(Nullable<int> p_LocationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", p_LocationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteNotInUseReason(Nullable<short> p_NotInUseReasonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNotInUseReason", p_NotInUseReasonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteObject(Nullable<short> p_ObjectID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteObject", p_ObjectIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteObjectInstance(Nullable<int> p_ObjectInstanceID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteObjectInstance", p_ObjectInstanceIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteObjectInstanceCheck(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteObjectInstanceCheck", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteObjectInstanceMake(string p_MakeName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MakeNameParameter = p_MakeName != null ?
                new ObjectParameter("p_MakeName", p_MakeName) :
                new ObjectParameter("p_MakeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteObjectInstanceMake", p_MakeNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteObjectInstanceMultiple(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteObjectInstanceMultiple", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteRepairComponent(Nullable<short> p_RepairComponentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_RepairComponentIDParameter = p_RepairComponentID.HasValue ?
                new ObjectParameter("p_RepairComponentID", p_RepairComponentID) :
                new ObjectParameter("p_RepairComponentID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRepairComponent", p_RepairComponentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteSquad(string p_SquadCode, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_SquadCodeParameter = p_SquadCode != null ?
                new ObjectParameter("p_SquadCode", p_SquadCode) :
                new ObjectParameter("p_SquadCode", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSquad", p_SquadCodeParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteTraining(Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTraining", p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteTrainingEnrolment(Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTrainingEnrolment", p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteUOM(Nullable<short> p_UOMID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUOM", p_UOMIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteUserRole(Nullable<short> p_UserRoleID, Nullable<int> p_UserID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(short));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRole", p_UserRoleIDParameter, p_UserIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteWorkingShift(string p_Shiftcode, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_ShiftcodeParameter = p_Shiftcode != null ?
                new ObjectParameter("p_Shiftcode", p_Shiftcode) :
                new ObjectParameter("p_Shiftcode", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteWorkingShift", p_ShiftcodeParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteWorkPermit(Nullable<int> p_WorkPermitID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitIDParameter = p_WorkPermitID.HasValue ?
                new ObjectParameter("p_WorkPermitID", p_WorkPermitID) :
                new ObjectParameter("p_WorkPermitID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteWorkPermit", p_WorkPermitIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int DeleteWorkPermitType(Nullable<short> p_WorkPermitTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitTypeIDParameter = p_WorkPermitTypeID.HasValue ?
                new ObjectParameter("p_WorkPermitTypeID", p_WorkPermitTypeID) :
                new ObjectParameter("p_WorkPermitTypeID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteWorkPermitType", p_WorkPermitTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DrillLoginValidate(Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, Nullable<int> p_DrillProposalID, string p_Password)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_DrillProposalIDParameter = p_DrillProposalID.HasValue ?
                new ObjectParameter("p_DrillProposalID", p_DrillProposalID) :
                new ObjectParameter("p_DrillProposalID", typeof(int));
    
            var p_PasswordParameter = p_Password != null ?
                new ObjectParameter("p_Password", p_Password) :
                new ObjectParameter("p_Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DrillLoginValidate", p_DrillIDParameter, p_DrillSetupIDParameter, p_DrillProposalIDParameter, p_PasswordParameter);
        }
    
        public virtual ObjectResult<DrillRegistrationDetailsReport_Result> DrillRegistrationDetailsReport(Nullable<int> p_DrillID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DrillRegistrationDetailsReport_Result>("DrillRegistrationDetailsReport", p_DrillIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int EditInspectionDate(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditInspectionDate", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<FRASRegistrationDetailsReport_Result> FRASRegistrationDetailsReport(Nullable<int> p_FRASInspectionID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FRASRegistrationDetailsReport_Result>("FRASRegistrationDetailsReport", p_FRASInspectionIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GeDrillByMonthlyDay_Result> GeDrillByMonthlyDay(Nullable<int> p_DrillID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_Date, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeDrillByMonthlyDay_Result>("GeDrillByMonthlyDay", p_DrillIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GeExistingObjectInstance_Result> GeExistingObjectInstance(string p_ObjectName, Nullable<int> p_ObjectInstanceID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectNameParameter = p_ObjectName != null ?
                new ObjectParameter("p_ObjectName", p_ObjectName) :
                new ObjectParameter("p_ObjectName", typeof(string));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeExistingObjectInstance_Result>("GeExistingObjectInstance", p_ObjectNameParameter, p_ObjectInstanceIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetAdditionalCheckList_Result> GetAdditionalCheckList(Nullable<short> p_CategoryID, string p_InspectionType, string p_Frequency, string p_LanguageCode)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdditionalCheckList_Result>("GetAdditionalCheckList", p_CategoryIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_LanguageCodeParameter);
        }
    
        public virtual int GetAllDrillReport(Nullable<int> p_DrillID, Nullable<byte> p_DrillTypeID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_Frequency, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllDrillReport", p_DrillIDParameter, p_DrillTypeIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_EndDateParameter, p_FrequencyParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetAllLeafLevelContractLocation_Result> GetAllLeafLevelContractLocation(Nullable<int> p_ContractID, Nullable<int> p_ContractLocationID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_ContractLocationIDParameter = p_ContractLocationID.HasValue ?
                new ObjectParameter("p_ContractLocationID", p_ContractLocationID) :
                new ObjectParameter("p_ContractLocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLeafLevelContractLocation_Result>("GetAllLeafLevelContractLocation", p_ContractIDParameter, p_ContractLocationIDParameter);
        }
    
        public virtual ObjectResult<GetAssessmentParameter_Result> GetAssessmentParameter(Nullable<int> p_AssessmentParameterID, string p_AssessmentParameterName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_AssessmentParameterIDParameter = p_AssessmentParameterID.HasValue ?
                new ObjectParameter("p_AssessmentParameterID", p_AssessmentParameterID) :
                new ObjectParameter("p_AssessmentParameterID", typeof(int));
    
            var p_AssessmentParameterNameParameter = p_AssessmentParameterName != null ?
                new ObjectParameter("p_AssessmentParameterName", p_AssessmentParameterName) :
                new ObjectParameter("p_AssessmentParameterName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssessmentParameter_Result>("GetAssessmentParameter", p_AssessmentParameterIDParameter, p_AssessmentParameterNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetAssessmentParameterMapping_Result> GetAssessmentParameterMapping(Nullable<short> p_CourseID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssessmentParameterMapping_Result>("GetAssessmentParameterMapping", p_CourseIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetAssetLoad(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAssetLoad", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetAttribute_Result> GetAttribute(Nullable<short> p_AttributeID, string p_AttributeType, Nullable<byte> p_TextLength, Nullable<byte> p_FloatPrecision, Nullable<byte> p_FloatScale, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_AttributeIDParameter = p_AttributeID.HasValue ?
                new ObjectParameter("p_AttributeID", p_AttributeID) :
                new ObjectParameter("p_AttributeID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_TextLengthParameter = p_TextLength.HasValue ?
                new ObjectParameter("p_TextLength", p_TextLength) :
                new ObjectParameter("p_TextLength", typeof(byte));
    
            var p_FloatPrecisionParameter = p_FloatPrecision.HasValue ?
                new ObjectParameter("p_FloatPrecision", p_FloatPrecision) :
                new ObjectParameter("p_FloatPrecision", typeof(byte));
    
            var p_FloatScaleParameter = p_FloatScale.HasValue ?
                new ObjectParameter("p_FloatScale", p_FloatScale) :
                new ObjectParameter("p_FloatScale", typeof(byte));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttribute_Result>("GetAttribute", p_AttributeIDParameter, p_AttributeTypeParameter, p_TextLengthParameter, p_FloatPrecisionParameter, p_FloatScaleParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetAuditLogReport_Result> GetAuditLogReport(string p_Object, string p_ModuleCode, string p_OperationType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectParameter = p_Object != null ?
                new ObjectParameter("p_Object", p_Object) :
                new ObjectParameter("p_Object", typeof(string));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_OperationTypeParameter = p_OperationType != null ?
                new ObjectParameter("p_OperationType", p_OperationType) :
                new ObjectParameter("p_OperationType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuditLogReport_Result>("GetAuditLogReport", p_ObjectParameter, p_ModuleCodeParameter, p_OperationTypeParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetBaseDashboardCustomerList_Result> GetBaseDashboardCustomerList(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBaseDashboardCustomerList_Result>("GetBaseDashboardCustomerList", p_MonthDurationParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCalenderContractLocationStatus_Result> GetCalenderContractLocationStatus(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, Nullable<System.DateTime> p_Date, Nullable<int> p_ContractID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCalenderContractLocationStatus_Result>("GetCalenderContractLocationStatus", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateParameter, p_ContractIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCalenderDataMonthly_Result> GetCalenderDataMonthly(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCalenderDataMonthly_Result>("GetCalenderDataMonthly", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCalenderDataYearly_Result> GetCalenderDataYearly(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCalenderDataYearly_Result>("GetCalenderDataYearly", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCategory_Result> GetCategory(Nullable<short> p_CategoryID, string p_ServiceLineCode, Nullable<short> p_ParentCategoryID, Nullable<bool> p_IsLeaf, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_ParentCategoryIDParameter = p_ParentCategoryID.HasValue ?
                new ObjectParameter("p_ParentCategoryID", p_ParentCategoryID) :
                new ObjectParameter("p_ParentCategoryID", typeof(short));
    
            var p_IsLeafParameter = p_IsLeaf.HasValue ?
                new ObjectParameter("p_IsLeaf", p_IsLeaf) :
                new ObjectParameter("p_IsLeaf", typeof(bool));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategory_Result>("GetCategory", p_CategoryIDParameter, p_ServiceLineCodeParameter, p_ParentCategoryIDParameter, p_IsLeafParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCategoryLeafNode_Result> GetCategoryLeafNode(Nullable<int> p_CategoryID, string p_LanguageCode)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryLeafNode_Result>("GetCategoryLeafNode", p_CategoryIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual int GetCatInsTypFrqEstimatedTime(Nullable<short> p_CategoryID, Nullable<int> p_ServiceLevel, string p_Frequency, string p_InspectionType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_ServiceLevelParameter = p_ServiceLevel.HasValue ?
                new ObjectParameter("p_ServiceLevel", p_ServiceLevel) :
                new ObjectParameter("p_ServiceLevel", typeof(int));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCatInsTypFrqEstimatedTime", p_CategoryIDParameter, p_ServiceLevelParameter, p_FrequencyParameter, p_InspectionTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCertificateReportData_Result> GetCertificateReportData(Nullable<short> p_CourseID, Nullable<int> p_TrainingID, string p_EmployeeList, string p_EmployeeNameList, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_EmployeeListParameter = p_EmployeeList != null ?
                new ObjectParameter("p_EmployeeList", p_EmployeeList) :
                new ObjectParameter("p_EmployeeList", typeof(string));
    
            var p_EmployeeNameListParameter = p_EmployeeNameList != null ?
                new ObjectParameter("p_EmployeeNameList", p_EmployeeNameList) :
                new ObjectParameter("p_EmployeeNameList", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCertificateReportData_Result>("GetCertificateReportData", p_CourseIDParameter, p_TrainingIDParameter, p_EmployeeListParameter, p_EmployeeNameListParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCertification_Result> GetCertification(Nullable<short> p_CertificationID, string p_ShortCode, string p_CertificationName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CertificationIDParameter = p_CertificationID.HasValue ?
                new ObjectParameter("p_CertificationID", p_CertificationID) :
                new ObjectParameter("p_CertificationID", typeof(short));
    
            var p_ShortCodeParameter = p_ShortCode != null ?
                new ObjectParameter("p_ShortCode", p_ShortCode) :
                new ObjectParameter("p_ShortCode", typeof(string));
    
            var p_CertificationNameParameter = p_CertificationName != null ?
                new ObjectParameter("p_CertificationName", p_CertificationName) :
                new ObjectParameter("p_CertificationName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCertification_Result>("GetCertification", p_CertificationIDParameter, p_ShortCodeParameter, p_CertificationNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCheckList_Result> GetCheckList(Nullable<short> p_CheckListID, Nullable<short> p_CategoryID, string p_InspectionType, string p_Frequency, Nullable<byte> p_ExecutionDuration, string p_ExecutionUnit, Nullable<byte> p_ServiceLevelID, Nullable<short> p_CustomerID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ExecutionDurationParameter = p_ExecutionDuration.HasValue ?
                new ObjectParameter("p_ExecutionDuration", p_ExecutionDuration) :
                new ObjectParameter("p_ExecutionDuration", typeof(byte));
    
            var p_ExecutionUnitParameter = p_ExecutionUnit != null ?
                new ObjectParameter("p_ExecutionUnit", p_ExecutionUnit) :
                new ObjectParameter("p_ExecutionUnit", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckList_Result>("GetCheckList", p_CheckListIDParameter, p_CategoryIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_ExecutionDurationParameter, p_ExecutionUnitParameter, p_ServiceLevelIDParameter, p_CustomerIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> GetCheckListSequenceNumber(Nullable<short> p_CheckListID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("GetCheckListSequenceNumber", p_CheckListIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCheckListTask_Result> GetCheckListTask(Nullable<int> p_CheckListTaskID, Nullable<short> p_CategoryID, string p_InspectionType, string p_Frequency, Nullable<byte> p_ServiceLevelID, Nullable<short> p_CustomerID, Nullable<short> p_CheckListID, Nullable<short> p_TaskSequence, Nullable<short> p_CheckListTaskGroupID, Nullable<bool> p_IsMandatory, string p_ChecklistTaskCode, string p_AttributeType, Nullable<short> p_TextLength, Nullable<byte> p_FloatPrecision, Nullable<byte> p_FloatScale, Nullable<short> p_UOMID, Nullable<bool> p_DeviationIfFalse, Nullable<short> p_BoolDeviationTypeID, Nullable<double> p_DeviationIfLessValue, Nullable<short> p_LessValueDeviationTypeID, Nullable<double> p_DeviationIfMoreValue, Nullable<short> p_MoreValueDeviationTypeID, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListTaskIDParameter = p_CheckListTaskID.HasValue ?
                new ObjectParameter("p_CheckListTaskID", p_CheckListTaskID) :
                new ObjectParameter("p_CheckListTaskID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_ChecklistTaskCodeParameter = p_ChecklistTaskCode != null ?
                new ObjectParameter("p_ChecklistTaskCode", p_ChecklistTaskCode) :
                new ObjectParameter("p_ChecklistTaskCode", typeof(string));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_TextLengthParameter = p_TextLength.HasValue ?
                new ObjectParameter("p_TextLength", p_TextLength) :
                new ObjectParameter("p_TextLength", typeof(short));
    
            var p_FloatPrecisionParameter = p_FloatPrecision.HasValue ?
                new ObjectParameter("p_FloatPrecision", p_FloatPrecision) :
                new ObjectParameter("p_FloatPrecision", typeof(byte));
    
            var p_FloatScaleParameter = p_FloatScale.HasValue ?
                new ObjectParameter("p_FloatScale", p_FloatScale) :
                new ObjectParameter("p_FloatScale", typeof(byte));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_DeviationIfFalseParameter = p_DeviationIfFalse.HasValue ?
                new ObjectParameter("p_DeviationIfFalse", p_DeviationIfFalse) :
                new ObjectParameter("p_DeviationIfFalse", typeof(bool));
    
            var p_BoolDeviationTypeIDParameter = p_BoolDeviationTypeID.HasValue ?
                new ObjectParameter("p_BoolDeviationTypeID", p_BoolDeviationTypeID) :
                new ObjectParameter("p_BoolDeviationTypeID", typeof(short));
    
            var p_DeviationIfLessValueParameter = p_DeviationIfLessValue.HasValue ?
                new ObjectParameter("p_DeviationIfLessValue", p_DeviationIfLessValue) :
                new ObjectParameter("p_DeviationIfLessValue", typeof(double));
    
            var p_LessValueDeviationTypeIDParameter = p_LessValueDeviationTypeID.HasValue ?
                new ObjectParameter("p_LessValueDeviationTypeID", p_LessValueDeviationTypeID) :
                new ObjectParameter("p_LessValueDeviationTypeID", typeof(short));
    
            var p_DeviationIfMoreValueParameter = p_DeviationIfMoreValue.HasValue ?
                new ObjectParameter("p_DeviationIfMoreValue", p_DeviationIfMoreValue) :
                new ObjectParameter("p_DeviationIfMoreValue", typeof(double));
    
            var p_MoreValueDeviationTypeIDParameter = p_MoreValueDeviationTypeID.HasValue ?
                new ObjectParameter("p_MoreValueDeviationTypeID", p_MoreValueDeviationTypeID) :
                new ObjectParameter("p_MoreValueDeviationTypeID", typeof(short));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckListTask_Result>("GetCheckListTask", p_CheckListTaskIDParameter, p_CategoryIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_ServiceLevelIDParameter, p_CustomerIDParameter, p_CheckListIDParameter, p_TaskSequenceParameter, p_CheckListTaskGroupIDParameter, p_IsMandatoryParameter, p_ChecklistTaskCodeParameter, p_AttributeTypeParameter, p_TextLengthParameter, p_FloatPrecisionParameter, p_FloatScaleParameter, p_UOMIDParameter, p_DeviationIfFalseParameter, p_BoolDeviationTypeIDParameter, p_DeviationIfLessValueParameter, p_LessValueDeviationTypeIDParameter, p_DeviationIfMoreValueParameter, p_MoreValueDeviationTypeIDParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetChecklistTaskGroup_Result> GetChecklistTaskGroup(Nullable<short> p_ChecklistTaskGroupID, string p_ModuleCode, Nullable<short> p_GroupSequence, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ChecklistTaskGroupIDParameter = p_ChecklistTaskGroupID.HasValue ?
                new ObjectParameter("p_ChecklistTaskGroupID", p_ChecklistTaskGroupID) :
                new ObjectParameter("p_ChecklistTaskGroupID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_GroupSequenceParameter = p_GroupSequence.HasValue ?
                new ObjectParameter("p_GroupSequence", p_GroupSequence) :
                new ObjectParameter("p_GroupSequence", typeof(short));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChecklistTaskGroup_Result>("GetChecklistTaskGroup", p_ChecklistTaskGroupIDParameter, p_ModuleCodeParameter, p_GroupSequenceParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetChildCategory_Result> GetChildCategory(Nullable<int> p_CategoryID, string p_LanguageCode)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildCategory_Result>("GetChildCategory", p_CategoryIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetChildDocumentCategory_Result> GetChildDocumentCategory(Nullable<int> p_DocumentCategoryID, string p_LanguageCode)
        {
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildDocumentCategory_Result>("GetChildDocumentCategory", p_DocumentCategoryIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetChildIncidentCategory_Result> GetChildIncidentCategory(Nullable<int> p_IncidentCategoryID, string p_LanguageCode)
        {
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildIncidentCategory_Result>("GetChildIncidentCategory", p_IncidentCategoryIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetChildLocation_Result> GetChildLocation(Nullable<int> p_LocationID)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildLocation_Result>("GetChildLocation", p_LocationIDParameter);
        }
    
        public virtual int GetChildToRootCategory(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetChildToRootCategory", p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetContract_Result> GetContract(Nullable<int> p_ContractID, Nullable<short> p_CustomerID, Nullable<System.DateTime> p_FromDate, Nullable<System.DateTime> p_ToDate, Nullable<System.DateTime> p_ContractStartDate, Nullable<byte> p_ContractDuration, string p_SourceRefID, Nullable<int> p_ResponsiblePersonID, Nullable<int> p_AccountManagerID, string p_Remarks, string p_InspectionType, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_FromDateParameter = p_FromDate.HasValue ?
                new ObjectParameter("p_FromDate", p_FromDate) :
                new ObjectParameter("p_FromDate", typeof(System.DateTime));
    
            var p_ToDateParameter = p_ToDate.HasValue ?
                new ObjectParameter("p_ToDate", p_ToDate) :
                new ObjectParameter("p_ToDate", typeof(System.DateTime));
    
            var p_ContractStartDateParameter = p_ContractStartDate.HasValue ?
                new ObjectParameter("p_ContractStartDate", p_ContractStartDate) :
                new ObjectParameter("p_ContractStartDate", typeof(System.DateTime));
    
            var p_ContractDurationParameter = p_ContractDuration.HasValue ?
                new ObjectParameter("p_ContractDuration", p_ContractDuration) :
                new ObjectParameter("p_ContractDuration", typeof(byte));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContract_Result>("GetContract", p_ContractIDParameter, p_CustomerIDParameter, p_FromDateParameter, p_ToDateParameter, p_ContractStartDateParameter, p_ContractDurationParameter, p_SourceRefIDParameter, p_ResponsiblePersonIDParameter, p_AccountManagerIDParameter, p_RemarksParameter, p_InspectionTypeParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetContractCategory_Result> GetContractCategory(Nullable<int> p_ContractID, Nullable<short> p_CategoryID, string p_Frequency, string p_LanguageCode)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractCategory_Result>("GetContractCategory", p_ContractIDParameter, p_CategoryIDParameter, p_FrequencyParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetContractCategoryFrequency_Result> GetContractCategoryFrequency(Nullable<int> p_ContractID, string p_LanguageCode)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractCategoryFrequency_Result>("GetContractCategoryFrequency", p_ContractIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetContractExpiryReportData_Result> GetContractExpiryReportData(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_Days, Nullable<int> p_AccountManagerID, Nullable<int> p_ResponsiblePersonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DaysParameter = p_Days.HasValue ?
                new ObjectParameter("p_Days", p_Days) :
                new ObjectParameter("p_Days", typeof(int));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractExpiryReportData_Result>("GetContractExpiryReportData", p_CustomerIDParameter, p_LocationIDParameter, p_DaysParameter, p_AccountManagerIDParameter, p_ResponsiblePersonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetContractInspection(Nullable<int> p_LocationID, Nullable<int> p_ContractID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContractInspection", p_LocationIDParameter, p_ContractIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetContractLocation_Result> GetContractLocation(Nullable<int> p_ContractID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractLocation_Result>("GetContractLocation", p_ContractIDParameter);
        }
    
        public virtual ObjectResult<GetContractLocationCategory_Result> GetContractLocationCategory(Nullable<short> p_CustomerID, Nullable<int> p_ContractID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractLocationCategory_Result>("GetContractLocationCategory", p_CustomerIDParameter, p_ContractIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetContractReport_Result> GetContractReport(Nullable<short> p_CustomerID, Nullable<int> p_ContractID, Nullable<int> p_AccountManagerID, Nullable<int> p_ResponsiblePersonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractReport_Result>("GetContractReport", p_CustomerIDParameter, p_ContractIDParameter, p_AccountManagerIDParameter, p_ResponsiblePersonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetContractScheduledLocation_Result> GetContractScheduledLocation(Nullable<int> p_ContractID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractScheduledLocation_Result>("GetContractScheduledLocation", p_ContractIDParameter);
        }
    
        public virtual ObjectResult<GetContractScheduledLocationView_Result> GetContractScheduledLocationView(Nullable<int> p_ContractID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractScheduledLocationView_Result>("GetContractScheduledLocationView", p_ContractIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetContractScheduleReport_Result> GetContractScheduleReport(Nullable<short> p_CustomerID, Nullable<int> p_ContractID, Nullable<System.DateTime> p_FromDate, Nullable<System.DateTime> p_ToDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_FromDateParameter = p_FromDate.HasValue ?
                new ObjectParameter("p_FromDate", p_FromDate) :
                new ObjectParameter("p_FromDate", typeof(System.DateTime));
    
            var p_ToDateParameter = p_ToDate.HasValue ?
                new ObjectParameter("p_ToDate", p_ToDate) :
                new ObjectParameter("p_ToDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractScheduleReport_Result>("GetContractScheduleReport", p_CustomerIDParameter, p_ContractIDParameter, p_FromDateParameter, p_ToDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetContractServiceReport(Nullable<short> p_CustomerID, Nullable<int> p_ContractID, Nullable<int> p_InspecetionNo, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_InspecetionNoParameter = p_InspecetionNo.HasValue ?
                new ObjectParameter("p_InspecetionNo", p_InspecetionNo) :
                new ObjectParameter("p_InspecetionNo", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContractServiceReport", p_CustomerIDParameter, p_ContractIDParameter, p_InspecetionNoParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetContractStatusWebViewReport_Result> GetContractStatusWebViewReport(Nullable<int> p_CustomerID, Nullable<int> p_ContractID, Nullable<int> p_CategoryID, Nullable<int> p_AccountManagerID, Nullable<int> p_ResponsiblePersonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(int));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractStatusWebViewReport_Result>("GetContractStatusWebViewReport", p_CustomerIDParameter, p_ContractIDParameter, p_CategoryIDParameter, p_AccountManagerIDParameter, p_ResponsiblePersonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerByMonthly_Result> GetControllerByMonthly(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_Date, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerByMonthly_Result>("GetControllerByMonthly", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerByMonthlyDay_Result> GetControllerByMonthlyDay(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_Date, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerByMonthlyDay_Result>("GetControllerByMonthlyDay", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerDashboardMonthlySnapshot_Result> GetControllerDashboardMonthlySnapshot(string p_MonthDate, Nullable<int> p_Year, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDateParameter = p_MonthDate != null ?
                new ObjectParameter("p_MonthDate", p_MonthDate) :
                new ObjectParameter("p_MonthDate", typeof(string));
    
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerDashboardMonthlySnapshot_Result>("GetControllerDashboardMonthlySnapshot", p_MonthDateParameter, p_YearParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerDashboardYearlySnapshot_Result> GetControllerDashboardYearlySnapshot(Nullable<int> p_Year, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerDashboardYearlySnapshot_Result>("GetControllerDashboardYearlySnapshot", p_YearParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerEndUserName_Result> GetControllerEndUserName(string p_UserName)
        {
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("p_UserName", p_UserName) :
                new ObjectParameter("p_UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerEndUserName_Result>("GetControllerEndUserName", p_UserNameParameter);
        }
    
        public virtual ObjectResult<GetControllerReport_Result> GetControllerReport(Nullable<int> p_CustomerID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerReport_Result>("GetControllerReport", p_CustomerIDParameter, p_ControllerIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetControllerSpecialization(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetControllerSpecialization", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerTagging_Result> GetControllerTagging(Nullable<int> p_CustomerID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerTagging_Result>("GetControllerTagging", p_CustomerIDParameter, p_ControllerIDParameter, p_StartDateParameter, p_EndDateParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerTaggingData_Result> GetControllerTaggingData(Nullable<int> p_ControllerTaggingID, Nullable<int> p_CustomerID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ControllerTaggingIDParameter = p_ControllerTaggingID.HasValue ?
                new ObjectParameter("p_ControllerTaggingID", p_ControllerTaggingID) :
                new ObjectParameter("p_ControllerTaggingID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerTaggingData_Result>("GetControllerTaggingData", p_ControllerTaggingIDParameter, p_CustomerIDParameter, p_ControllerIDParameter, p_StartDateParameter, p_EndDateParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerWebViewReport_Result> GetControllerWebViewReport(Nullable<int> p_CustomerID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerWebViewReport_Result>("GetControllerWebViewReport", p_CustomerIDParameter, p_ControllerIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetControllerWiseSpecialization_Result> GetControllerWiseSpecialization(Nullable<int> p_ControllerID, Nullable<bool> p_IsChildResult)
        {
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetControllerWiseSpecialization_Result>("GetControllerWiseSpecialization", p_ControllerIDParameter, p_IsChildResultParameter);
        }
    
        public virtual ObjectResult<GetCountryHoliday_Result> GetCountryHoliday(string p_CountryCode, Nullable<System.DateTime> p_HolidayDate, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CountryCodeParameter = p_CountryCode != null ?
                new ObjectParameter("p_CountryCode", p_CountryCode) :
                new ObjectParameter("p_CountryCode", typeof(string));
    
            var p_HolidayDateParameter = p_HolidayDate.HasValue ?
                new ObjectParameter("p_HolidayDate", p_HolidayDate) :
                new ObjectParameter("p_HolidayDate", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryHoliday_Result>("GetCountryHoliday", p_CountryCodeParameter, p_HolidayDateParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCourse_Result> GetCourse(Nullable<short> p_CourseID, Nullable<short> p_CourseTypeID, string p_CourseCode, string p_Frequency, string p_Remarks, string p_CourseName, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_CourseTypeIDParameter = p_CourseTypeID.HasValue ?
                new ObjectParameter("p_CourseTypeID", p_CourseTypeID) :
                new ObjectParameter("p_CourseTypeID", typeof(short));
    
            var p_CourseCodeParameter = p_CourseCode != null ?
                new ObjectParameter("p_CourseCode", p_CourseCode) :
                new ObjectParameter("p_CourseCode", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CourseNameParameter = p_CourseName != null ?
                new ObjectParameter("p_CourseName", p_CourseName) :
                new ObjectParameter("p_CourseName", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourse_Result>("GetCourse", p_CourseIDParameter, p_CourseTypeIDParameter, p_CourseCodeParameter, p_FrequencyParameter, p_RemarksParameter, p_CourseNameParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCourseForCertificateReport_Result> GetCourseForCertificateReport(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseForCertificateReport_Result>("GetCourseForCertificateReport", p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetCourseMapping_Result> GetCourseMapping(Nullable<short> p_DesignationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseMapping_Result>("GetCourseMapping", p_DesignationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCourseTrainingFeedback_Result> GetCourseTrainingFeedback(string p_TraineeEmail, Nullable<int> p_TraineeID, string p_LanguageCode)
        {
            var p_TraineeEmailParameter = p_TraineeEmail != null ?
                new ObjectParameter("p_TraineeEmail", p_TraineeEmail) :
                new ObjectParameter("p_TraineeEmail", typeof(string));
    
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseTrainingFeedback_Result>("GetCourseTrainingFeedback", p_TraineeEmailParameter, p_TraineeIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetCourseType_Result> GetCourseType(Nullable<short> p_CourseTypeID, string p_CourseTypeName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseTypeIDParameter = p_CourseTypeID.HasValue ?
                new ObjectParameter("p_CourseTypeID", p_CourseTypeID) :
                new ObjectParameter("p_CourseTypeID", typeof(short));
    
            var p_CourseTypeNameParameter = p_CourseTypeName != null ?
                new ObjectParameter("p_CourseTypeName", p_CourseTypeName) :
                new ObjectParameter("p_CourseTypeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseType_Result>("GetCourseType", p_CourseTypeIDParameter, p_CourseTypeNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomer_Result> GetCustomer(Nullable<short> p_CustomerID, string p_CustomerShortCode, string p_CustomerName, string p_LegalEntityName, string p_Remarks, Nullable<int> p_AccountManagerID, Nullable<System.DateTime> p_EffectiveFromDate, Nullable<System.DateTime> p_EffectiveTillDate, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_CustomerShortCodeParameter = p_CustomerShortCode != null ?
                new ObjectParameter("p_CustomerShortCode", p_CustomerShortCode) :
                new ObjectParameter("p_CustomerShortCode", typeof(string));
    
            var p_CustomerNameParameter = p_CustomerName != null ?
                new ObjectParameter("p_CustomerName", p_CustomerName) :
                new ObjectParameter("p_CustomerName", typeof(string));
    
            var p_LegalEntityNameParameter = p_LegalEntityName != null ?
                new ObjectParameter("p_LegalEntityName", p_LegalEntityName) :
                new ObjectParameter("p_LegalEntityName", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_EffectiveFromDateParameter = p_EffectiveFromDate.HasValue ?
                new ObjectParameter("p_EffectiveFromDate", p_EffectiveFromDate) :
                new ObjectParameter("p_EffectiveFromDate", typeof(System.DateTime));
    
            var p_EffectiveTillDateParameter = p_EffectiveTillDate.HasValue ?
                new ObjectParameter("p_EffectiveTillDate", p_EffectiveTillDate) :
                new ObjectParameter("p_EffectiveTillDate", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomer_Result>("GetCustomer", p_CustomerIDParameter, p_CustomerShortCodeParameter, p_CustomerNameParameter, p_LegalEntityNameParameter, p_RemarksParameter, p_AccountManagerIDParameter, p_EffectiveFromDateParameter, p_EffectiveTillDateParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerAddress_Result> GetCustomerAddress(Nullable<short> p_CustomerID, string p_AddressType, string p_AddressLine1, string p_AddressLine2, string p_CityName, string p_StateName, string p_CountryName, string p_Pincode, Nullable<bool> p_IsPrimaryAddress, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_AddressTypeParameter = p_AddressType != null ?
                new ObjectParameter("p_AddressType", p_AddressType) :
                new ObjectParameter("p_AddressType", typeof(string));
    
            var p_AddressLine1Parameter = p_AddressLine1 != null ?
                new ObjectParameter("p_AddressLine1", p_AddressLine1) :
                new ObjectParameter("p_AddressLine1", typeof(string));
    
            var p_AddressLine2Parameter = p_AddressLine2 != null ?
                new ObjectParameter("p_AddressLine2", p_AddressLine2) :
                new ObjectParameter("p_AddressLine2", typeof(string));
    
            var p_CityNameParameter = p_CityName != null ?
                new ObjectParameter("p_CityName", p_CityName) :
                new ObjectParameter("p_CityName", typeof(string));
    
            var p_StateNameParameter = p_StateName != null ?
                new ObjectParameter("p_StateName", p_StateName) :
                new ObjectParameter("p_StateName", typeof(string));
    
            var p_CountryNameParameter = p_CountryName != null ?
                new ObjectParameter("p_CountryName", p_CountryName) :
                new ObjectParameter("p_CountryName", typeof(string));
    
            var p_PincodeParameter = p_Pincode != null ?
                new ObjectParameter("p_Pincode", p_Pincode) :
                new ObjectParameter("p_Pincode", typeof(string));
    
            var p_IsPrimaryAddressParameter = p_IsPrimaryAddress.HasValue ?
                new ObjectParameter("p_IsPrimaryAddress", p_IsPrimaryAddress) :
                new ObjectParameter("p_IsPrimaryAddress", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerAddress_Result>("GetCustomerAddress", p_CustomerIDParameter, p_AddressTypeParameter, p_AddressLine1Parameter, p_AddressLine2Parameter, p_CityNameParameter, p_StateNameParameter, p_CountryNameParameter, p_PincodeParameter, p_IsPrimaryAddressParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerAllRootLocation_Result> GetCustomerAllRootLocation(Nullable<short> p_CustomerID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerAllRootLocation_Result>("GetCustomerAllRootLocation", p_CustomerIDParameter);
        }
    
        public virtual int GetCustomerAndLocationWiseChildCategory(Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerAndLocationWiseChildCategory", p_CategoryIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetCustomerAndLocationWiseRootCategory(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerAndLocationWiseRootCategory", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerByLocationID_Result> GetCustomerByLocationID(Nullable<int> p_LocationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerByLocationID_Result>("GetCustomerByLocationID", p_LocationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerChildLocation_Result> GetCustomerChildLocation(Nullable<int> p_LocationID)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerChildLocation_Result>("GetCustomerChildLocation", p_LocationIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerContact_Result> GetCustomerContact(Nullable<short> p_CustomerID, string p_ContactName, string p_Email, string p_Telephone, string p_Mobile, Nullable<bool> p_IsPrimaryContact, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContactNameParameter = p_ContactName != null ?
                new ObjectParameter("p_ContactName", p_ContactName) :
                new ObjectParameter("p_ContactName", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_TelephoneParameter = p_Telephone != null ?
                new ObjectParameter("p_Telephone", p_Telephone) :
                new ObjectParameter("p_Telephone", typeof(string));
    
            var p_MobileParameter = p_Mobile != null ?
                new ObjectParameter("p_Mobile", p_Mobile) :
                new ObjectParameter("p_Mobile", typeof(string));
    
            var p_IsPrimaryContactParameter = p_IsPrimaryContact.HasValue ?
                new ObjectParameter("p_IsPrimaryContact", p_IsPrimaryContact) :
                new ObjectParameter("p_IsPrimaryContact", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerContact_Result>("GetCustomerContact", p_CustomerIDParameter, p_ContactNameParameter, p_EmailParameter, p_TelephoneParameter, p_MobileParameter, p_IsPrimaryContactParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerContactForObjectDataReport_Result> GetCustomerContactForObjectDataReport(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerContactForObjectDataReport_Result>("GetCustomerContactForObjectDataReport", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerDashboardCustomerDetails_Result> GetCustomerDashboardCustomerDetails(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerDashboardCustomerDetails_Result>("GetCustomerDashboardCustomerDetails", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerLocation_Result> GetCustomerLocation(Nullable<short> p_CustomerID, Nullable<int> p_LocationID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerLocation_Result>("GetCustomerLocation", p_CustomerIDParameter, p_LocationIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerLocationHoliday_Result> GetCustomerLocationHoliday(Nullable<short> p_CustomerID, Nullable<int> p_CustomerLocationID, string p_LocationName, Nullable<System.DateTime> p_HolidayDate, string p_HolidayName, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_CustomerLocationIDParameter = p_CustomerLocationID.HasValue ?
                new ObjectParameter("p_CustomerLocationID", p_CustomerLocationID) :
                new ObjectParameter("p_CustomerLocationID", typeof(int));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_HolidayDateParameter = p_HolidayDate.HasValue ?
                new ObjectParameter("p_HolidayDate", p_HolidayDate) :
                new ObjectParameter("p_HolidayDate", typeof(System.DateTime));
    
            var p_HolidayNameParameter = p_HolidayName != null ?
                new ObjectParameter("p_HolidayName", p_HolidayName) :
                new ObjectParameter("p_HolidayName", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerLocationHoliday_Result>("GetCustomerLocationHoliday", p_CustomerIDParameter, p_CustomerLocationIDParameter, p_LocationNameParameter, p_HolidayDateParameter, p_HolidayNameParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerLocationRiskLevel_Result> GetCustomerLocationRiskLevel(Nullable<int> p_LocationID, string p_LocationName, Nullable<int> p_ParentLocationID, Nullable<bool> p_HasCustomers, Nullable<short> p_CustomerID, Nullable<double> p_Longitude, Nullable<double> p_Latitude, string p_Remarks, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ParentLocationIDParameter = p_ParentLocationID.HasValue ?
                new ObjectParameter("p_ParentLocationID", p_ParentLocationID) :
                new ObjectParameter("p_ParentLocationID", typeof(int));
    
            var p_HasCustomersParameter = p_HasCustomers.HasValue ?
                new ObjectParameter("p_HasCustomers", p_HasCustomers) :
                new ObjectParameter("p_HasCustomers", typeof(bool));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerLocationRiskLevel_Result>("GetCustomerLocationRiskLevel", p_LocationIDParameter, p_LocationNameParameter, p_ParentLocationIDParameter, p_HasCustomersParameter, p_CustomerIDParameter, p_LongitudeParameter, p_LatitudeParameter, p_RemarksParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerRootLocation_Result> GetCustomerRootLocation(Nullable<int> p_CustomerID)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerRootLocation_Result>("GetCustomerRootLocation", p_CustomerIDParameter);
        }
    
        public virtual int GetCustomerSafetyDashboardActiveAssetsPlansDeviations(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerSafetyDashboardActiveAssetsPlansDeviations", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardDeviatonsChart_Result> GetCustomerSafetyDashboardDeviatonsChart(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardDeviatonsChart_Result>("GetCustomerSafetyDashboardDeviatonsChart", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardEmergencyInspection_Result> GetCustomerSafetyDashboardEmergencyInspection(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardEmergencyInspection_Result>("GetCustomerSafetyDashboardEmergencyInspection", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardInspectionTypeStatus_Result> GetCustomerSafetyDashboardInspectionTypeStatus(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardInspectionTypeStatus_Result>("GetCustomerSafetyDashboardInspectionTypeStatus", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardMonthlySnapshot_Result> GetCustomerSafetyDashboardMonthlySnapshot(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardMonthlySnapshot_Result>("GetCustomerSafetyDashboardMonthlySnapshot", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardPlansAndAssets_Result> GetCustomerSafetyDashboardPlansAndAssets(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardPlansAndAssets_Result>("GetCustomerSafetyDashboardPlansAndAssets", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardTop5Deviations_Result> GetCustomerSafetyDashboardTop5Deviations(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardTop5Deviations_Result>("GetCustomerSafetyDashboardTop5Deviations", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardYearlyChart_Result> GetCustomerSafetyDashboardYearlyChart(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardYearlyChart_Result>("GetCustomerSafetyDashboardYearlyChart", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSafetyDashboardYearlyDeviationsChart_Result> GetCustomerSafetyDashboardYearlyDeviationsChart(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSafetyDashboardYearlyDeviationsChart_Result>("GetCustomerSafetyDashboardYearlyDeviationsChart", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerSalesPerson_Result> GetCustomerSalesPerson(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSalesPerson_Result>("GetCustomerSalesPerson", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetCustomerServiceLineConfiguration_Result> GetCustomerServiceLineConfiguration(Nullable<short> p_CustomerID, string p_ServiceLineCode, string p_ConfigurationCode, Nullable<int> p_ConfigurationValue, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_ConfigurationCodeParameter = p_ConfigurationCode != null ?
                new ObjectParameter("p_ConfigurationCode", p_ConfigurationCode) :
                new ObjectParameter("p_ConfigurationCode", typeof(string));
    
            var p_ConfigurationValueParameter = p_ConfigurationValue.HasValue ?
                new ObjectParameter("p_ConfigurationValue", p_ConfigurationValue) :
                new ObjectParameter("p_ConfigurationValue", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerServiceLineConfiguration_Result>("GetCustomerServiceLineConfiguration", p_CustomerIDParameter, p_ServiceLineCodeParameter, p_ConfigurationCodeParameter, p_ConfigurationValueParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetCustomerSpecificChecklist(Nullable<short> p_CustomerID, Nullable<short> p_CategoryID, string p_InspectionType, Nullable<byte> p_ServiceLevelID, Nullable<bool> p_IsCustomerSpecific, string p_LanguageCode, ObjectParameter frequency)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_IsCustomerSpecificParameter = p_IsCustomerSpecific.HasValue ?
                new ObjectParameter("p_IsCustomerSpecific", p_IsCustomerSpecific) :
                new ObjectParameter("p_IsCustomerSpecific", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerSpecificChecklist", p_CustomerIDParameter, p_CategoryIDParameter, p_InspectionTypeParameter, p_ServiceLevelIDParameter, p_IsCustomerSpecificParameter, p_LanguageCodeParameter, frequency);
        }
    
        public virtual int GetCustomerWeeklyOff(Nullable<short> p_CustomerID, string p_DayName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_DayNameParameter = p_DayName != null ?
                new ObjectParameter("p_DayName", p_DayName) :
                new ObjectParameter("p_DayName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerWeeklyOff", p_CustomerIDParameter, p_DayNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDashboardData_Result> GetDashboardData(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboardData_Result>("GetDashboardData", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDataCourseDocument_Result> GetDataCourseDocument(Nullable<short> p_CourseID, Nullable<int> p_Documnet, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_DocumnetParameter = p_Documnet.HasValue ?
                new ObjectParameter("p_Documnet", p_Documnet) :
                new ObjectParameter("p_Documnet", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataCourseDocument_Result>("GetDataCourseDocument", p_CourseIDParameter, p_DocumnetParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDataForContractReport_Result> GetDataForContractReport(Nullable<short> p_CustomerID, Nullable<int> p_ContractID, Nullable<int> p_AccountManagerID, Nullable<int> p_ResponsiblePersonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForContractReport_Result>("GetDataForContractReport", p_CustomerIDParameter, p_ContractIDParameter, p_AccountManagerIDParameter, p_ResponsiblePersonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDataIncidentMonthlySummaryReport_Result> GetDataIncidentMonthlySummaryReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CheckListTaskGroupID, string p_AttributeType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataIncidentMonthlySummaryReport_Result>("GetDataIncidentMonthlySummaryReport", p_CustomerIDParameter, p_LocationIDParameter, p_CheckListTaskGroupIDParameter, p_AttributeTypeParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDataIncidentObservationReport_Result> GetDataIncidentObservationReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CheckListTaskGroupID, string p_AttributeType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataIncidentObservationReport_Result>("GetDataIncidentObservationReport", p_CustomerIDParameter, p_LocationIDParameter, p_CheckListTaskGroupIDParameter, p_AttributeTypeParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeletedFilesInfo_Result> GetDeletedFilesInfo(string pFileName, string pFileType, string pFileRemarks)
        {
            var pFileNameParameter = pFileName != null ?
                new ObjectParameter("pFileName", pFileName) :
                new ObjectParameter("pFileName", typeof(string));
    
            var pFileTypeParameter = pFileType != null ?
                new ObjectParameter("pFileType", pFileType) :
                new ObjectParameter("pFileType", typeof(string));
    
            var pFileRemarksParameter = pFileRemarks != null ?
                new ObjectParameter("pFileRemarks", pFileRemarks) :
                new ObjectParameter("pFileRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeletedFilesInfo_Result>("GetDeletedFilesInfo", pFileNameParameter, pFileTypeParameter, pFileRemarksParameter);
        }
    
        public virtual ObjectResult<GetDepartment_Result> GetDepartment(Nullable<short> p_DepartmentID, string p_DepartmentName, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_DepartmentNameParameter = p_DepartmentName != null ?
                new ObjectParameter("p_DepartmentName", p_DepartmentName) :
                new ObjectParameter("p_DepartmentName", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartment_Result>("GetDepartment", p_DepartmentIDParameter, p_DepartmentNameParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDesignation_Result> GetDesignation(Nullable<short> p_DesignationID, string p_DesignationName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DesignationNameParameter = p_DesignationName != null ?
                new ObjectParameter("p_DesignationName", p_DesignationName) :
                new ObjectParameter("p_DesignationName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDesignation_Result>("GetDesignation", p_DesignationIDParameter, p_DesignationNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDesignationCoursewise_Result> GetDesignationCoursewise(Nullable<short> p_DesignationID, string p_DesignationName, Nullable<short> p_CourseID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DesignationNameParameter = p_DesignationName != null ?
                new ObjectParameter("p_DesignationName", p_DesignationName) :
                new ObjectParameter("p_DesignationName", typeof(string));
    
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDesignationCoursewise_Result>("GetDesignationCoursewise", p_DesignationIDParameter, p_DesignationNameParameter, p_CourseIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDetailRepairComponentDataGrid(Nullable<int> p_RepairComponentID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_RepairComponentIDParameter = p_RepairComponentID.HasValue ?
                new ObjectParameter("p_RepairComponentID", p_RepairComponentID) :
                new ObjectParameter("p_RepairComponentID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDetailRepairComponentDataGrid", p_RepairComponentIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationByCategoryResolutionDashboard_Result> GetDeviationByCategoryResolutionDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, Nullable<short> p_DepartmentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationByCategoryResolutionDashboard_Result>("GetDeviationByCategoryResolutionDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_DepartmentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationByMonthResolutionDashboard_Result> GetDeviationByMonthResolutionDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_InspectionType, Nullable<short> p_DepartmentID, Nullable<int> p_Year, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationByMonthResolutionDashboard_Result>("GetDeviationByMonthResolutionDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_InspectionTypeParameter, p_DepartmentIDParameter, p_YearParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationByResolutionDurationDashboard_Result> GetDeviationByResolutionDurationDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, Nullable<short> p_DepartmentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationByResolutionDurationDashboard_Result>("GetDeviationByResolutionDurationDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_DepartmentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationByRiskLevelDashboard_Result> GetDeviationByRiskLevelDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, Nullable<short> p_DepartmentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationByRiskLevelDashboard_Result>("GetDeviationByRiskLevelDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_DepartmentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDeviationData(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<byte> p_Status, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_StatusParameter = p_Status.HasValue ?
                new ObjectParameter("p_Status", p_Status) :
                new ObjectParameter("p_Status", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDeviationData", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_StatusParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationlist_Result> GetDeviationlist(Nullable<int> p_ObjectInstanceID, Nullable<int> p_InspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationlist_Result>("GetDeviationlist", p_ObjectInstanceIDParameter, p_InspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDeviationLocation(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_InspectionType, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<byte> p_Status, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_StatusParameter = p_Status.HasValue ?
                new ObjectParameter("p_Status", p_Status) :
                new ObjectParameter("p_Status", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDeviationLocation", p_CustomerIDParameter, p_LocationIDParameter, p_InspectionTypeParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_StatusParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationMobileList_Result> GetDeviationMobileList(Nullable<int> p_InspectionID, string p_InspectionType, string p_Frequency, Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_ObjectID, string p_ObjectSerialNumber, Nullable<int> p_ObjectInstanceID, Nullable<short> p_DeviationTypeID, Nullable<int> p_ControllerID, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_CheckINDateTime, Nullable<System.DateTime> p_CheckOUTDateTime, Nullable<System.DateTime> p_CancelDateTime, string p_Remarks, Nullable<int> p_SearchStatusID, Nullable<byte> p_RiskLevelID, string p_ResolutionTimeUnit, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_ObjectSerialNumberParameter = p_ObjectSerialNumber != null ?
                new ObjectParameter("p_ObjectSerialNumber", p_ObjectSerialNumber) :
                new ObjectParameter("p_ObjectSerialNumber", typeof(string));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_CheckINDateTimeParameter = p_CheckINDateTime.HasValue ?
                new ObjectParameter("p_CheckINDateTime", p_CheckINDateTime) :
                new ObjectParameter("p_CheckINDateTime", typeof(System.DateTime));
    
            var p_CheckOUTDateTimeParameter = p_CheckOUTDateTime.HasValue ?
                new ObjectParameter("p_CheckOUTDateTime", p_CheckOUTDateTime) :
                new ObjectParameter("p_CheckOUTDateTime", typeof(System.DateTime));
    
            var p_CancelDateTimeParameter = p_CancelDateTime.HasValue ?
                new ObjectParameter("p_CancelDateTime", p_CancelDateTime) :
                new ObjectParameter("p_CancelDateTime", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_ResolutionTimeUnitParameter = p_ResolutionTimeUnit != null ?
                new ObjectParameter("p_ResolutionTimeUnit", p_ResolutionTimeUnit) :
                new ObjectParameter("p_ResolutionTimeUnit", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationMobileList_Result>("GetDeviationMobileList", p_InspectionIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_CategoryIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_ObjectIDParameter, p_ObjectSerialNumberParameter, p_ObjectInstanceIDParameter, p_DeviationTypeIDParameter, p_ControllerIDParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_CheckINDateTimeParameter, p_CheckOUTDateTimeParameter, p_CancelDateTimeParameter, p_RemarksParameter, p_SearchStatusIDParameter, p_RiskLevelIDParameter, p_ResolutionTimeUnitParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationType_Result> GetDeviationType(Nullable<short> p_DeviationTypeID, string p_DeviationTypeName, string p_ServiceLineCode, Nullable<bool> p_HasLocation, Nullable<short> p_CategoryID, Nullable<short> p_DeviationTypeSequence, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<byte> p_RiskLevelID, string p_DeviationTypeCode, Nullable<short> p_DeviationGroupID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_DeviationTypeNameParameter = p_DeviationTypeName != null ?
                new ObjectParameter("p_DeviationTypeName", p_DeviationTypeName) :
                new ObjectParameter("p_DeviationTypeName", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_HasLocationParameter = p_HasLocation.HasValue ?
                new ObjectParameter("p_HasLocation", p_HasLocation) :
                new ObjectParameter("p_HasLocation", typeof(bool));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DeviationTypeSequenceParameter = p_DeviationTypeSequence.HasValue ?
                new ObjectParameter("p_DeviationTypeSequence", p_DeviationTypeSequence) :
                new ObjectParameter("p_DeviationTypeSequence", typeof(short));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_DeviationTypeCodeParameter = p_DeviationTypeCode != null ?
                new ObjectParameter("p_DeviationTypeCode", p_DeviationTypeCode) :
                new ObjectParameter("p_DeviationTypeCode", typeof(string));
    
            var p_DeviationGroupIDParameter = p_DeviationGroupID.HasValue ?
                new ObjectParameter("p_DeviationGroupID", p_DeviationGroupID) :
                new ObjectParameter("p_DeviationGroupID", typeof(short));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationType_Result>("GetDeviationType", p_DeviationTypeIDParameter, p_DeviationTypeNameParameter, p_ServiceLineCodeParameter, p_HasLocationParameter, p_CategoryIDParameter, p_DeviationTypeSequenceParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_RiskLevelIDParameter, p_DeviationTypeCodeParameter, p_DeviationGroupIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationTypeResolution_Result> GetDeviationTypeResolution(Nullable<int> p_DeviationTypeResolutionID, Nullable<short> p_DeviationTypeID, string p_ResolutionName, string p_DeviationTypeName, Nullable<short> p_ResolutionSequence, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<bool> p_CanAddRepairComponent, Nullable<bool> p_UseRepairComponents, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeResolutionIDParameter = p_DeviationTypeResolutionID.HasValue ?
                new ObjectParameter("p_DeviationTypeResolutionID", p_DeviationTypeResolutionID) :
                new ObjectParameter("p_DeviationTypeResolutionID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ResolutionNameParameter = p_ResolutionName != null ?
                new ObjectParameter("p_ResolutionName", p_ResolutionName) :
                new ObjectParameter("p_ResolutionName", typeof(string));
    
            var p_DeviationTypeNameParameter = p_DeviationTypeName != null ?
                new ObjectParameter("p_DeviationTypeName", p_DeviationTypeName) :
                new ObjectParameter("p_DeviationTypeName", typeof(string));
    
            var p_ResolutionSequenceParameter = p_ResolutionSequence.HasValue ?
                new ObjectParameter("p_ResolutionSequence", p_ResolutionSequence) :
                new ObjectParameter("p_ResolutionSequence", typeof(short));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_CanAddRepairComponentParameter = p_CanAddRepairComponent.HasValue ?
                new ObjectParameter("p_CanAddRepairComponent", p_CanAddRepairComponent) :
                new ObjectParameter("p_CanAddRepairComponent", typeof(bool));
    
            var p_UseRepairComponentsParameter = p_UseRepairComponents.HasValue ?
                new ObjectParameter("p_UseRepairComponents", p_UseRepairComponents) :
                new ObjectParameter("p_UseRepairComponents", typeof(bool));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationTypeResolution_Result>("GetDeviationTypeResolution", p_DeviationTypeResolutionIDParameter, p_DeviationTypeIDParameter, p_ResolutionNameParameter, p_DeviationTypeNameParameter, p_ResolutionSequenceParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_CanAddRepairComponentParameter, p_UseRepairComponentsParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDeviationTypeResponsible_Result> GetDeviationTypeResponsible(Nullable<short> p_DeviationTypeID, string p_DeviationTypeName, string p_ServiceLineCode, Nullable<bool> p_HasLocation, Nullable<short> p_CategoryID, Nullable<short> p_DeviationGroupID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_DeviationTypeNameParameter = p_DeviationTypeName != null ?
                new ObjectParameter("p_DeviationTypeName", p_DeviationTypeName) :
                new ObjectParameter("p_DeviationTypeName", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_HasLocationParameter = p_HasLocation.HasValue ?
                new ObjectParameter("p_HasLocation", p_HasLocation) :
                new ObjectParameter("p_HasLocation", typeof(bool));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DeviationGroupIDParameter = p_DeviationGroupID.HasValue ?
                new ObjectParameter("p_DeviationGroupID", p_DeviationGroupID) :
                new ObjectParameter("p_DeviationGroupID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviationTypeResponsible_Result>("GetDeviationTypeResponsible", p_DeviationTypeIDParameter, p_DeviationTypeNameParameter, p_ServiceLineCodeParameter, p_HasLocationParameter, p_CategoryIDParameter, p_DeviationGroupIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> GetDeviationTypeSequenceNumber(Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("GetDeviationTypeSequenceNumber", p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDocument_Result> GetDocument(Nullable<int> p_DocumentID, Nullable<short> p_DocumentCategoryID, string p_DocumentNumber, string p_DocumentName, Nullable<byte> p_DocumentTypeID, Nullable<long> p_FileID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentIDParameter = p_DocumentID.HasValue ?
                new ObjectParameter("p_DocumentID", p_DocumentID) :
                new ObjectParameter("p_DocumentID", typeof(int));
    
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_DocumentNumberParameter = p_DocumentNumber != null ?
                new ObjectParameter("p_DocumentNumber", p_DocumentNumber) :
                new ObjectParameter("p_DocumentNumber", typeof(string));
    
            var p_DocumentNameParameter = p_DocumentName != null ?
                new ObjectParameter("p_DocumentName", p_DocumentName) :
                new ObjectParameter("p_DocumentName", typeof(string));
    
            var p_DocumentTypeIDParameter = p_DocumentTypeID.HasValue ?
                new ObjectParameter("p_DocumentTypeID", p_DocumentTypeID) :
                new ObjectParameter("p_DocumentTypeID", typeof(byte));
    
            var p_FileIDParameter = p_FileID.HasValue ?
                new ObjectParameter("p_FileID", p_FileID) :
                new ObjectParameter("p_FileID", typeof(long));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocument_Result>("GetDocument", p_DocumentIDParameter, p_DocumentCategoryIDParameter, p_DocumentNumberParameter, p_DocumentNameParameter, p_DocumentTypeIDParameter, p_FileIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDocumentCategory_Result> GetDocumentCategory(Nullable<short> p_DocumentCategoryID, Nullable<short> p_ParentDocumentCategoryID, Nullable<bool> p_HasDocuments, string p_Remarks, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_ParentDocumentCategoryIDParameter = p_ParentDocumentCategoryID.HasValue ?
                new ObjectParameter("p_ParentDocumentCategoryID", p_ParentDocumentCategoryID) :
                new ObjectParameter("p_ParentDocumentCategoryID", typeof(short));
    
            var p_HasDocumentsParameter = p_HasDocuments.HasValue ?
                new ObjectParameter("p_HasDocuments", p_HasDocuments) :
                new ObjectParameter("p_HasDocuments", typeof(bool));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentCategory_Result>("GetDocumentCategory", p_DocumentCategoryIDParameter, p_ParentDocumentCategoryIDParameter, p_HasDocumentsParameter, p_RemarksParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDocumentForUserRole_Result> GetDocumentForUserRole(Nullable<int> p_DocumentID, Nullable<short> p_DocumentCategoryID, string p_DocumentNumber, string p_DocumentName, Nullable<byte> p_DocumentTypeID, Nullable<long> p_FileID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentIDParameter = p_DocumentID.HasValue ?
                new ObjectParameter("p_DocumentID", p_DocumentID) :
                new ObjectParameter("p_DocumentID", typeof(int));
    
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_DocumentNumberParameter = p_DocumentNumber != null ?
                new ObjectParameter("p_DocumentNumber", p_DocumentNumber) :
                new ObjectParameter("p_DocumentNumber", typeof(string));
    
            var p_DocumentNameParameter = p_DocumentName != null ?
                new ObjectParameter("p_DocumentName", p_DocumentName) :
                new ObjectParameter("p_DocumentName", typeof(string));
    
            var p_DocumentTypeIDParameter = p_DocumentTypeID.HasValue ?
                new ObjectParameter("p_DocumentTypeID", p_DocumentTypeID) :
                new ObjectParameter("p_DocumentTypeID", typeof(byte));
    
            var p_FileIDParameter = p_FileID.HasValue ?
                new ObjectParameter("p_FileID", p_FileID) :
                new ObjectParameter("p_FileID", typeof(long));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentForUserRole_Result>("GetDocumentForUserRole", p_DocumentIDParameter, p_DocumentCategoryIDParameter, p_DocumentNumberParameter, p_DocumentNameParameter, p_DocumentTypeIDParameter, p_FileIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDocumentMapping_Result> GetDocumentMapping(Nullable<int> p_EntityID, string p_EntityType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EntityIDParameter = p_EntityID.HasValue ?
                new ObjectParameter("p_EntityID", p_EntityID) :
                new ObjectParameter("p_EntityID", typeof(int));
    
            var p_EntityTypeParameter = p_EntityType != null ?
                new ObjectParameter("p_EntityType", p_EntityType) :
                new ObjectParameter("p_EntityType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentMapping_Result>("GetDocumentMapping", p_EntityIDParameter, p_EntityTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDocumentType_Result> GetDocumentType(Nullable<byte> p_DocumentTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentTypeIDParameter = p_DocumentTypeID.HasValue ?
                new ObjectParameter("p_DocumentTypeID", p_DocumentTypeID) :
                new ObjectParameter("p_DocumentTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentType_Result>("GetDocumentType", p_DocumentTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDrill(Nullable<int> p_DrillID, Nullable<byte> p_DrillTypeID, Nullable<System.DateTime> p_DrillDatetime, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_DrillTitle, Nullable<System.DateTime> p_InitiationDateTime, Nullable<System.DateTime> p_ConclusionDateTime, Nullable<int> p_OwnerID, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosureDateTime, string p_ClosureRemarks, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_Frequency, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillDatetimeParameter = p_DrillDatetime.HasValue ?
                new ObjectParameter("p_DrillDatetime", p_DrillDatetime) :
                new ObjectParameter("p_DrillDatetime", typeof(System.DateTime));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DrillTitleParameter = p_DrillTitle != null ?
                new ObjectParameter("p_DrillTitle", p_DrillTitle) :
                new ObjectParameter("p_DrillTitle", typeof(string));
    
            var p_InitiationDateTimeParameter = p_InitiationDateTime.HasValue ?
                new ObjectParameter("p_InitiationDateTime", p_InitiationDateTime) :
                new ObjectParameter("p_InitiationDateTime", typeof(System.DateTime));
    
            var p_ConclusionDateTimeParameter = p_ConclusionDateTime.HasValue ?
                new ObjectParameter("p_ConclusionDateTime", p_ConclusionDateTime) :
                new ObjectParameter("p_ConclusionDateTime", typeof(System.DateTime));
    
            var p_OwnerIDParameter = p_OwnerID.HasValue ?
                new ObjectParameter("p_OwnerID", p_OwnerID) :
                new ObjectParameter("p_OwnerID", typeof(int));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDrill", p_DrillIDParameter, p_DrillTypeIDParameter, p_DrillDatetimeParameter, p_CustomerIDParameter, p_LocationIDParameter, p_DrillTitleParameter, p_InitiationDateTimeParameter, p_ConclusionDateTimeParameter, p_OwnerIDParameter, p_ClosedByParameter, p_ClosureDateTimeParameter, p_ClosureRemarksParameter, p_StartDateParameter, p_EndDateParameter, p_FrequencyParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDrillActionReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_SFlag, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_SFlagParameter = p_SFlag.HasValue ?
                new ObjectParameter("p_SFlag", p_SFlag) :
                new ObjectParameter("p_SFlag", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDrillActionReport", p_CustomerIDParameter, p_LocationIDParameter, p_SFlagParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillActionsData_Result> GetDrillActionsData(Nullable<int> p_DrillID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillActionsData_Result>("GetDrillActionsData", p_DrillIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillActionType_Result> GetDrillActionType(Nullable<byte> p_DrillActionTypeID, string p_DrillActionTypeName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillActionTypeIDParameter = p_DrillActionTypeID.HasValue ?
                new ObjectParameter("p_DrillActionTypeID", p_DrillActionTypeID) :
                new ObjectParameter("p_DrillActionTypeID", typeof(byte));
    
            var p_DrillActionTypeNameParameter = p_DrillActionTypeName != null ?
                new ObjectParameter("p_DrillActionTypeName", p_DrillActionTypeName) :
                new ObjectParameter("p_DrillActionTypeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillActionType_Result>("GetDrillActionType", p_DrillActionTypeIDParameter, p_DrillActionTypeNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillCheckList_Result> GetDrillCheckList(Nullable<short> p_DrillChecklistID, Nullable<byte> p_DrillTypeID, Nullable<short> p_DrillStakeHolderID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillChecklistIDParameter = p_DrillChecklistID.HasValue ?
                new ObjectParameter("p_DrillChecklistID", p_DrillChecklistID) :
                new ObjectParameter("p_DrillChecklistID", typeof(short));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillStakeHolderIDParameter = p_DrillStakeHolderID.HasValue ?
                new ObjectParameter("p_DrillStakeHolderID", p_DrillStakeHolderID) :
                new ObjectParameter("p_DrillStakeHolderID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillCheckList_Result>("GetDrillCheckList", p_DrillChecklistIDParameter, p_DrillTypeIDParameter, p_DrillStakeHolderIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillCheckListTask_Result> GetDrillCheckListTask(Nullable<int> p_DrillCheckListTaskID, Nullable<short> p_DrillCheckListID, Nullable<short> p_CheckListTaskGroupID, Nullable<byte> p_DrillTypeID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, string p_AttributeType, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillCheckListTaskIDParameter = p_DrillCheckListTaskID.HasValue ?
                new ObjectParameter("p_DrillCheckListTaskID", p_DrillCheckListTaskID) :
                new ObjectParameter("p_DrillCheckListTaskID", typeof(int));
    
            var p_DrillCheckListIDParameter = p_DrillCheckListID.HasValue ?
                new ObjectParameter("p_DrillCheckListID", p_DrillCheckListID) :
                new ObjectParameter("p_DrillCheckListID", typeof(short));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillCheckListTask_Result>("GetDrillCheckListTask", p_DrillCheckListTaskIDParameter, p_DrillCheckListIDParameter, p_CheckListTaskGroupIDParameter, p_DrillTypeIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_AttributeTypeParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetDrillCheckListTaskSequence(Nullable<short> p_DrillCheckListID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillCheckListIDParameter = p_DrillCheckListID.HasValue ?
                new ObjectParameter("p_DrillCheckListID", p_DrillCheckListID) :
                new ObjectParameter("p_DrillCheckListID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetDrillCheckListTaskSequence", p_DrillCheckListIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillDashboard_Result> GetDrillDashboard(Nullable<short> p_CustomerID, Nullable<int> p_MonthDuration, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillDashboard_Result>("GetDrillDashboard", p_CustomerIDParameter, p_MonthDurationParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillDrillStakeholder_Result> GetDrillDrillStakeholder(Nullable<int> p_DrillID, Nullable<bool> p_IsObserver, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_IsObserverParameter = p_IsObserver.HasValue ?
                new ObjectParameter("p_IsObserver", p_IsObserver) :
                new ObjectParameter("p_IsObserver", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillDrillStakeholder_Result>("GetDrillDrillStakeholder", p_DrillIDParameter, p_IsObserverParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillDrillStakeholderEmployeeAndUsers_Result> GetDrillDrillStakeholderEmployeeAndUsers(Nullable<int> p_DrillID, Nullable<short> p_DrillStakeholderID, string p_LanguageCode)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillStakeholderIDParameter = p_DrillStakeholderID.HasValue ?
                new ObjectParameter("p_DrillStakeholderID", p_DrillStakeholderID) :
                new ObjectParameter("p_DrillStakeholderID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillDrillStakeholderEmployeeAndUsers_Result>("GetDrillDrillStakeholderEmployeeAndUsers", p_DrillIDParameter, p_DrillStakeholderIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetDrillFrequencyReport_Result> GetDrillFrequencyReport(string p_Frequency, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillFrequencyReport_Result>("GetDrillFrequencyReport", p_FrequencyParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillMonthlyCalendarDataYearly_Result> GetDrillMonthlyCalendarDataYearly(Nullable<byte> p_DrillTypeID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillMonthlyCalendarDataYearly_Result>("GetDrillMonthlyCalendarDataYearly", p_DrillTypeIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillProposal_Result> GetDrillProposal(Nullable<int> p_DrillProposalID, Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, Nullable<System.DateTime> p_ProposedDrillDatetime, string p_ProposalRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillProposalIDParameter = p_DrillProposalID.HasValue ?
                new ObjectParameter("p_DrillProposalID", p_DrillProposalID) :
                new ObjectParameter("p_DrillProposalID", typeof(int));
    
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_ProposedDrillDatetimeParameter = p_ProposedDrillDatetime.HasValue ?
                new ObjectParameter("p_ProposedDrillDatetime", p_ProposedDrillDatetime) :
                new ObjectParameter("p_ProposedDrillDatetime", typeof(System.DateTime));
    
            var p_ProposalRemarksParameter = p_ProposalRemarks != null ?
                new ObjectParameter("p_ProposalRemarks", p_ProposalRemarks) :
                new ObjectParameter("p_ProposalRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillProposal_Result>("GetDrillProposal", p_DrillProposalIDParameter, p_DrillIDParameter, p_DrillSetupIDParameter, p_ProposedDrillDatetimeParameter, p_ProposalRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillProposalStatus_Result> GetDrillProposalStatus(Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, Nullable<int> p_DrillProposalID, Nullable<bool> p_IsApproved, Nullable<System.DateTime> p_ActionDatetime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_DrillProposalIDParameter = p_DrillProposalID.HasValue ?
                new ObjectParameter("p_DrillProposalID", p_DrillProposalID) :
                new ObjectParameter("p_DrillProposalID", typeof(int));
    
            var p_IsApprovedParameter = p_IsApproved.HasValue ?
                new ObjectParameter("p_IsApproved", p_IsApproved) :
                new ObjectParameter("p_IsApproved", typeof(bool));
    
            var p_ActionDatetimeParameter = p_ActionDatetime.HasValue ?
                new ObjectParameter("p_ActionDatetime", p_ActionDatetime) :
                new ObjectParameter("p_ActionDatetime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillProposalStatus_Result>("GetDrillProposalStatus", p_DrillIDParameter, p_DrillSetupIDParameter, p_DrillProposalIDParameter, p_IsApprovedParameter, p_ActionDatetimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDrillReport(Nullable<int> p_DrillID, Nullable<byte> p_DrillTypeID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDrillReport", p_DrillIDParameter, p_DrillTypeIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillSetupAndDrillDataCheckListTaskGrid_Result> GetDrillSetupAndDrillDataCheckListTaskGrid(Nullable<int> p_DrillID, Nullable<short> p_DrillStakeholderID, Nullable<int> p_EmployeeID, string p_UserEmail, Nullable<int> p_LocationID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillStakeholderIDParameter = p_DrillStakeholderID.HasValue ?
                new ObjectParameter("p_DrillStakeholderID", p_DrillStakeholderID) :
                new ObjectParameter("p_DrillStakeholderID", typeof(short));
    
            var p_EmployeeIDParameter = p_EmployeeID.HasValue ?
                new ObjectParameter("p_EmployeeID", p_EmployeeID) :
                new ObjectParameter("p_EmployeeID", typeof(int));
    
            var p_UserEmailParameter = p_UserEmail != null ?
                new ObjectParameter("p_UserEmail", p_UserEmail) :
                new ObjectParameter("p_UserEmail", typeof(string));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillSetupAndDrillDataCheckListTaskGrid_Result>("GetDrillSetupAndDrillDataCheckListTaskGrid", p_DrillIDParameter, p_DrillStakeholderIDParameter, p_EmployeeIDParameter, p_UserEmailParameter, p_LocationIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillStakeholder_Result> GetDrillStakeholder(Nullable<short> p_DrillStakeholderID, Nullable<short> p_DepartmentID, string p_EmailID, string p_DrillStakeholderName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillStakeholderIDParameter = p_DrillStakeholderID.HasValue ?
                new ObjectParameter("p_DrillStakeholderID", p_DrillStakeholderID) :
                new ObjectParameter("p_DrillStakeholderID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_EmailIDParameter = p_EmailID != null ?
                new ObjectParameter("p_EmailID", p_EmailID) :
                new ObjectParameter("p_EmailID", typeof(string));
    
            var p_DrillStakeholderNameParameter = p_DrillStakeholderName != null ?
                new ObjectParameter("p_DrillStakeholderName", p_DrillStakeholderName) :
                new ObjectParameter("p_DrillStakeholderName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillStakeholder_Result>("GetDrillStakeholder", p_DrillStakeholderIDParameter, p_DepartmentIDParameter, p_EmailIDParameter, p_DrillStakeholderNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetDrillStatusReport(Nullable<byte> p_DrillTypeID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_Frequency, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDrillStatusReport", p_DrillTypeIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_EndDateParameter, p_FrequencyParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetDrillType_Result> GetDrillType(Nullable<byte> p_DrillTypeID, string p_DrillTypeName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillTypeNameParameter = p_DrillTypeName != null ?
                new ObjectParameter("p_DrillTypeName", p_DrillTypeName) :
                new ObjectParameter("p_DrillTypeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrillType_Result>("GetDrillType", p_DrillTypeIDParameter, p_DrillTypeNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetEmergencyInspectionGrid(Nullable<int> p_InspectionID, string p_InspectionType, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_DateType, Nullable<int> p_SearchStatusID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmergencyInspectionGrid", p_InspectionIDParameter, p_InspectionTypeParameter, p_CustomerIDParameter, p_LocationIDParameter, p_ControllerIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateTypeParameter, p_SearchStatusIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetEmergencyInspectionGridOnline(Nullable<int> p_InspectionID, string p_InspectionType, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_DateType, Nullable<int> p_SearchStatusID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmergencyInspectionGridOnline", p_InspectionIDParameter, p_InspectionTypeParameter, p_CustomerIDParameter, p_LocationIDParameter, p_ControllerIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateTypeParameter, p_SearchStatusIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetEmployee_Result> GetEmployee(Nullable<int> p_EmployeeID, string p_HRMSEmployeeID, string p_Salutation, string p_FirstName, string p_MiddleName, string p_LastName, string p_Gender, string p_ShortCode, string p_FullEmployeeAddress, string p_TelephoneNo, string p_CellNo, string p_ExtensionNo, string p_Email, string p_EmergencyContact1, string p_EmergencyContact2, Nullable<int> p_ReportingEmployeeID, Nullable<System.DateTime> p_AppointmentDate, Nullable<System.DateTime> p_LeavingDate, Nullable<short> p_DesignationID, Nullable<short> p_DepartmentID, Nullable<int> p_EndUserID, Nullable<System.DateTime> p_DOB, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EmployeeIDParameter = p_EmployeeID.HasValue ?
                new ObjectParameter("p_EmployeeID", p_EmployeeID) :
                new ObjectParameter("p_EmployeeID", typeof(int));
    
            var p_HRMSEmployeeIDParameter = p_HRMSEmployeeID != null ?
                new ObjectParameter("p_HRMSEmployeeID", p_HRMSEmployeeID) :
                new ObjectParameter("p_HRMSEmployeeID", typeof(string));
    
            var p_SalutationParameter = p_Salutation != null ?
                new ObjectParameter("p_Salutation", p_Salutation) :
                new ObjectParameter("p_Salutation", typeof(string));
    
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("p_FirstName", p_FirstName) :
                new ObjectParameter("p_FirstName", typeof(string));
    
            var p_MiddleNameParameter = p_MiddleName != null ?
                new ObjectParameter("p_MiddleName", p_MiddleName) :
                new ObjectParameter("p_MiddleName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("p_LastName", p_LastName) :
                new ObjectParameter("p_LastName", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_ShortCodeParameter = p_ShortCode != null ?
                new ObjectParameter("p_ShortCode", p_ShortCode) :
                new ObjectParameter("p_ShortCode", typeof(string));
    
            var p_FullEmployeeAddressParameter = p_FullEmployeeAddress != null ?
                new ObjectParameter("p_FullEmployeeAddress", p_FullEmployeeAddress) :
                new ObjectParameter("p_FullEmployeeAddress", typeof(string));
    
            var p_TelephoneNoParameter = p_TelephoneNo != null ?
                new ObjectParameter("p_TelephoneNo", p_TelephoneNo) :
                new ObjectParameter("p_TelephoneNo", typeof(string));
    
            var p_CellNoParameter = p_CellNo != null ?
                new ObjectParameter("p_CellNo", p_CellNo) :
                new ObjectParameter("p_CellNo", typeof(string));
    
            var p_ExtensionNoParameter = p_ExtensionNo != null ?
                new ObjectParameter("p_ExtensionNo", p_ExtensionNo) :
                new ObjectParameter("p_ExtensionNo", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_EmergencyContact1Parameter = p_EmergencyContact1 != null ?
                new ObjectParameter("p_EmergencyContact1", p_EmergencyContact1) :
                new ObjectParameter("p_EmergencyContact1", typeof(string));
    
            var p_EmergencyContact2Parameter = p_EmergencyContact2 != null ?
                new ObjectParameter("p_EmergencyContact2", p_EmergencyContact2) :
                new ObjectParameter("p_EmergencyContact2", typeof(string));
    
            var p_ReportingEmployeeIDParameter = p_ReportingEmployeeID.HasValue ?
                new ObjectParameter("p_ReportingEmployeeID", p_ReportingEmployeeID) :
                new ObjectParameter("p_ReportingEmployeeID", typeof(int));
    
            var p_AppointmentDateParameter = p_AppointmentDate.HasValue ?
                new ObjectParameter("p_AppointmentDate", p_AppointmentDate) :
                new ObjectParameter("p_AppointmentDate", typeof(System.DateTime));
    
            var p_LeavingDateParameter = p_LeavingDate.HasValue ?
                new ObjectParameter("p_LeavingDate", p_LeavingDate) :
                new ObjectParameter("p_LeavingDate", typeof(System.DateTime));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_DOBParameter = p_DOB.HasValue ?
                new ObjectParameter("p_DOB", p_DOB) :
                new ObjectParameter("p_DOB", typeof(System.DateTime));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployee_Result>("GetEmployee", p_EmployeeIDParameter, p_HRMSEmployeeIDParameter, p_SalutationParameter, p_FirstNameParameter, p_MiddleNameParameter, p_LastNameParameter, p_GenderParameter, p_ShortCodeParameter, p_FullEmployeeAddressParameter, p_TelephoneNoParameter, p_CellNoParameter, p_ExtensionNoParameter, p_EmailParameter, p_EmergencyContact1Parameter, p_EmergencyContact2Parameter, p_ReportingEmployeeIDParameter, p_AppointmentDateParameter, p_LeavingDateParameter, p_DesignationIDParameter, p_DepartmentIDParameter, p_EndUserIDParameter, p_DOBParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDDL_Result> GetEmployeeDDL(string p_EmployeeName, string p_LanguageCode, Nullable<short> p_CustomerID)
        {
            var p_EmployeeNameParameter = p_EmployeeName != null ?
                new ObjectParameter("p_EmployeeName", p_EmployeeName) :
                new ObjectParameter("p_EmployeeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDDL_Result>("GetEmployeeDDL", p_EmployeeNameParameter, p_LanguageCodeParameter, p_CustomerIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDDLCourseWise_Result> GetEmployeeDDLCourseWise(string p_SquadCode, Nullable<int> p_TrainingID, Nullable<short> p_CourseID, string p_LanguageCode)
        {
            var p_SquadCodeParameter = p_SquadCode != null ?
                new ObjectParameter("p_SquadCode", p_SquadCode) :
                new ObjectParameter("p_SquadCode", typeof(string));
    
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDDLCourseWise_Result>("GetEmployeeDDLCourseWise", p_SquadCodeParameter, p_TrainingIDParameter, p_CourseIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeWiseTrainingReport_Result> GetEmployeeWiseTrainingReport(Nullable<int> p_EmployeeID, Nullable<System.DateTime> p_EffectiveFromDateTime, Nullable<System.DateTime> p_EffectiveTillDateTime, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EmployeeIDParameter = p_EmployeeID.HasValue ?
                new ObjectParameter("p_EmployeeID", p_EmployeeID) :
                new ObjectParameter("p_EmployeeID", typeof(int));
    
            var p_EffectiveFromDateTimeParameter = p_EffectiveFromDateTime.HasValue ?
                new ObjectParameter("p_EffectiveFromDateTime", p_EffectiveFromDateTime) :
                new ObjectParameter("p_EffectiveFromDateTime", typeof(System.DateTime));
    
            var p_EffectiveTillDateTimeParameter = p_EffectiveTillDateTime.HasValue ?
                new ObjectParameter("p_EffectiveTillDateTime", p_EffectiveTillDateTime) :
                new ObjectParameter("p_EffectiveTillDateTime", typeof(System.DateTime));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeWiseTrainingReport_Result>("GetEmployeeWiseTrainingReport", p_EmployeeIDParameter, p_EffectiveFromDateTimeParameter, p_EffectiveTillDateTimeParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetEmpolyeeCourseFrequencyWiseYearlyReport_Result> GetEmpolyeeCourseFrequencyWiseYearlyReport(string p_Frequency, Nullable<short> p_CourseID, Nullable<short> p_DesignationID, Nullable<System.DateTime> p_EffectiveFromDateTime, Nullable<System.DateTime> p_EffectiveTillDateTime, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_EffectiveFromDateTimeParameter = p_EffectiveFromDateTime.HasValue ?
                new ObjectParameter("p_EffectiveFromDateTime", p_EffectiveFromDateTime) :
                new ObjectParameter("p_EffectiveFromDateTime", typeof(System.DateTime));
    
            var p_EffectiveTillDateTimeParameter = p_EffectiveTillDateTime.HasValue ?
                new ObjectParameter("p_EffectiveTillDateTime", p_EffectiveTillDateTime) :
                new ObjectParameter("p_EffectiveTillDateTime", typeof(System.DateTime));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpolyeeCourseFrequencyWiseYearlyReport_Result>("GetEmpolyeeCourseFrequencyWiseYearlyReport", p_FrequencyParameter, p_CourseIDParameter, p_DesignationIDParameter, p_EffectiveFromDateTimeParameter, p_EffectiveTillDateTimeParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetEndUser_Result> GetEndUser(Nullable<int> p_EndUserID, string p_LoginID, string p_FirstName, string p_MiddleName, string p_LastName, string p_Name, string p_LanguageCode, Nullable<decimal> p_UTCOffset, string p_DefaultModuleCode, string p_Gender, string p_EmailID, string p_UserRoleName, Nullable<bool> p_IsChildResult, Nullable<bool> p_IsCustomerUser)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LoginIDParameter = p_LoginID != null ?
                new ObjectParameter("p_LoginID", p_LoginID) :
                new ObjectParameter("p_LoginID", typeof(string));
    
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("p_FirstName", p_FirstName) :
                new ObjectParameter("p_FirstName", typeof(string));
    
            var p_MiddleNameParameter = p_MiddleName != null ?
                new ObjectParameter("p_MiddleName", p_MiddleName) :
                new ObjectParameter("p_MiddleName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("p_LastName", p_LastName) :
                new ObjectParameter("p_LastName", typeof(string));
    
            var p_NameParameter = p_Name != null ?
                new ObjectParameter("p_Name", p_Name) :
                new ObjectParameter("p_Name", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_DefaultModuleCodeParameter = p_DefaultModuleCode != null ?
                new ObjectParameter("p_DefaultModuleCode", p_DefaultModuleCode) :
                new ObjectParameter("p_DefaultModuleCode", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_EmailIDParameter = p_EmailID != null ?
                new ObjectParameter("p_EmailID", p_EmailID) :
                new ObjectParameter("p_EmailID", typeof(string));
    
            var p_UserRoleNameParameter = p_UserRoleName != null ?
                new ObjectParameter("p_UserRoleName", p_UserRoleName) :
                new ObjectParameter("p_UserRoleName", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_IsCustomerUserParameter = p_IsCustomerUser.HasValue ?
                new ObjectParameter("p_IsCustomerUser", p_IsCustomerUser) :
                new ObjectParameter("p_IsCustomerUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEndUser_Result>("GetEndUser", p_EndUserIDParameter, p_LoginIDParameter, p_FirstNameParameter, p_MiddleNameParameter, p_LastNameParameter, p_NameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_DefaultModuleCodeParameter, p_GenderParameter, p_EmailIDParameter, p_UserRoleNameParameter, p_IsChildResultParameter, p_IsCustomerUserParameter);
        }
    
        public virtual ObjectResult<GetEndUserName_Result> GetEndUserName(string p_UserName, string p_UserRoleName)
        {
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("p_UserName", p_UserName) :
                new ObjectParameter("p_UserName", typeof(string));
    
            var p_UserRoleNameParameter = p_UserRoleName != null ?
                new ObjectParameter("p_UserRoleName", p_UserRoleName) :
                new ObjectParameter("p_UserRoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEndUserName_Result>("GetEndUserName", p_UserNameParameter, p_UserRoleNameParameter);
        }
    
        public virtual ObjectResult<GetEntityDetails_Result> GetEntityDetails(Nullable<long> p_AuditLogID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_AuditLogIDParameter = p_AuditLogID.HasValue ?
                new ObjectParameter("p_AuditLogID", p_AuditLogID) :
                new ObjectParameter("p_AuditLogID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEntityDetails_Result>("GetEntityDetails", p_AuditLogIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetEstimatedTime(Nullable<int> p_ContractID, Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint, ObjectParameter p_Duration)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEstimatedTime", p_ContractIDParameter, p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter, p_Duration);
        }
    
        public virtual ObjectResult<GetFeedbackParameter_Result> GetFeedbackParameter(Nullable<short> p_FeedbackParameterID, string p_AttributeType, string p_FeedbackParameterName, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FeedbackParameterIDParameter = p_FeedbackParameterID.HasValue ?
                new ObjectParameter("p_FeedbackParameterID", p_FeedbackParameterID) :
                new ObjectParameter("p_FeedbackParameterID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_FeedbackParameterNameParameter = p_FeedbackParameterName != null ?
                new ObjectParameter("p_FeedbackParameterName", p_FeedbackParameterName) :
                new ObjectParameter("p_FeedbackParameterName", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeedbackParameter_Result>("GetFeedbackParameter", p_FeedbackParameterIDParameter, p_AttributeTypeParameter, p_FeedbackParameterNameParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetFeedbackParameterMapping_Result> GetFeedbackParameterMapping(Nullable<short> p_CourseID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeedbackParameterMapping_Result>("GetFeedbackParameterMapping", p_CourseIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetFileInfo(Nullable<long> pFileID, ObjectParameter pFileRelativePath, ObjectParameter pFileName, ObjectParameter pFileType, ObjectParameter pFileRemarks, ObjectParameter pCreatedDateTime, ObjectParameter pLastAccessDateTime, ObjectParameter pAccessCount, ObjectParameter pTxnTimestamp)
        {
            var pFileIDParameter = pFileID.HasValue ?
                new ObjectParameter("pFileID", pFileID) :
                new ObjectParameter("pFileID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileInfo", pFileIDParameter, pFileRelativePath, pFileName, pFileType, pFileRemarks, pCreatedDateTime, pLastAccessDateTime, pAccessCount, pTxnTimestamp);
        }
    
        public virtual int GetFilesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFilesInfo");
        }
    
        public virtual ObjectResult<GetFRASCheckList_Result> GetFRASCheckList(Nullable<short> p_FRASChecklistID, string p_FRASInspectionType, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASChecklistIDParameter = p_FRASChecklistID.HasValue ?
                new ObjectParameter("p_FRASChecklistID", p_FRASChecklistID) :
                new ObjectParameter("p_FRASChecklistID", typeof(short));
    
            var p_FRASInspectionTypeParameter = p_FRASInspectionType != null ?
                new ObjectParameter("p_FRASInspectionType", p_FRASInspectionType) :
                new ObjectParameter("p_FRASInspectionType", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFRASCheckList_Result>("GetFRASCheckList", p_FRASChecklistIDParameter, p_FRASInspectionTypeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetFRASCheckListTask_Result> GetFRASCheckListTask(Nullable<int> p_FRASCheckListTaskID, Nullable<short> p_FRASCheckListID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, string p_AttributeType, string p_FRASInspectionType, Nullable<short> p_CheckListTaskGroupID, Nullable<bool> p_MarkIfTrue, Nullable<int> p_MarkIfTrueValue, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<bool> p_IsChildResult, Nullable<int> p_LocationID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASCheckListTaskIDParameter = p_FRASCheckListTaskID.HasValue ?
                new ObjectParameter("p_FRASCheckListTaskID", p_FRASCheckListTaskID) :
                new ObjectParameter("p_FRASCheckListTaskID", typeof(int));
    
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_FRASInspectionTypeParameter = p_FRASInspectionType != null ?
                new ObjectParameter("p_FRASInspectionType", p_FRASInspectionType) :
                new ObjectParameter("p_FRASInspectionType", typeof(string));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_MarkIfTrueParameter = p_MarkIfTrue.HasValue ?
                new ObjectParameter("p_MarkIfTrue", p_MarkIfTrue) :
                new ObjectParameter("p_MarkIfTrue", typeof(bool));
    
            var p_MarkIfTrueValueParameter = p_MarkIfTrueValue.HasValue ?
                new ObjectParameter("p_MarkIfTrueValue", p_MarkIfTrueValue) :
                new ObjectParameter("p_MarkIfTrueValue", typeof(int));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFRASCheckListTask_Result>("GetFRASCheckListTask", p_FRASCheckListTaskIDParameter, p_FRASCheckListIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_AttributeTypeParameter, p_FRASInspectionTypeParameter, p_CheckListTaskGroupIDParameter, p_MarkIfTrueParameter, p_MarkIfTrueValueParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_IsChildResultParameter, p_LocationIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetFRASCheckListTaskSequence(Nullable<short> p_FRASCheckListID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetFRASCheckListTaskSequence", p_FRASCheckListIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetFRASDashboardLocationDetails_Result> GetFRASDashboardLocationDetails(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFRASDashboardLocationDetails_Result>("GetFRASDashboardLocationDetails", p_MonthDurationParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetFRASDashboardRiskLevelStatus_Result> GetFRASDashboardRiskLevelStatus(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFRASDashboardRiskLevelStatus_Result>("GetFRASDashboardRiskLevelStatus", p_MonthDurationParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetFRASDashboardYearlyRiskLevelStatus_Result> GetFRASDashboardYearlyRiskLevelStatus(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFRASDashboardYearlyRiskLevelStatus_Result>("GetFRASDashboardYearlyRiskLevelStatus", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetFRASInspection(Nullable<int> p_FRASInspectionID, Nullable<short> p_FRASCheckListID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_ExecutedByUser, string p_FRASInspectionType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<byte> p_RiskLevelID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_ENDUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ExecutedByUserParameter = p_ExecutedByUser.HasValue ?
                new ObjectParameter("p_ExecutedByUser", p_ExecutedByUser) :
                new ObjectParameter("p_ExecutedByUser", typeof(int));
    
            var p_FRASInspectionTypeParameter = p_FRASInspectionType != null ?
                new ObjectParameter("p_FRASInspectionType", p_FRASInspectionType) :
                new ObjectParameter("p_FRASInspectionType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_ENDUserIDParameter = p_ENDUserID.HasValue ?
                new ObjectParameter("p_ENDUserID", p_ENDUserID) :
                new ObjectParameter("p_ENDUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFRASInspection", p_FRASInspectionIDParameter, p_FRASCheckListIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_ExecutedByUserParameter, p_FRASInspectionTypeParameter, p_StartDateParameter, p_EndDateParameter, p_RiskLevelIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_ENDUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetFRASInspectionTask_Result> GetFRASInspectionTask(Nullable<int> p_FRASInspectionID, Nullable<short> p_FRASCheckListID, Nullable<int> p_LocationID, Nullable<int> p_ExecutedByUser, Nullable<System.DateTime> p_ExecutedDateTime, string p_Remarks, Nullable<System.DateTime> p_CheckINDateTime, Nullable<System.DateTime> p_CheckOUTDateTime, Nullable<bool> p_IsMobileDeviceUsed, Nullable<bool> p_IsLocationLocatedWithQRCode, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<byte> p_ActualRiskLevelID, Nullable<double> p_ActualMarkValue, Nullable<byte> p_RiskLevelID, Nullable<double> p_MarkValue, Nullable<int> p_ResolvedBy, Nullable<System.DateTime> p_ResolutionDateTime, string p_ResolutionRemarks, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosedDateTime, string p_ClosureRemarks, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_ENDUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ExecutedByUserParameter = p_ExecutedByUser.HasValue ?
                new ObjectParameter("p_ExecutedByUser", p_ExecutedByUser) :
                new ObjectParameter("p_ExecutedByUser", typeof(int));
    
            var p_ExecutedDateTimeParameter = p_ExecutedDateTime.HasValue ?
                new ObjectParameter("p_ExecutedDateTime", p_ExecutedDateTime) :
                new ObjectParameter("p_ExecutedDateTime", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CheckINDateTimeParameter = p_CheckINDateTime.HasValue ?
                new ObjectParameter("p_CheckINDateTime", p_CheckINDateTime) :
                new ObjectParameter("p_CheckINDateTime", typeof(System.DateTime));
    
            var p_CheckOUTDateTimeParameter = p_CheckOUTDateTime.HasValue ?
                new ObjectParameter("p_CheckOUTDateTime", p_CheckOUTDateTime) :
                new ObjectParameter("p_CheckOUTDateTime", typeof(System.DateTime));
    
            var p_IsMobileDeviceUsedParameter = p_IsMobileDeviceUsed.HasValue ?
                new ObjectParameter("p_IsMobileDeviceUsed", p_IsMobileDeviceUsed) :
                new ObjectParameter("p_IsMobileDeviceUsed", typeof(bool));
    
            var p_IsLocationLocatedWithQRCodeParameter = p_IsLocationLocatedWithQRCode.HasValue ?
                new ObjectParameter("p_IsLocationLocatedWithQRCode", p_IsLocationLocatedWithQRCode) :
                new ObjectParameter("p_IsLocationLocatedWithQRCode", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_ActualRiskLevelIDParameter = p_ActualRiskLevelID.HasValue ?
                new ObjectParameter("p_ActualRiskLevelID", p_ActualRiskLevelID) :
                new ObjectParameter("p_ActualRiskLevelID", typeof(byte));
    
            var p_ActualMarkValueParameter = p_ActualMarkValue.HasValue ?
                new ObjectParameter("p_ActualMarkValue", p_ActualMarkValue) :
                new ObjectParameter("p_ActualMarkValue", typeof(double));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_MarkValueParameter = p_MarkValue.HasValue ?
                new ObjectParameter("p_MarkValue", p_MarkValue) :
                new ObjectParameter("p_MarkValue", typeof(double));
    
            var p_ResolvedByParameter = p_ResolvedBy.HasValue ?
                new ObjectParameter("p_ResolvedBy", p_ResolvedBy) :
                new ObjectParameter("p_ResolvedBy", typeof(int));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_ResolutionRemarksParameter = p_ResolutionRemarks != null ?
                new ObjectParameter("p_ResolutionRemarks", p_ResolutionRemarks) :
                new ObjectParameter("p_ResolutionRemarks", typeof(string));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosedDateTimeParameter = p_ClosedDateTime.HasValue ?
                new ObjectParameter("p_ClosedDateTime", p_ClosedDateTime) :
                new ObjectParameter("p_ClosedDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_ENDUserIDParameter = p_ENDUserID.HasValue ?
                new ObjectParameter("p_ENDUserID", p_ENDUserID) :
                new ObjectParameter("p_ENDUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFRASInspectionTask_Result>("GetFRASInspectionTask", p_FRASInspectionIDParameter, p_FRASCheckListIDParameter, p_LocationIDParameter, p_ExecutedByUserParameter, p_ExecutedDateTimeParameter, p_RemarksParameter, p_CheckINDateTimeParameter, p_CheckOUTDateTimeParameter, p_IsMobileDeviceUsedParameter, p_IsLocationLocatedWithQRCodeParameter, p_LongitudeParameter, p_LatitudeParameter, p_ActualRiskLevelIDParameter, p_ActualMarkValueParameter, p_RiskLevelIDParameter, p_MarkValueParameter, p_ResolvedByParameter, p_ResolutionDateTimeParameter, p_ResolutionRemarksParameter, p_ClosedByParameter, p_ClosedDateTimeParameter, p_ClosureRemarksParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_ENDUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetFRASReport(Nullable<int> p_FRASInspectionID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFRASReport", p_FRASInspectionIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetGeneralSchedulerCategory(Nullable<short> p_CustomerID, string p_InspectionType, string p_Frequency, Nullable<byte> p_ServiceLevelID, Nullable<int> p_Duration, Nullable<System.DateTime> p_StartDate, Nullable<int> p_DayDuration, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_DurationParameter = p_Duration.HasValue ?
                new ObjectParameter("p_Duration", p_Duration) :
                new ObjectParameter("p_Duration", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_DayDurationParameter = p_DayDuration.HasValue ?
                new ObjectParameter("p_DayDuration", p_DayDuration) :
                new ObjectParameter("p_DayDuration", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetGeneralSchedulerCategory", p_CustomerIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_ServiceLevelIDParameter, p_DurationParameter, p_StartDateParameter, p_DayDurationParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetGeneralSchedulerDates_Result> GetGeneralSchedulerDates(Nullable<short> p_CategoryID, string p_Frequency, Nullable<System.DateTime> p_ScheduleStartDate, Nullable<int> p_Duration, Nullable<int> p_InspectionDuration, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ScheduleStartDateParameter = p_ScheduleStartDate.HasValue ?
                new ObjectParameter("p_ScheduleStartDate", p_ScheduleStartDate) :
                new ObjectParameter("p_ScheduleStartDate", typeof(System.DateTime));
    
            var p_DurationParameter = p_Duration.HasValue ?
                new ObjectParameter("p_Duration", p_Duration) :
                new ObjectParameter("p_Duration", typeof(int));
    
            var p_InspectionDurationParameter = p_InspectionDuration.HasValue ?
                new ObjectParameter("p_InspectionDuration", p_InspectionDuration) :
                new ObjectParameter("p_InspectionDuration", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGeneralSchedulerDates_Result>("GetGeneralSchedulerDates", p_CategoryIDParameter, p_FrequencyParameter, p_ScheduleStartDateParameter, p_DurationParameter, p_InspectionDurationParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetGeneralScheduleView(string p_InspectionType, string p_Frequency, Nullable<short> p_CustomerID, string p_DateType, Nullable<System.DateTime> p_FromDate, Nullable<System.DateTime> p_ToDate, Nullable<int> p_SearchStatusID, Nullable<int> p_PageIndex, Nullable<int> p_PageCount, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_FromDateParameter = p_FromDate.HasValue ?
                new ObjectParameter("p_FromDate", p_FromDate) :
                new ObjectParameter("p_FromDate", typeof(System.DateTime));
    
            var p_ToDateParameter = p_ToDate.HasValue ?
                new ObjectParameter("p_ToDate", p_ToDate) :
                new ObjectParameter("p_ToDate", typeof(System.DateTime));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageCountParameter = p_PageCount.HasValue ?
                new ObjectParameter("p_PageCount", p_PageCount) :
                new ObjectParameter("p_PageCount", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetGeneralScheduleView", p_InspectionTypeParameter, p_FrequencyParameter, p_CustomerIDParameter, p_DateTypeParameter, p_FromDateParameter, p_ToDateParameter, p_SearchStatusIDParameter, p_PageIndexParameter, p_PageCountParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetHasCustomerLocations_Result> GetHasCustomerLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHasCustomerLocations_Result>("GetHasCustomerLocations");
        }
    
        public virtual int GetIncident(Nullable<int> p_IncidentID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_IncidentTitle, Nullable<byte> p_IncidentTypeID, Nullable<short> p_IncidentCategoryID, Nullable<byte> p_IncidentSeverityLevel, Nullable<byte> p_IncidentPriorityLevel, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<int> p_RecordedBy, Nullable<System.DateTime> p_RecordedDateTime, string p_ReportedBy, Nullable<System.DateTime> p_ReportedDateTime, string p_BriefDescription, string p_DetailedDescription, Nullable<int> p_IncidentOwner, Nullable<byte> p_IncidentStatus, string p_IncidentTag, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosureDateTime, string p_ClosureRemarks, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_IncidentTitleParameter = p_IncidentTitle != null ?
                new ObjectParameter("p_IncidentTitle", p_IncidentTitle) :
                new ObjectParameter("p_IncidentTitle", typeof(string));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_IncidentSeverityLevelParameter = p_IncidentSeverityLevel.HasValue ?
                new ObjectParameter("p_IncidentSeverityLevel", p_IncidentSeverityLevel) :
                new ObjectParameter("p_IncidentSeverityLevel", typeof(byte));
    
            var p_IncidentPriorityLevelParameter = p_IncidentPriorityLevel.HasValue ?
                new ObjectParameter("p_IncidentPriorityLevel", p_IncidentPriorityLevel) :
                new ObjectParameter("p_IncidentPriorityLevel", typeof(byte));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_RecordedByParameter = p_RecordedBy.HasValue ?
                new ObjectParameter("p_RecordedBy", p_RecordedBy) :
                new ObjectParameter("p_RecordedBy", typeof(int));
    
            var p_RecordedDateTimeParameter = p_RecordedDateTime.HasValue ?
                new ObjectParameter("p_RecordedDateTime", p_RecordedDateTime) :
                new ObjectParameter("p_RecordedDateTime", typeof(System.DateTime));
    
            var p_ReportedByParameter = p_ReportedBy != null ?
                new ObjectParameter("p_ReportedBy", p_ReportedBy) :
                new ObjectParameter("p_ReportedBy", typeof(string));
    
            var p_ReportedDateTimeParameter = p_ReportedDateTime.HasValue ?
                new ObjectParameter("p_ReportedDateTime", p_ReportedDateTime) :
                new ObjectParameter("p_ReportedDateTime", typeof(System.DateTime));
    
            var p_BriefDescriptionParameter = p_BriefDescription != null ?
                new ObjectParameter("p_BriefDescription", p_BriefDescription) :
                new ObjectParameter("p_BriefDescription", typeof(string));
    
            var p_DetailedDescriptionParameter = p_DetailedDescription != null ?
                new ObjectParameter("p_DetailedDescription", p_DetailedDescription) :
                new ObjectParameter("p_DetailedDescription", typeof(string));
    
            var p_IncidentOwnerParameter = p_IncidentOwner.HasValue ?
                new ObjectParameter("p_IncidentOwner", p_IncidentOwner) :
                new ObjectParameter("p_IncidentOwner", typeof(int));
    
            var p_IncidentStatusParameter = p_IncidentStatus.HasValue ?
                new ObjectParameter("p_IncidentStatus", p_IncidentStatus) :
                new ObjectParameter("p_IncidentStatus", typeof(byte));
    
            var p_IncidentTagParameter = p_IncidentTag != null ?
                new ObjectParameter("p_IncidentTag", p_IncidentTag) :
                new ObjectParameter("p_IncidentTag", typeof(string));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIncident", p_IncidentIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_IncidentTitleParameter, p_IncidentTypeIDParameter, p_IncidentCategoryIDParameter, p_IncidentSeverityLevelParameter, p_IncidentPriorityLevelParameter, p_StartDateParameter, p_EndDateParameter, p_RecordedByParameter, p_RecordedDateTimeParameter, p_ReportedByParameter, p_ReportedDateTimeParameter, p_BriefDescriptionParameter, p_DetailedDescriptionParameter, p_IncidentOwnerParameter, p_IncidentStatusParameter, p_IncidentTagParameter, p_ClosedByParameter, p_ClosureDateTimeParameter, p_ClosureRemarksParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetIncidentAllDataReport(Nullable<int> p_IncidentID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<byte> p_IncidentTypeID, Nullable<short> p_IncidentCategoryID, Nullable<byte> p_IncidentSeverityLevel, Nullable<byte> p_IncidentPriorityLevel, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<byte> p_IncidentStatus, string p_FirstResponse, string p_IncidentTag, Nullable<int> p_TimeFlag, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_IncidentSeverityLevelParameter = p_IncidentSeverityLevel.HasValue ?
                new ObjectParameter("p_IncidentSeverityLevel", p_IncidentSeverityLevel) :
                new ObjectParameter("p_IncidentSeverityLevel", typeof(byte));
    
            var p_IncidentPriorityLevelParameter = p_IncidentPriorityLevel.HasValue ?
                new ObjectParameter("p_IncidentPriorityLevel", p_IncidentPriorityLevel) :
                new ObjectParameter("p_IncidentPriorityLevel", typeof(byte));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_IncidentStatusParameter = p_IncidentStatus.HasValue ?
                new ObjectParameter("p_IncidentStatus", p_IncidentStatus) :
                new ObjectParameter("p_IncidentStatus", typeof(byte));
    
            var p_FirstResponseParameter = p_FirstResponse != null ?
                new ObjectParameter("p_FirstResponse", p_FirstResponse) :
                new ObjectParameter("p_FirstResponse", typeof(string));
    
            var p_IncidentTagParameter = p_IncidentTag != null ?
                new ObjectParameter("p_IncidentTag", p_IncidentTag) :
                new ObjectParameter("p_IncidentTag", typeof(string));
    
            var p_TimeFlagParameter = p_TimeFlag.HasValue ?
                new ObjectParameter("p_TimeFlag", p_TimeFlag) :
                new ObjectParameter("p_TimeFlag", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIncidentAllDataReport", p_IncidentIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_IncidentTypeIDParameter, p_IncidentCategoryIDParameter, p_IncidentSeverityLevelParameter, p_IncidentPriorityLevelParameter, p_StartDateParameter, p_EndDateParameter, p_IncidentStatusParameter, p_FirstResponseParameter, p_IncidentTagParameter, p_TimeFlagParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentCategory_Result> GetIncidentCategory(Nullable<short> p_IncidentCategoryID, Nullable<short> p_ParentCategoryID, Nullable<bool> p_IsLeaf, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_ParentCategoryIDParameter = p_ParentCategoryID.HasValue ?
                new ObjectParameter("p_ParentCategoryID", p_ParentCategoryID) :
                new ObjectParameter("p_ParentCategoryID", typeof(short));
    
            var p_IsLeafParameter = p_IsLeaf.HasValue ?
                new ObjectParameter("p_IsLeaf", p_IsLeaf) :
                new ObjectParameter("p_IsLeaf", typeof(bool));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentCategory_Result>("GetIncidentCategory", p_IncidentCategoryIDParameter, p_ParentCategoryIDParameter, p_IsLeafParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentCause_Result> GetIncidentCause(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentCause_Result>("GetIncidentCause", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentCauseAll_Result> GetIncidentCauseAll(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentCauseAll_Result>("GetIncidentCauseAll", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentCauseType_Result> GetIncidentCauseType(Nullable<byte> p_IncidentCauseTypeID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCauseTypeIDParameter = p_IncidentCauseTypeID.HasValue ?
                new ObjectParameter("p_IncidentCauseTypeID", p_IncidentCauseTypeID) :
                new ObjectParameter("p_IncidentCauseTypeID", typeof(byte));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentCauseType_Result>("GetIncidentCauseType", p_IncidentCauseTypeIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentCheckList_Result> GetIncidentCheckList(Nullable<short> p_IncidentChecklistID, Nullable<byte> p_IncidentTypeID, Nullable<short> p_DepartmentID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentChecklistIDParameter = p_IncidentChecklistID.HasValue ?
                new ObjectParameter("p_IncidentChecklistID", p_IncidentChecklistID) :
                new ObjectParameter("p_IncidentChecklistID", typeof(short));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentCheckList_Result>("GetIncidentCheckList", p_IncidentChecklistIDParameter, p_IncidentTypeIDParameter, p_DepartmentIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentCheckListTask_Result> GetIncidentCheckListTask(Nullable<int> p_IncidentCheckListTaskID, Nullable<short> p_IncidentCheckListID, Nullable<short> p_CheckListTaskGroupID, Nullable<byte> p_IncidentTypeID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, string p_AttributeType, Nullable<short> p_TextLength, Nullable<byte> p_FloatPrecision, Nullable<byte> p_FloatScale, Nullable<short> p_UOMID, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCheckListTaskIDParameter = p_IncidentCheckListTaskID.HasValue ?
                new ObjectParameter("p_IncidentCheckListTaskID", p_IncidentCheckListTaskID) :
                new ObjectParameter("p_IncidentCheckListTaskID", typeof(int));
    
            var p_IncidentCheckListIDParameter = p_IncidentCheckListID.HasValue ?
                new ObjectParameter("p_IncidentCheckListID", p_IncidentCheckListID) :
                new ObjectParameter("p_IncidentCheckListID", typeof(short));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_TextLengthParameter = p_TextLength.HasValue ?
                new ObjectParameter("p_TextLength", p_TextLength) :
                new ObjectParameter("p_TextLength", typeof(short));
    
            var p_FloatPrecisionParameter = p_FloatPrecision.HasValue ?
                new ObjectParameter("p_FloatPrecision", p_FloatPrecision) :
                new ObjectParameter("p_FloatPrecision", typeof(byte));
    
            var p_FloatScaleParameter = p_FloatScale.HasValue ?
                new ObjectParameter("p_FloatScale", p_FloatScale) :
                new ObjectParameter("p_FloatScale", typeof(byte));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentCheckListTask_Result>("GetIncidentCheckListTask", p_IncidentCheckListTaskIDParameter, p_IncidentCheckListIDParameter, p_CheckListTaskGroupIDParameter, p_IncidentTypeIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_AttributeTypeParameter, p_TextLengthParameter, p_FloatPrecisionParameter, p_FloatScaleParameter, p_UOMIDParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetIncidentCheckListTaskSequence(Nullable<short> p_IncidentCheckListID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCheckListIDParameter = p_IncidentCheckListID.HasValue ?
                new ObjectParameter("p_IncidentCheckListID", p_IncidentCheckListID) :
                new ObjectParameter("p_IncidentCheckListID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetIncidentCheckListTaskSequence", p_IncidentCheckListIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardDataYearlySnapshot_Result> GetIncidentDashboardDataYearlySnapshot(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardDataYearlySnapshot_Result>("GetIncidentDashboardDataYearlySnapshot", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardIncidentCategoryData_Result> GetIncidentDashboardIncidentCategoryData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardIncidentCategoryData_Result>("GetIncidentDashboardIncidentCategoryData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardIncidentTypeData_Result> GetIncidentDashboardIncidentTypeData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardIncidentTypeData_Result>("GetIncidentDashboardIncidentTypeData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardOwnerData_Result> GetIncidentDashboardOwnerData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardOwnerData_Result>("GetIncidentDashboardOwnerData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardPrioriyLevelData_Result> GetIncidentDashboardPrioriyLevelData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardPrioriyLevelData_Result>("GetIncidentDashboardPrioriyLevelData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardSeverityLevelData_Result> GetIncidentDashboardSeverityLevelData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardSeverityLevelData_Result>("GetIncidentDashboardSeverityLevelData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardSolutionTimeData_Result> GetIncidentDashboardSolutionTimeData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardSolutionTimeData_Result>("GetIncidentDashboardSolutionTimeData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentDashboardStatusData_Result> GetIncidentDashboardStatusData(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDashboardStatusData_Result>("GetIncidentDashboardStatusData", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentImpact_Result> GetIncidentImpact(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentImpact_Result>("GetIncidentImpact", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentImpactAll_Result> GetIncidentImpactAll(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentImpactAll_Result>("GetIncidentImpactAll", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentImpactType_Result> GetIncidentImpactType(Nullable<byte> p_IncidentImpactTypeID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentImpactTypeIDParameter = p_IncidentImpactTypeID.HasValue ?
                new ObjectParameter("p_IncidentImpactTypeID", p_IncidentImpactTypeID) :
                new ObjectParameter("p_IncidentImpactTypeID", typeof(byte));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentImpactType_Result>("GetIncidentImpactType", p_IncidentImpactTypeIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentLocationChecklisttaskwiseReport_Result> GetIncidentLocationChecklisttaskwiseReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CheckListTaskGroupID, string p_AttributeType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentLocationChecklisttaskwiseReport_Result>("GetIncidentLocationChecklisttaskwiseReport", p_CustomerIDParameter, p_LocationIDParameter, p_CheckListTaskGroupIDParameter, p_AttributeTypeParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentLocationWiseYearlyReport_Result> GetIncidentLocationWiseYearlyReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CheckListTaskGroupID, string p_AttributeType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentLocationWiseYearlyReport_Result>("GetIncidentLocationWiseYearlyReport", p_CustomerIDParameter, p_LocationIDParameter, p_CheckListTaskGroupIDParameter, p_AttributeTypeParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetIncidentReport(Nullable<int> p_IncidentID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<byte> p_IncidentTypeID, Nullable<short> p_IncidentCategoryID, Nullable<byte> p_IncidentSeverityLevel, Nullable<byte> p_IncidentPriorityLevel, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<byte> p_IncidentStatus, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_IncidentSeverityLevelParameter = p_IncidentSeverityLevel.HasValue ?
                new ObjectParameter("p_IncidentSeverityLevel", p_IncidentSeverityLevel) :
                new ObjectParameter("p_IncidentSeverityLevel", typeof(byte));
    
            var p_IncidentPriorityLevelParameter = p_IncidentPriorityLevel.HasValue ?
                new ObjectParameter("p_IncidentPriorityLevel", p_IncidentPriorityLevel) :
                new ObjectParameter("p_IncidentPriorityLevel", typeof(byte));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_IncidentStatusParameter = p_IncidentStatus.HasValue ?
                new ObjectParameter("p_IncidentStatus", p_IncidentStatus) :
                new ObjectParameter("p_IncidentStatus", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIncidentReport", p_IncidentIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_IncidentTypeIDParameter, p_IncidentCategoryIDParameter, p_IncidentSeverityLevelParameter, p_IncidentPriorityLevelParameter, p_StartDateParameter, p_EndDateParameter, p_IncidentStatusParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentStatus_Result> GetIncidentStatus(Nullable<byte> p_IncidentStatusID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentStatusIDParameter = p_IncidentStatusID.HasValue ?
                new ObjectParameter("p_IncidentStatusID", p_IncidentStatusID) :
                new ObjectParameter("p_IncidentStatusID", typeof(byte));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentStatus_Result>("GetIncidentStatus", p_IncidentStatusIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<string> GetIncidentTag(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetIncidentTag", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentType_Result> GetIncidentType(Nullable<byte> p_IncidentTypeID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentType_Result>("GetIncidentType", p_IncidentTypeIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentWithCheckList_Result> GetIncidentWithCheckList(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentWithCheckList_Result>("GetIncidentWithCheckList", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetIncidentYearlyReportData_Result> GetIncidentYearlyReportData(Nullable<int> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_AttributeID, Nullable<int> p_Year, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_AttributeIDParameter = p_AttributeID.HasValue ?
                new ObjectParameter("p_AttributeID", p_AttributeID) :
                new ObjectParameter("p_AttributeID", typeof(int));
    
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentYearlyReportData_Result>("GetIncidentYearlyReportData", p_CustomerIDParameter, p_LocationIDParameter, p_AttributeIDParameter, p_YearParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionAdditionalCheckList_Result> GetInspectionAdditionalCheckList(Nullable<short> p_CheckListID, Nullable<short> p_CheckListInstanceNo)
        {
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_CheckListInstanceNoParameter = p_CheckListInstanceNo.HasValue ?
                new ObjectParameter("p_CheckListInstanceNo", p_CheckListInstanceNo) :
                new ObjectParameter("p_CheckListInstanceNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionAdditionalCheckList_Result>("GetInspectionAdditionalCheckList", p_CheckListIDParameter, p_CheckListInstanceNoParameter);
        }
    
        public virtual ObjectResult<GetInspectionCheckListTaskDeviationListGrid_Result> GetInspectionCheckListTaskDeviationListGrid(Nullable<int> p_InspectionID, Nullable<int> p_ObjectInstanceID, Nullable<long> p_ObjectInstanceInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectInstanceInspectionIDParameter = p_ObjectInstanceInspectionID.HasValue ?
                new ObjectParameter("p_ObjectInstanceInspectionID", p_ObjectInstanceInspectionID) :
                new ObjectParameter("p_ObjectInstanceInspectionID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionCheckListTaskDeviationListGrid_Result>("GetInspectionCheckListTaskDeviationListGrid", p_InspectionIDParameter, p_ObjectInstanceIDParameter, p_ObjectInstanceInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionCheckListTaskDeviationListGridResolution_Result> GetInspectionCheckListTaskDeviationListGridResolution(Nullable<int> p_InspectionID, Nullable<int> p_ObjectInstanceID, Nullable<long> p_ObjectInstanceInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectInstanceInspectionIDParameter = p_ObjectInstanceInspectionID.HasValue ?
                new ObjectParameter("p_ObjectInstanceInspectionID", p_ObjectInstanceInspectionID) :
                new ObjectParameter("p_ObjectInstanceInspectionID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionCheckListTaskDeviationListGridResolution_Result>("GetInspectionCheckListTaskDeviationListGridResolution", p_InspectionIDParameter, p_ObjectInstanceIDParameter, p_ObjectInstanceInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetInspectionDates(Nullable<int> p_ContractID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_ScheduleStartDate, Nullable<int> p_ScheduleDuration, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ScheduleStartDateParameter = p_ScheduleStartDate.HasValue ?
                new ObjectParameter("p_ScheduleStartDate", p_ScheduleStartDate) :
                new ObjectParameter("p_ScheduleStartDate", typeof(System.DateTime));
    
            var p_ScheduleDurationParameter = p_ScheduleDuration.HasValue ?
                new ObjectParameter("p_ScheduleDuration", p_ScheduleDuration) :
                new ObjectParameter("p_ScheduleDuration", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetInspectionDates", p_ContractIDParameter, p_LocationIDParameter, p_ScheduleStartDateParameter, p_ScheduleDurationParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionDeviationResolutionListGrid_Result> GetInspectionDeviationResolutionListGrid(Nullable<long> p_DeviationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationIDParameter = p_DeviationID.HasValue ?
                new ObjectParameter("p_DeviationID", p_DeviationID) :
                new ObjectParameter("p_DeviationID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionDeviationResolutionListGrid_Result>("GetInspectionDeviationResolutionListGrid", p_DeviationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionGrid_Result> GetInspectionGrid(Nullable<int> p_InspectionID, string p_InspectionType, string p_Frequency, Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_ObjectID, string p_ObjectSerialNumber, Nullable<int> p_ControllerID, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_CheckINDateTime, Nullable<System.DateTime> p_CheckOUTDateTime, Nullable<System.DateTime> p_CancelDateTime, string p_Remarks, Nullable<int> p_SearchStatusID, Nullable<int> p_PageIndex, Nullable<int> p_PageCount, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_ObjectSerialNumberParameter = p_ObjectSerialNumber != null ?
                new ObjectParameter("p_ObjectSerialNumber", p_ObjectSerialNumber) :
                new ObjectParameter("p_ObjectSerialNumber", typeof(string));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_CheckINDateTimeParameter = p_CheckINDateTime.HasValue ?
                new ObjectParameter("p_CheckINDateTime", p_CheckINDateTime) :
                new ObjectParameter("p_CheckINDateTime", typeof(System.DateTime));
    
            var p_CheckOUTDateTimeParameter = p_CheckOUTDateTime.HasValue ?
                new ObjectParameter("p_CheckOUTDateTime", p_CheckOUTDateTime) :
                new ObjectParameter("p_CheckOUTDateTime", typeof(System.DateTime));
    
            var p_CancelDateTimeParameter = p_CancelDateTime.HasValue ?
                new ObjectParameter("p_CancelDateTime", p_CancelDateTime) :
                new ObjectParameter("p_CancelDateTime", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageCountParameter = p_PageCount.HasValue ?
                new ObjectParameter("p_PageCount", p_PageCount) :
                new ObjectParameter("p_PageCount", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionGrid_Result>("GetInspectionGrid", p_InspectionIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_CategoryIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_ObjectIDParameter, p_ObjectSerialNumberParameter, p_ControllerIDParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_CheckINDateTimeParameter, p_CheckOUTDateTimeParameter, p_CancelDateTimeParameter, p_RemarksParameter, p_SearchStatusIDParameter, p_PageIndexParameter, p_PageCountParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionGridResolution_Result> GetInspectionGridResolution(Nullable<int> p_InspectionID, string p_InspectionType, string p_Frequency, Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_ObjectID, string p_ObjectSerialNumber, Nullable<short> p_DeviationTypeID, Nullable<int> p_ControllerID, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_CheckINDateTime, Nullable<System.DateTime> p_CheckOUTDateTime, Nullable<System.DateTime> p_CancelDateTime, string p_Remarks, Nullable<int> p_SearchStatusID, Nullable<byte> p_RiskLevelID, string p_ResolutionTimeUnit, Nullable<short> p_DepartmentID, Nullable<int> p_PageIndex, Nullable<int> p_PageCount, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_ObjectSerialNumberParameter = p_ObjectSerialNumber != null ?
                new ObjectParameter("p_ObjectSerialNumber", p_ObjectSerialNumber) :
                new ObjectParameter("p_ObjectSerialNumber", typeof(string));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_CheckINDateTimeParameter = p_CheckINDateTime.HasValue ?
                new ObjectParameter("p_CheckINDateTime", p_CheckINDateTime) :
                new ObjectParameter("p_CheckINDateTime", typeof(System.DateTime));
    
            var p_CheckOUTDateTimeParameter = p_CheckOUTDateTime.HasValue ?
                new ObjectParameter("p_CheckOUTDateTime", p_CheckOUTDateTime) :
                new ObjectParameter("p_CheckOUTDateTime", typeof(System.DateTime));
    
            var p_CancelDateTimeParameter = p_CancelDateTime.HasValue ?
                new ObjectParameter("p_CancelDateTime", p_CancelDateTime) :
                new ObjectParameter("p_CancelDateTime", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_ResolutionTimeUnitParameter = p_ResolutionTimeUnit != null ?
                new ObjectParameter("p_ResolutionTimeUnit", p_ResolutionTimeUnit) :
                new ObjectParameter("p_ResolutionTimeUnit", typeof(string));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageCountParameter = p_PageCount.HasValue ?
                new ObjectParameter("p_PageCount", p_PageCount) :
                new ObjectParameter("p_PageCount", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionGridResolution_Result>("GetInspectionGridResolution", p_InspectionIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_CategoryIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_ObjectIDParameter, p_ObjectSerialNumberParameter, p_DeviationTypeIDParameter, p_ControllerIDParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_CheckINDateTimeParameter, p_CheckOUTDateTimeParameter, p_CancelDateTimeParameter, p_RemarksParameter, p_SearchStatusIDParameter, p_RiskLevelIDParameter, p_ResolutionTimeUnitParameter, p_DepartmentIDParameter, p_PageIndexParameter, p_PageCountParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionLocationLevelDeviation_Result> GetInspectionLocationLevelDeviation(Nullable<int> p_InspectionID, Nullable<int> p_LocationID, Nullable<short> p_DeviationTypeID, string p_DeviationDescription, Nullable<System.DateTime> p_DeviationDateTime, string p_DeviationRemarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_DeviationDescriptionParameter = p_DeviationDescription != null ?
                new ObjectParameter("p_DeviationDescription", p_DeviationDescription) :
                new ObjectParameter("p_DeviationDescription", typeof(string));
    
            var p_DeviationDateTimeParameter = p_DeviationDateTime.HasValue ?
                new ObjectParameter("p_DeviationDateTime", p_DeviationDateTime) :
                new ObjectParameter("p_DeviationDateTime", typeof(System.DateTime));
    
            var p_DeviationRemarksParameter = p_DeviationRemarks != null ?
                new ObjectParameter("p_DeviationRemarks", p_DeviationRemarks) :
                new ObjectParameter("p_DeviationRemarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionLocationLevelDeviation_Result>("GetInspectionLocationLevelDeviation", p_InspectionIDParameter, p_LocationIDParameter, p_DeviationTypeIDParameter, p_DeviationDescriptionParameter, p_DeviationDateTimeParameter, p_DeviationRemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionStatusForObjectDataReport_Result> GetInspectionStatusForObjectDataReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionStatusForObjectDataReport_Result>("GetInspectionStatusForObjectDataReport", p_CustomerIDParameter, p_LocationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionStatusReport_Result> GetInspectionStatusReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_MonthDate, Nullable<int> p_YearDate, string p_InspectionType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_MonthDateParameter = p_MonthDate != null ?
                new ObjectParameter("p_MonthDate", p_MonthDate) :
                new ObjectParameter("p_MonthDate", typeof(string));
    
            var p_YearDateParameter = p_YearDate.HasValue ?
                new ObjectParameter("p_YearDate", p_YearDate) :
                new ObjectParameter("p_YearDate", typeof(int));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionStatusReport_Result>("GetInspectionStatusReport", p_CustomerIDParameter, p_LocationIDParameter, p_MonthDateParameter, p_YearDateParameter, p_InspectionTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetInspectionStatusSnapshotReport_Result> GetInspectionStatusSnapshotReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<short> p_CheckListID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInspectionStatusSnapshotReport_Result>("GetInspectionStatusSnapshotReport", p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_CheckListIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetInventoryReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_QRCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_QRCodeParameter = p_QRCode != null ?
                new ObjectParameter("p_QRCode", p_QRCode) :
                new ObjectParameter("p_QRCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetInventoryReport", p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_QRCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetLeafAndParentComboLevelCategory(Nullable<int> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLeafAndParentComboLevelCategory", p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLeafLevelContractCategory_Result> GetLeafLevelContractCategory(Nullable<short> p_CategoryID, Nullable<int> p_ContractID, Nullable<int> p_LocationID)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeafLevelContractCategory_Result>("GetLeafLevelContractCategory", p_CategoryIDParameter, p_ContractIDParameter, p_LocationIDParameter);
        }
    
        public virtual ObjectResult<GetLeafLevelContractCategoryWithoutLocation_Result> GetLeafLevelContractCategoryWithoutLocation(Nullable<short> p_CategoryID)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeafLevelContractCategoryWithoutLocation_Result>("GetLeafLevelContractCategoryWithoutLocation", p_CategoryIDParameter);
        }
    
        public virtual int GetLeafLevelContractLocation(Nullable<int> p_ContractID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLeafLevelContractLocation", p_ContractIDParameter);
        }
    
        public virtual int GetLeafLocationByCategory(Nullable<short> p_CategoryID)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLeafLocationByCategory", p_CategoryIDParameter);
        }
    
        public virtual ObjectResult<GetLocation_Result> GetLocation(Nullable<int> p_LocationID, string p_LocationName, Nullable<int> p_ParentLocationID, Nullable<bool> p_HasCustomers, Nullable<double> p_Longitude, Nullable<double> p_Latitude, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ParentLocationIDParameter = p_ParentLocationID.HasValue ?
                new ObjectParameter("p_ParentLocationID", p_ParentLocationID) :
                new ObjectParameter("p_ParentLocationID", typeof(int));
    
            var p_HasCustomersParameter = p_HasCustomers.HasValue ?
                new ObjectParameter("p_HasCustomers", p_HasCustomers) :
                new ObjectParameter("p_HasCustomers", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocation_Result>("GetLocation", p_LocationIDParameter, p_LocationNameParameter, p_ParentLocationIDParameter, p_HasCustomersParameter, p_LongitudeParameter, p_LatitudeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationByMonthResolutionDashboard_Result> GetLocationDeviationByMonthResolutionDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationByMonthResolutionDashboard_Result>("GetLocationDeviationByMonthResolutionDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationByResolutionDurationDashboard_Result> GetLocationDeviationByResolutionDurationDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationByResolutionDurationDashboard_Result>("GetLocationDeviationByResolutionDurationDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationByRiskLevelDashboard_Result> GetLocationDeviationByRiskLevelDashboard(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationByRiskLevelDashboard_Result>("GetLocationDeviationByRiskLevelDashboard", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationGridResolution_Result> GetLocationDeviationGridResolution(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_DeviationTypeID, Nullable<int> p_ControllerID, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<int> p_SearchStatusID, Nullable<byte> p_RiskLevelID, string p_ResolutionTimeUnit, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_ResolutionTimeUnitParameter = p_ResolutionTimeUnit != null ?
                new ObjectParameter("p_ResolutionTimeUnit", p_ResolutionTimeUnit) :
                new ObjectParameter("p_ResolutionTimeUnit", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationGridResolution_Result>("GetLocationDeviationGridResolution", p_CustomerIDParameter, p_LocationIDParameter, p_DeviationTypeIDParameter, p_ControllerIDParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_SearchStatusIDParameter, p_RiskLevelIDParameter, p_ResolutionTimeUnitParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationList_Result> GetLocationDeviationList(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_DeviationTypeID, Nullable<int> p_ControllerID, string p_DateType, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<int> p_SearchStatusID, Nullable<byte> p_RiskLevelID, string p_ResolutionTimeUnit, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_SearchStatusIDParameter = p_SearchStatusID.HasValue ?
                new ObjectParameter("p_SearchStatusID", p_SearchStatusID) :
                new ObjectParameter("p_SearchStatusID", typeof(int));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_ResolutionTimeUnitParameter = p_ResolutionTimeUnit != null ?
                new ObjectParameter("p_ResolutionTimeUnit", p_ResolutionTimeUnit) :
                new ObjectParameter("p_ResolutionTimeUnit", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationList_Result>("GetLocationDeviationList", p_CustomerIDParameter, p_LocationIDParameter, p_DeviationTypeIDParameter, p_ControllerIDParameter, p_DateTypeParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_SearchStatusIDParameter, p_RiskLevelIDParameter, p_ResolutionTimeUnitParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationListGridResolution_Result> GetLocationDeviationListGridResolution(Nullable<int> p_ObjectInstanceID, Nullable<int> p_LocationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationListGridResolution_Result>("GetLocationDeviationListGridResolution", p_ObjectInstanceIDParameter, p_LocationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationDeviationResolutionListGrid_Result> GetLocationDeviationResolutionListGrid(Nullable<long> p_DeviationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationIDParameter = p_DeviationID.HasValue ?
                new ObjectParameter("p_DeviationID", p_DeviationID) :
                new ObjectParameter("p_DeviationID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationDeviationResolutionListGrid_Result>("GetLocationDeviationResolutionListGrid", p_DeviationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetLocationQRReport_Result> GetLocationQRReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_QRCode, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<short> p_NotInUseReasonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_QRCodeParameter = p_QRCode != null ?
                new ObjectParameter("p_QRCode", p_QRCode) :
                new ObjectParameter("p_QRCode", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationQRReport_Result>("GetLocationQRReport", p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_QRCodeParameter, p_StartDateParameter, p_EndDateParameter, p_NotInUseReasonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetMEIObjectInstanceGrid_Result> GetMEIObjectInstanceGrid(Nullable<int> p_ObjectInstanceID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMEIObjectInstanceGrid_Result>("GetMEIObjectInstanceGrid", p_ObjectInstanceIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetMEmergencyInspectionCheckListTaskDeviationListGrid_Result> GetMEmergencyInspectionCheckListTaskDeviationListGrid(Nullable<int> p_ObjectInstanceID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMEmergencyInspectionCheckListTaskDeviationListGrid_Result>("GetMEmergencyInspectionCheckListTaskDeviationListGrid", p_ObjectInstanceIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetMenu_Result> GetMenu(string p_MenuCode, string p_MenuName, Nullable<byte> p_Sequence, string p_ParentMenuCode, string p_ModuleCode)
        {
            var p_MenuCodeParameter = p_MenuCode != null ?
                new ObjectParameter("p_MenuCode", p_MenuCode) :
                new ObjectParameter("p_MenuCode", typeof(string));
    
            var p_MenuNameParameter = p_MenuName != null ?
                new ObjectParameter("p_MenuName", p_MenuName) :
                new ObjectParameter("p_MenuName", typeof(string));
    
            var p_SequenceParameter = p_Sequence.HasValue ?
                new ObjectParameter("p_Sequence", p_Sequence) :
                new ObjectParameter("p_Sequence", typeof(byte));
    
            var p_ParentMenuCodeParameter = p_ParentMenuCode != null ?
                new ObjectParameter("p_ParentMenuCode", p_ParentMenuCode) :
                new ObjectParameter("p_ParentMenuCode", typeof(string));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenu_Result>("GetMenu", p_MenuCodeParameter, p_MenuNameParameter, p_SequenceParameter, p_ParentMenuCodeParameter, p_ModuleCodeParameter);
        }
    
        public virtual ObjectResult<GetMenuAndScreenData_Result> GetMenuAndScreenData(Nullable<short> pUserRoleID, string pModuleCode)
        {
            var pUserRoleIDParameter = pUserRoleID.HasValue ?
                new ObjectParameter("pUserRoleID", pUserRoleID) :
                new ObjectParameter("pUserRoleID", typeof(short));
    
            var pModuleCodeParameter = pModuleCode != null ?
                new ObjectParameter("pModuleCode", pModuleCode) :
                new ObjectParameter("pModuleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuAndScreenData_Result>("GetMenuAndScreenData", pUserRoleIDParameter, pModuleCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetModuleSequence(string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetModuleSequence", p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetMonthlyControllerPerformance_Result> GetMonthlyControllerPerformance(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, Nullable<int> p_Year, string p_MonthDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_MonthDateParameter = p_MonthDate != null ?
                new ObjectParameter("p_MonthDate", p_MonthDate) :
                new ObjectParameter("p_MonthDate", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlyControllerPerformance_Result>("GetMonthlyControllerPerformance", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_YearParameter, p_MonthDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetMonthlySnapshotByMonthlyDay_Result> GetMonthlySnapshotByMonthlyDay(Nullable<int> p_TrainingID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_Date, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlySnapshotByMonthlyDay_Result>("GetMonthlySnapshotByMonthlyDay", p_TrainingIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetMonthlySnapshotDataYearly_Result> GetMonthlySnapshotDataYearly(string p_Frequency, Nullable<short> p_CourseID, Nullable<short> p_DesignationID, Nullable<int> p_TrainingID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlySnapshotDataYearly_Result>("GetMonthlySnapshotDataYearly", p_FrequencyParameter, p_CourseIDParameter, p_DesignationIDParameter, p_TrainingIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetNotInUseReason_Result> GetNotInUseReason(Nullable<short> p_NotInUseReasonID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotInUseReason_Result>("GetNotInUseReason", p_NotInUseReasonIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetNotScheduledLeafLevelContractLocation(Nullable<int> p_ContractID, Nullable<short> p_CategoryID)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNotScheduledLeafLevelContractLocation", p_ContractIDParameter, p_CategoryIDParameter);
        }
    
        public virtual ObjectResult<GetObject_Result> GetObject(Nullable<short> p_ObjectID, string p_ObjectName, Nullable<short> p_CategoryID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_ObjectNameParameter = p_ObjectName != null ?
                new ObjectParameter("p_ObjectName", p_ObjectName) :
                new ObjectParameter("p_ObjectName", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetObject_Result>("GetObject", p_ObjectIDParameter, p_ObjectNameParameter, p_CategoryIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetObjectDataFile_Result> GetObjectDataFile(Nullable<int> p_LocationID)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetObjectDataFile_Result>("GetObjectDataFile", p_LocationIDParameter);
        }
    
        public virtual ObjectResult<GetObjectInstance_Result> GetObjectInstance(Nullable<int> p_ObjectInstanceID, Nullable<short> p_ObjectID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_DateType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_SerialNumber, Nullable<short> p_ObjectSequence, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<short> p_NotInUseReasonID, string p_SourceRefID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("p_SerialNumber", p_SerialNumber) :
                new ObjectParameter("p_SerialNumber", typeof(string));
    
            var p_ObjectSequenceParameter = p_ObjectSequence.HasValue ?
                new ObjectParameter("p_ObjectSequence", p_ObjectSequence) :
                new ObjectParameter("p_ObjectSequence", typeof(short));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetObjectInstance_Result>("GetObjectInstance", p_ObjectInstanceIDParameter, p_ObjectIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_DateTypeParameter, p_StartDateParameter, p_EndDateParameter, p_SerialNumberParameter, p_ObjectSequenceParameter, p_LongitudeParameter, p_LatitudeParameter, p_NotInUseReasonIDParameter, p_SourceRefIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetObjectInstanceGrid_Result> GetObjectInstanceGrid(Nullable<int> p_ObjectInstanceID, Nullable<short> p_ObjectID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_DateType, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_SerialNumber, Nullable<short> p_ObjectSequence, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<short> p_NotInUseReasonID, string p_SourceRefID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DateTypeParameter = p_DateType != null ?
                new ObjectParameter("p_DateType", p_DateType) :
                new ObjectParameter("p_DateType", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("p_SerialNumber", p_SerialNumber) :
                new ObjectParameter("p_SerialNumber", typeof(string));
    
            var p_ObjectSequenceParameter = p_ObjectSequence.HasValue ?
                new ObjectParameter("p_ObjectSequence", p_ObjectSequence) :
                new ObjectParameter("p_ObjectSequence", typeof(short));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetObjectInstanceGrid_Result>("GetObjectInstanceGrid", p_ObjectInstanceIDParameter, p_ObjectIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_DateTypeParameter, p_StartDateParameter, p_EndDateParameter, p_SerialNumberParameter, p_ObjectSequenceParameter, p_LongitudeParameter, p_LatitudeParameter, p_NotInUseReasonIDParameter, p_SourceRefIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<string> GetObjectInstanceMake(string p_MakeName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MakeNameParameter = p_MakeName != null ?
                new ObjectParameter("p_MakeName", p_MakeName) :
                new ObjectParameter("p_MakeName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetObjectInstanceMake", p_MakeNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetQRReport_Result> GetQRReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_QRCode, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<short> p_NotInUseReasonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_QRCodeParameter = p_QRCode != null ?
                new ObjectParameter("p_QRCode", p_QRCode) :
                new ObjectParameter("p_QRCode", typeof(string));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQRReport_Result>("GetQRReport", p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_QRCodeParameter, p_StartDateParameter, p_EndDateParameter, p_NotInUseReasonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetRepairComponent_Result> GetRepairComponent(Nullable<short> p_RepairComponentID, string p_RepairComponentName, Nullable<short> p_UOMID, Nullable<bool> p_IsResidentOnDevice, string p_SourceRefID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_RepairComponentIDParameter = p_RepairComponentID.HasValue ?
                new ObjectParameter("p_RepairComponentID", p_RepairComponentID) :
                new ObjectParameter("p_RepairComponentID", typeof(short));
    
            var p_RepairComponentNameParameter = p_RepairComponentName != null ?
                new ObjectParameter("p_RepairComponentName", p_RepairComponentName) :
                new ObjectParameter("p_RepairComponentName", typeof(string));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_IsResidentOnDeviceParameter = p_IsResidentOnDevice.HasValue ?
                new ObjectParameter("p_IsResidentOnDevice", p_IsResidentOnDevice) :
                new ObjectParameter("p_IsResidentOnDevice", typeof(bool));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepairComponent_Result>("GetRepairComponent", p_RepairComponentIDParameter, p_RepairComponentNameParameter, p_UOMIDParameter, p_IsResidentOnDeviceParameter, p_SourceRefIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetRepairComponentWebViewReportData(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRepairComponentWebViewReportData", p_CustomerIDParameter, p_LocationIDParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetReplacementReport_Result> GetReplacementReport(Nullable<int> p_ObjectInstanceID, Nullable<short> p_ObjectID, Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, Nullable<System.DateTime> p_EffectiveFromDate, Nullable<System.DateTime> p_EffectiveTillDate, Nullable<short> p_NotInUseReasonID, string p_ReplacementType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_EffectiveFromDateParameter = p_EffectiveFromDate.HasValue ?
                new ObjectParameter("p_EffectiveFromDate", p_EffectiveFromDate) :
                new ObjectParameter("p_EffectiveFromDate", typeof(System.DateTime));
    
            var p_EffectiveTillDateParameter = p_EffectiveTillDate.HasValue ?
                new ObjectParameter("p_EffectiveTillDate", p_EffectiveTillDate) :
                new ObjectParameter("p_EffectiveTillDate", typeof(System.DateTime));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_ReplacementTypeParameter = p_ReplacementType != null ?
                new ObjectParameter("p_ReplacementType", p_ReplacementType) :
                new ObjectParameter("p_ReplacementType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReplacementReport_Result>("GetReplacementReport", p_ObjectInstanceIDParameter, p_ObjectIDParameter, p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_EffectiveFromDateParameter, p_EffectiveTillDateParameter, p_NotInUseReasonIDParameter, p_ReplacementTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<string> GetResolutionDurationTimeUnitName(Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetResolutionDurationTimeUnitName", p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetRootAndChildCustomerLocationRiskLevel(Nullable<int> p_LocationID)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRootAndChildCustomerLocationRiskLevel", p_LocationIDParameter);
        }
    
        public virtual ObjectResult<GetRootCategory_Result> GetRootCategory(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootCategory_Result>("GetRootCategory", p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetRootDocumentCategory_Result> GetRootDocumentCategory(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootDocumentCategory_Result>("GetRootDocumentCategory", p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetRootIncidentCategory_Result> GetRootIncidentCategory(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootIncidentCategory_Result>("GetRootIncidentCategory", p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetRootLocation_Result> GetRootLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRootLocation_Result>("GetRootLocation");
        }
    
        public virtual int GetSafetyDashboardActiveAssetsPlansDeviations(Nullable<short> p_CategoryID, Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSafetyDashboardActiveAssetsPlansDeviations", p_CategoryIDParameter, p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardDeviatonsChart_Result> GetSafetyDashboardDeviatonsChart(Nullable<short> p_CategoryID, Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardDeviatonsChart_Result>("GetSafetyDashboardDeviatonsChart", p_CategoryIDParameter, p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardEmergencyInspection_Result> GetSafetyDashboardEmergencyInspection(Nullable<short> p_CategoryID, Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardEmergencyInspection_Result>("GetSafetyDashboardEmergencyInspection", p_CategoryIDParameter, p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardInspectionMonthlySnapshot_Result> GetSafetyDashboardInspectionMonthlySnapshot(Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, string p_InspectionType, string p_MonthDate, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_MonthDateParameter = p_MonthDate != null ?
                new ObjectParameter("p_MonthDate", p_MonthDate) :
                new ObjectParameter("p_MonthDate", typeof(string));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardInspectionMonthlySnapshot_Result>("GetSafetyDashboardInspectionMonthlySnapshot", p_CategoryIDParameter, p_CustomerIDParameter, p_InspectionTypeParameter, p_MonthDateParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardInspectionTypeStatus_Result> GetSafetyDashboardInspectionTypeStatus(Nullable<short> p_CategoryID, Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardInspectionTypeStatus_Result>("GetSafetyDashboardInspectionTypeStatus", p_CategoryIDParameter, p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardInspectionWeeklySnapshot_Result> GetSafetyDashboardInspectionWeeklySnapshot(Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, string p_InspectionType, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardInspectionWeeklySnapshot_Result>("GetSafetyDashboardInspectionWeeklySnapshot", p_CategoryIDParameter, p_CustomerIDParameter, p_InspectionTypeParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardLocationrisklevel_Result> GetSafetyDashboardLocationrisklevel(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardLocationrisklevel_Result>("GetSafetyDashboardLocationrisklevel", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardMonthlySnapshot_Result> GetSafetyDashboardMonthlySnapshot(Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, string p_InspectionType, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardMonthlySnapshot_Result>("GetSafetyDashboardMonthlySnapshot", p_CategoryIDParameter, p_CustomerIDParameter, p_InspectionTypeParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardPlansAndAssets_Result> GetSafetyDashboardPlansAndAssets(Nullable<short> p_CategoryID, Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardPlansAndAssets_Result>("GetSafetyDashboardPlansAndAssets", p_CategoryIDParameter, p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardTop5Deviations_Result> GetSafetyDashboardTop5Deviations(Nullable<short> p_CategoryID, Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardTop5Deviations_Result>("GetSafetyDashboardTop5Deviations", p_CategoryIDParameter, p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetSafetyDashboardYearlyChart_Result> GetSafetyDashboardYearlyChart(Nullable<short> p_CategoryID, Nullable<short> p_CustomerID, string p_ModuleCode, string p_ServiceLineCode, Nullable<int> p_Year, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSafetyDashboardYearlyChart_Result>("GetSafetyDashboardYearlyChart", p_CategoryIDParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_YearParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetSchedulerDates(Nullable<int> p_ContractID, string pFrequency, Nullable<System.DateTime> p_ScheduleStartDate, Nullable<int> p_InspectionDuration, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var pFrequencyParameter = pFrequency != null ?
                new ObjectParameter("pFrequency", pFrequency) :
                new ObjectParameter("pFrequency", typeof(string));
    
            var p_ScheduleStartDateParameter = p_ScheduleStartDate.HasValue ?
                new ObjectParameter("p_ScheduleStartDate", p_ScheduleStartDate) :
                new ObjectParameter("p_ScheduleStartDate", typeof(System.DateTime));
    
            var p_InspectionDurationParameter = p_InspectionDuration.HasValue ?
                new ObjectParameter("p_InspectionDuration", p_InspectionDuration) :
                new ObjectParameter("p_InspectionDuration", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchedulerDates", p_ContractIDParameter, pFrequencyParameter, p_ScheduleStartDateParameter, p_InspectionDurationParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetScreen_Result> GetScreen()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScreen_Result>("GetScreen");
        }
    
        public virtual int GetScreenAccess(string p_MenuCode, Nullable<short> p_UserRoleID, string p_ModuleCode)
        {
            var p_MenuCodeParameter = p_MenuCode != null ?
                new ObjectParameter("p_MenuCode", p_MenuCode) :
                new ObjectParameter("p_MenuCode", typeof(string));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScreenAccess", p_MenuCodeParameter, p_UserRoleIDParameter, p_ModuleCodeParameter);
        }
    
        public virtual int GetServiceLevel(Nullable<int> p_ServiceLevelID, string p_ServiceLevel, string p_LanguageCode)
        {
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(int));
    
            var p_ServiceLevelParameter = p_ServiceLevel != null ?
                new ObjectParameter("p_ServiceLevel", p_ServiceLevel) :
                new ObjectParameter("p_ServiceLevel", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetServiceLevel", p_ServiceLevelIDParameter, p_ServiceLevelParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<string> GetSquad(string p_SquadCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_SquadCodeParameter = p_SquadCode != null ?
                new ObjectParameter("p_SquadCode", p_SquadCode) :
                new ObjectParameter("p_SquadCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSquad", p_SquadCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<string> GetSquadForEnroment(string p_Squad, string p_LanguageCode)
        {
            var p_SquadParameter = p_Squad != null ?
                new ObjectParameter("p_Squad", p_Squad) :
                new ObjectParameter("p_Squad", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSquadForEnroment", p_SquadParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetTimeZone_Result> GetTimeZone(string p_LanguageCode)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeZone_Result>("GetTimeZone", p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetTopDeviationByCategory_Result> GetTopDeviationByCategory(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopDeviationByCategory_Result>("GetTopDeviationByCategory", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTopDeviationByMake_Result> GetTopDeviationByMake(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopDeviationByMake_Result>("GetTopDeviationByMake", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTraineeAndEmployee_Result> GetTraineeAndEmployee(Nullable<int> p_TrainingID, string p_LanguageCode)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTraineeAndEmployee_Result>("GetTraineeAndEmployee", p_TrainingIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetTraineeAssessment_Result> GetTraineeAssessment(Nullable<int> p_TrainingID, string p_LanguageCode)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTraineeAssessment_Result>("GetTraineeAssessment", p_TrainingIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetTrainer_Result> GetTrainer(Nullable<int> p_TrainingID, string p_LanguageCode)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainer_Result>("GetTrainer", p_TrainingIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual ObjectResult<GetTraining_Result> GetTraining(Nullable<int> p_TrainingID, Nullable<short> p_CourseID, Nullable<System.DateTime> p_EffectiveFromDateTime, Nullable<System.DateTime> p_EffectiveTillDateTime, Nullable<int> p_CreatedBy, string p_Remarks, Nullable<short> p_CertificationID, Nullable<bool> p_IsExternalTraining, string p_TrainingLocation, string p_SourceRefID, Nullable<bool> p_IsChildResult, string p_Frequency, Nullable<short> p_DesignationID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_EffectiveFromDateTimeParameter = p_EffectiveFromDateTime.HasValue ?
                new ObjectParameter("p_EffectiveFromDateTime", p_EffectiveFromDateTime) :
                new ObjectParameter("p_EffectiveFromDateTime", typeof(System.DateTime));
    
            var p_EffectiveTillDateTimeParameter = p_EffectiveTillDateTime.HasValue ?
                new ObjectParameter("p_EffectiveTillDateTime", p_EffectiveTillDateTime) :
                new ObjectParameter("p_EffectiveTillDateTime", typeof(System.DateTime));
    
            var p_CreatedByParameter = p_CreatedBy.HasValue ?
                new ObjectParameter("p_CreatedBy", p_CreatedBy) :
                new ObjectParameter("p_CreatedBy", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CertificationIDParameter = p_CertificationID.HasValue ?
                new ObjectParameter("p_CertificationID", p_CertificationID) :
                new ObjectParameter("p_CertificationID", typeof(short));
    
            var p_IsExternalTrainingParameter = p_IsExternalTraining.HasValue ?
                new ObjectParameter("p_IsExternalTraining", p_IsExternalTraining) :
                new ObjectParameter("p_IsExternalTraining", typeof(bool));
    
            var p_TrainingLocationParameter = p_TrainingLocation != null ?
                new ObjectParameter("p_TrainingLocation", p_TrainingLocation) :
                new ObjectParameter("p_TrainingLocation", typeof(string));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTraining_Result>("GetTraining", p_TrainingIDParameter, p_CourseIDParameter, p_EffectiveFromDateTimeParameter, p_EffectiveTillDateTimeParameter, p_CreatedByParameter, p_RemarksParameter, p_CertificationIDParameter, p_IsExternalTrainingParameter, p_TrainingLocationParameter, p_SourceRefIDParameter, p_IsChildResultParameter, p_FrequencyParameter, p_DesignationIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingAndEmployeeForEmpolyeeReport_Result> GetTrainingAndEmployeeForEmpolyeeReport(Nullable<System.DateTime> p_EffectiveFromDateTime, Nullable<System.DateTime> p_EffectiveTillDateTime, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EffectiveFromDateTimeParameter = p_EffectiveFromDateTime.HasValue ?
                new ObjectParameter("p_EffectiveFromDateTime", p_EffectiveFromDateTime) :
                new ObjectParameter("p_EffectiveFromDateTime", typeof(System.DateTime));
    
            var p_EffectiveTillDateTimeParameter = p_EffectiveTillDateTime.HasValue ?
                new ObjectParameter("p_EffectiveTillDateTime", p_EffectiveTillDateTime) :
                new ObjectParameter("p_EffectiveTillDateTime", typeof(System.DateTime));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingAndEmployeeForEmpolyeeReport_Result>("GetTrainingAndEmployeeForEmpolyeeReport", p_EffectiveFromDateTimeParameter, p_EffectiveTillDateTimeParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingAssessmentDataCourseTrainerwise_Result> GetTrainingAssessmentDataCourseTrainerwise(Nullable<int> p_TraineeID, string p_TraineeEmail, Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_TraineeEmailParameter = p_TraineeEmail != null ?
                new ObjectParameter("p_TraineeEmail", p_TraineeEmail) :
                new ObjectParameter("p_TraineeEmail", typeof(string));
    
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingAssessmentDataCourseTrainerwise_Result>("GetTrainingAssessmentDataCourseTrainerwise", p_TraineeIDParameter, p_TraineeEmailParameter, p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingCalenderByMonthlyDay_Result> GetTrainingCalenderByMonthlyDay(Nullable<int> p_TrainingID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, Nullable<System.DateTime> p_Date, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingCalenderByMonthlyDay_Result>("GetTrainingCalenderByMonthlyDay", p_TrainingIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_DateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingCalenderDataYearly_Result> GetTrainingCalenderDataYearly(Nullable<int> p_TrainingID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingCalenderDataYearly_Result>("GetTrainingCalenderDataYearly", p_TrainingIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingCoursewise_Result> GetTrainingCoursewise(Nullable<short> p_CourseID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingCoursewise_Result>("GetTrainingCoursewise", p_CourseIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingDashboardARFFTrainingSchedule_Result> GetTrainingDashboardARFFTrainingSchedule(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDashboardARFFTrainingSchedule_Result>("GetTrainingDashboardARFFTrainingSchedule", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingDashboardCertificationAndCourses_Result> GetTrainingDashboardCertificationAndCourses(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDashboardCertificationAndCourses_Result>("GetTrainingDashboardCertificationAndCourses", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int GetTrainingDashboardEmployeesTrainingAndAttendees(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTrainingDashboardEmployeesTrainingAndAttendees", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingDashboardEmployeesWithScore_Result> GetTrainingDashboardEmployeesWithScore(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDashboardEmployeesWithScore_Result>("GetTrainingDashboardEmployeesWithScore", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingDashboardMonthlySnapshot_Result> GetTrainingDashboardMonthlySnapshot(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDashboardMonthlySnapshot_Result>("GetTrainingDashboardMonthlySnapshot", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingDashboardYearlySnapshot_Result> GetTrainingDashboardYearlySnapshot(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDashboardYearlySnapshot_Result>("GetTrainingDashboardYearlySnapshot", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingDashboaredTrainingAndEmployee_Result> GetTrainingDashboaredTrainingAndEmployee(Nullable<int> p_MonthDuration, Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MonthDurationParameter = p_MonthDuration.HasValue ?
                new ObjectParameter("p_MonthDuration", p_MonthDuration) :
                new ObjectParameter("p_MonthDuration", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingDashboaredTrainingAndEmployee_Result>("GetTrainingDashboaredTrainingAndEmployee", p_MonthDurationParameter, p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingEnrolment_Result> GetTrainingEnrolment(Nullable<int> p_TrainingID, string p_SquadCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_SquadCodeParameter = p_SquadCode != null ?
                new ObjectParameter("p_SquadCode", p_SquadCode) :
                new ObjectParameter("p_SquadCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingEnrolment_Result>("GetTrainingEnrolment", p_TrainingIDParameter, p_SquadCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingFeedbackDataCourseTraineewise_Result> GetTrainingFeedbackDataCourseTraineewise(Nullable<int> p_TraineeID, string p_TraineeEmail, Nullable<int> p_TrainingID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_TraineeEmailParameter = p_TraineeEmail != null ?
                new ObjectParameter("p_TraineeEmail", p_TraineeEmail) :
                new ObjectParameter("p_TraineeEmail", typeof(string));
    
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingFeedbackDataCourseTraineewise_Result>("GetTrainingFeedbackDataCourseTraineewise", p_TraineeIDParameter, p_TraineeEmailParameter, p_TrainingIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingForTrainingFeedback_Result> GetTrainingForTrainingFeedback(Nullable<short> p_CourseID, string p_TraineeEmail, Nullable<int> p_TraineeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_TraineeEmailParameter = p_TraineeEmail != null ?
                new ObjectParameter("p_TraineeEmail", p_TraineeEmail) :
                new ObjectParameter("p_TraineeEmail", typeof(string));
    
            var p_TraineeIDParameter = p_TraineeID.HasValue ?
                new ObjectParameter("p_TraineeID", p_TraineeID) :
                new ObjectParameter("p_TraineeID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingForTrainingFeedback_Result>("GetTrainingForTrainingFeedback", p_CourseIDParameter, p_TraineeEmailParameter, p_TraineeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTrainingMaterial_Result> GetTrainingMaterial(Nullable<short> p_CourseID, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainingMaterial_Result>("GetTrainingMaterial", p_CourseIDParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetUOM_Result> GetUOM(Nullable<short> p_UOMID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUOM_Result>("GetUOM", p_UOMIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetUserCustomer_Result> GetUserCustomer(string p_ModuleCode, string p_ServiceLineCode, string p_CustomerName, Nullable<System.DateTime> p_Date, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_CustomerNameParameter = p_CustomerName != null ?
                new ObjectParameter("p_CustomerName", p_CustomerName) :
                new ObjectParameter("p_CustomerName", typeof(string));
    
            var p_DateParameter = p_Date.HasValue ?
                new ObjectParameter("p_Date", p_Date) :
                new ObjectParameter("p_Date", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserCustomer_Result>("GetUserCustomer", p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_CustomerNameParameter, p_DateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetUserCustomerLocation_Result> GetUserCustomerLocation(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, string p_ModuleCode, string p_ServiceLineCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserCustomerLocation_Result>("GetUserCustomerLocation", p_CustomerIDParameter, p_LocationIDParameter, p_ModuleCodeParameter, p_ServiceLineCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> GetUserDepartmentDeviationType(Nullable<int> p_EndUserID, Nullable<short> p_DepartmentID)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("GetUserDepartmentDeviationType", p_EndUserIDParameter, p_DepartmentIDParameter);
        }
    
        public virtual ObjectResult<GetUserLocation_Result> GetUserLocation(Nullable<int> p_UserID, Nullable<int> p_CustomerID, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(int));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserLocation_Result>("GetUserLocation", p_UserIDParameter, p_CustomerIDParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetUserRole_Result> GetUserRole(Nullable<short> p_UserRoleID, string p_UserRoleName)
        {
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(short));
    
            var p_UserRoleNameParameter = p_UserRoleName != null ?
                new ObjectParameter("p_UserRoleName", p_UserRoleName) :
                new ObjectParameter("p_UserRoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRole_Result>("GetUserRole", p_UserRoleIDParameter, p_UserRoleNameParameter);
        }
    
        public virtual ObjectResult<GetVehicleDashboard_Result> GetVehicleDashboard(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleDashboard_Result>("GetVehicleDashboard", p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetWorkCompletionReport_Result> GetWorkCompletionReport(Nullable<short> p_CustomerID, Nullable<int> p_InspectionID, Nullable<int> p_ControllerID, Nullable<System.DateTime> p_StartDateTime, Nullable<System.DateTime> p_EndDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_StartDateTimeParameter = p_StartDateTime.HasValue ?
                new ObjectParameter("p_StartDateTime", p_StartDateTime) :
                new ObjectParameter("p_StartDateTime", typeof(System.DateTime));
    
            var p_EndDateTimeParameter = p_EndDateTime.HasValue ?
                new ObjectParameter("p_EndDateTime", p_EndDateTime) :
                new ObjectParameter("p_EndDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkCompletionReport_Result>("GetWorkCompletionReport", p_CustomerIDParameter, p_InspectionIDParameter, p_ControllerIDParameter, p_StartDateTimeParameter, p_EndDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetWorkingShift_Result> GetWorkingShift(string p_Shiftcode, Nullable<System.TimeSpan> p_StartTime, Nullable<System.TimeSpan> p_EndTime, string p_Remarks, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_ShiftcodeParameter = p_Shiftcode != null ?
                new ObjectParameter("p_Shiftcode", p_Shiftcode) :
                new ObjectParameter("p_Shiftcode", typeof(string));
    
            var p_StartTimeParameter = p_StartTime.HasValue ?
                new ObjectParameter("p_StartTime", p_StartTime) :
                new ObjectParameter("p_StartTime", typeof(System.TimeSpan));
    
            var p_EndTimeParameter = p_EndTime.HasValue ?
                new ObjectParameter("p_EndTime", p_EndTime) :
                new ObjectParameter("p_EndTime", typeof(System.TimeSpan));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkingShift_Result>("GetWorkingShift", p_ShiftcodeParameter, p_StartTimeParameter, p_EndTimeParameter, p_RemarksParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetWorkInspection_Result> GetWorkInspection(Nullable<int> p_Year, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_YearParameter = p_Year.HasValue ?
                new ObjectParameter("p_Year", p_Year) :
                new ObjectParameter("p_Year", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkInspection_Result>("GetWorkInspection", p_YearParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetWorkInspectionChecklistTask_Result> GetWorkInspectionChecklistTask(Nullable<int> p_WorkInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkInspectionIDParameter = p_WorkInspectionID.HasValue ?
                new ObjectParameter("p_WorkInspectionID", p_WorkInspectionID) :
                new ObjectParameter("p_WorkInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkInspectionChecklistTask_Result>("GetWorkInspectionChecklistTask", p_WorkInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetWorkPermit_Result> GetWorkPermit(Nullable<int> p_WorkPermitID, Nullable<short> p_WorkPermitTypeID, string p_WPTitle, Nullable<System.DateTime> p_WPRecordedDateTime, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, Nullable<int> p_WPRecordedBy, string p_RequesterName, string p_RequesterCompany, string p_RequesterMobile, string p_RequesterEmail, Nullable<int> p_Location, Nullable<short> p_CustomerID, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<System.TimeSpan> p_WorkFrom, Nullable<System.TimeSpan> p_WorkTill, Nullable<short> p_PeopleCount, string p_SupervisorName, string p_HelperName, string p_Remarks, string p_SafetyEquipment, string p_ApprovalRemarks, Nullable<int> p_ApprovedBy, Nullable<System.DateTime> p_ApprovedDatetime, string p_CancellationRemarks, Nullable<int> p_CancelledBy, Nullable<System.DateTime> p_CancellationDatetime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitIDParameter = p_WorkPermitID.HasValue ?
                new ObjectParameter("p_WorkPermitID", p_WorkPermitID) :
                new ObjectParameter("p_WorkPermitID", typeof(int));
    
            var p_WorkPermitTypeIDParameter = p_WorkPermitTypeID.HasValue ?
                new ObjectParameter("p_WorkPermitTypeID", p_WorkPermitTypeID) :
                new ObjectParameter("p_WorkPermitTypeID", typeof(short));
    
            var p_WPTitleParameter = p_WPTitle != null ?
                new ObjectParameter("p_WPTitle", p_WPTitle) :
                new ObjectParameter("p_WPTitle", typeof(string));
    
            var p_WPRecordedDateTimeParameter = p_WPRecordedDateTime.HasValue ?
                new ObjectParameter("p_WPRecordedDateTime", p_WPRecordedDateTime) :
                new ObjectParameter("p_WPRecordedDateTime", typeof(System.DateTime));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_WPRecordedByParameter = p_WPRecordedBy.HasValue ?
                new ObjectParameter("p_WPRecordedBy", p_WPRecordedBy) :
                new ObjectParameter("p_WPRecordedBy", typeof(int));
    
            var p_RequesterNameParameter = p_RequesterName != null ?
                new ObjectParameter("p_RequesterName", p_RequesterName) :
                new ObjectParameter("p_RequesterName", typeof(string));
    
            var p_RequesterCompanyParameter = p_RequesterCompany != null ?
                new ObjectParameter("p_RequesterCompany", p_RequesterCompany) :
                new ObjectParameter("p_RequesterCompany", typeof(string));
    
            var p_RequesterMobileParameter = p_RequesterMobile != null ?
                new ObjectParameter("p_RequesterMobile", p_RequesterMobile) :
                new ObjectParameter("p_RequesterMobile", typeof(string));
    
            var p_RequesterEmailParameter = p_RequesterEmail != null ?
                new ObjectParameter("p_RequesterEmail", p_RequesterEmail) :
                new ObjectParameter("p_RequesterEmail", typeof(string));
    
            var p_LocationParameter = p_Location.HasValue ?
                new ObjectParameter("p_Location", p_Location) :
                new ObjectParameter("p_Location", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_WorkFromParameter = p_WorkFrom.HasValue ?
                new ObjectParameter("p_WorkFrom", p_WorkFrom) :
                new ObjectParameter("p_WorkFrom", typeof(System.TimeSpan));
    
            var p_WorkTillParameter = p_WorkTill.HasValue ?
                new ObjectParameter("p_WorkTill", p_WorkTill) :
                new ObjectParameter("p_WorkTill", typeof(System.TimeSpan));
    
            var p_PeopleCountParameter = p_PeopleCount.HasValue ?
                new ObjectParameter("p_PeopleCount", p_PeopleCount) :
                new ObjectParameter("p_PeopleCount", typeof(short));
    
            var p_SupervisorNameParameter = p_SupervisorName != null ?
                new ObjectParameter("p_SupervisorName", p_SupervisorName) :
                new ObjectParameter("p_SupervisorName", typeof(string));
    
            var p_HelperNameParameter = p_HelperName != null ?
                new ObjectParameter("p_HelperName", p_HelperName) :
                new ObjectParameter("p_HelperName", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_SafetyEquipmentParameter = p_SafetyEquipment != null ?
                new ObjectParameter("p_SafetyEquipment", p_SafetyEquipment) :
                new ObjectParameter("p_SafetyEquipment", typeof(string));
    
            var p_ApprovalRemarksParameter = p_ApprovalRemarks != null ?
                new ObjectParameter("p_ApprovalRemarks", p_ApprovalRemarks) :
                new ObjectParameter("p_ApprovalRemarks", typeof(string));
    
            var p_ApprovedByParameter = p_ApprovedBy.HasValue ?
                new ObjectParameter("p_ApprovedBy", p_ApprovedBy) :
                new ObjectParameter("p_ApprovedBy", typeof(int));
    
            var p_ApprovedDatetimeParameter = p_ApprovedDatetime.HasValue ?
                new ObjectParameter("p_ApprovedDatetime", p_ApprovedDatetime) :
                new ObjectParameter("p_ApprovedDatetime", typeof(System.DateTime));
    
            var p_CancellationRemarksParameter = p_CancellationRemarks != null ?
                new ObjectParameter("p_CancellationRemarks", p_CancellationRemarks) :
                new ObjectParameter("p_CancellationRemarks", typeof(string));
    
            var p_CancelledByParameter = p_CancelledBy.HasValue ?
                new ObjectParameter("p_CancelledBy", p_CancelledBy) :
                new ObjectParameter("p_CancelledBy", typeof(int));
    
            var p_CancellationDatetimeParameter = p_CancellationDatetime.HasValue ?
                new ObjectParameter("p_CancellationDatetime", p_CancellationDatetime) :
                new ObjectParameter("p_CancellationDatetime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkPermit_Result>("GetWorkPermit", p_WorkPermitIDParameter, p_WorkPermitTypeIDParameter, p_WPTitleParameter, p_WPRecordedDateTimeParameter, p_StartDateParameter, p_EndDateParameter, p_WPRecordedByParameter, p_RequesterNameParameter, p_RequesterCompanyParameter, p_RequesterMobileParameter, p_RequesterEmailParameter, p_LocationParameter, p_CustomerIDParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_WorkFromParameter, p_WorkTillParameter, p_PeopleCountParameter, p_SupervisorNameParameter, p_HelperNameParameter, p_RemarksParameter, p_SafetyEquipmentParameter, p_ApprovalRemarksParameter, p_ApprovedByParameter, p_ApprovedDatetimeParameter, p_CancellationRemarksParameter, p_CancelledByParameter, p_CancellationDatetimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetWorkPermitType_Result> GetWorkPermitType(Nullable<short> p_WorkPermitTypeID, string p_WorkPermitTypeName, Nullable<bool> p_IsChildResult, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitTypeIDParameter = p_WorkPermitTypeID.HasValue ?
                new ObjectParameter("p_WorkPermitTypeID", p_WorkPermitTypeID) :
                new ObjectParameter("p_WorkPermitTypeID", typeof(short));
    
            var p_WorkPermitTypeNameParameter = p_WorkPermitTypeName != null ?
                new ObjectParameter("p_WorkPermitTypeName", p_WorkPermitTypeName) :
                new ObjectParameter("p_WorkPermitTypeName", typeof(string));
    
            var p_IsChildResultParameter = p_IsChildResult.HasValue ?
                new ObjectParameter("p_IsChildResult", p_IsChildResult) :
                new ObjectParameter("p_IsChildResult", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkPermitType_Result>("GetWorkPermitType", p_WorkPermitTypeIDParameter, p_WorkPermitTypeNameParameter, p_IsChildResultParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<IncidentActionReport_Result> IncidentActionReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<int> p_SFlag, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_SFlagParameter = p_SFlag.HasValue ?
                new ObjectParameter("p_SFlag", p_SFlag) :
                new ObjectParameter("p_SFlag", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IncidentActionReport_Result>("IncidentActionReport", p_CustomerIDParameter, p_LocationIDParameter, p_SFlagParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<IncidentRegistrationDetailsReport_Result> IncidentRegistrationDetailsReport(Nullable<int> p_IncidentID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IncidentRegistrationDetailsReport_Result>("IncidentRegistrationDetailsReport", p_IncidentIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int InsertAuditLog(Nullable<int> p_EndUserID, Nullable<short> p_UserRoleID, Nullable<short> p_ScreenID, string p_ObjectID, string p_OperationType, string p_AccessPoint, ObjectParameter p_AuditLogID, ObjectParameter p_IsAudit)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(short));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_ObjectIDParameter = p_ObjectID != null ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(string));
    
            var p_OperationTypeParameter = p_OperationType != null ?
                new ObjectParameter("p_OperationType", p_OperationType) :
                new ObjectParameter("p_OperationType", typeof(string));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAuditLog", p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_ObjectIDParameter, p_OperationTypeParameter, p_AccessPointParameter, p_AuditLogID, p_IsAudit);
        }
    
        public virtual int InsertUserLeafLocation(Nullable<int> p_EndUserID)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserLeafLocation", p_EndUserIDParameter);
        }
    
        public virtual ObjectResult<InspectionImageReport_Result> InspectionImageReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InspectionImageReport_Result>("InspectionImageReport", p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<InspectionLast5ImageReport_Result> InspectionLast5ImageReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InspectionLast5ImageReport_Result>("InspectionLast5ImageReport", p_CustomerIDParameter, p_LocationIDParameter, p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<MobileDownloadData_Result> MobileDownloadData(Nullable<int> p_EndUserID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserRoleID, string p_Type, Nullable<int> p_backData, Nullable<int> p_NextData)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_backDataParameter = p_backData.HasValue ?
                new ObjectParameter("p_backData", p_backData) :
                new ObjectParameter("p_backData", typeof(int));
    
            var p_NextDataParameter = p_NextData.HasValue ?
                new ObjectParameter("p_NextData", p_NextData) :
                new ObjectParameter("p_NextData", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MobileDownloadData_Result>("MobileDownloadData", p_EndUserIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserRoleIDParameter, p_TypeParameter, p_backDataParameter, p_NextDataParameter);
        }
    
        public virtual ObjectResult<MobileDownloadTransactionData_Result> MobileDownloadTransactionData(Nullable<int> p_EndUserID, string p_DeviceID, string p_DeviceType, string p_LastAccessPoint, string p_RequestID, Nullable<int> p_BackData, Nullable<int> p_NextData)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_DeviceIDParameter = p_DeviceID != null ?
                new ObjectParameter("p_DeviceID", p_DeviceID) :
                new ObjectParameter("p_DeviceID", typeof(string));
    
            var p_DeviceTypeParameter = p_DeviceType != null ?
                new ObjectParameter("p_DeviceType", p_DeviceType) :
                new ObjectParameter("p_DeviceType", typeof(string));
    
            var p_LastAccessPointParameter = p_LastAccessPoint != null ?
                new ObjectParameter("p_LastAccessPoint", p_LastAccessPoint) :
                new ObjectParameter("p_LastAccessPoint", typeof(string));
    
            var p_RequestIDParameter = p_RequestID != null ?
                new ObjectParameter("p_RequestID", p_RequestID) :
                new ObjectParameter("p_RequestID", typeof(string));
    
            var p_BackDataParameter = p_BackData.HasValue ?
                new ObjectParameter("p_BackData", p_BackData) :
                new ObjectParameter("p_BackData", typeof(int));
    
            var p_NextDataParameter = p_NextData.HasValue ?
                new ObjectParameter("p_NextData", p_NextData) :
                new ObjectParameter("p_NextData", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MobileDownloadTransactionData_Result>("MobileDownloadTransactionData", p_EndUserIDParameter, p_DeviceIDParameter, p_DeviceTypeParameter, p_LastAccessPointParameter, p_RequestIDParameter, p_BackDataParameter, p_NextDataParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> MobileGetControllerLeafCategory(Nullable<int> p_UserID, string p_ServiceLineCode)
        {
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("MobileGetControllerLeafCategory", p_UserIDParameter, p_ServiceLineCodeParameter);
        }
    
        public virtual ObjectResult<MobileGetControllerLeafLocation_Result> MobileGetControllerLeafLocation(Nullable<int> p_UserID)
        {
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MobileGetControllerLeafLocation_Result>("MobileGetControllerLeafLocation", p_UserIDParameter);
        }
    
        public virtual ObjectResult<MobileUserLogin_Result> MobileUserLogin(string p_Username, string p_Password, string p_DeviceID, string p_DeviceType, string p_LastAccessPoint, string p_RequestID)
        {
            var p_UsernameParameter = p_Username != null ?
                new ObjectParameter("p_Username", p_Username) :
                new ObjectParameter("p_Username", typeof(string));
    
            var p_PasswordParameter = p_Password != null ?
                new ObjectParameter("p_Password", p_Password) :
                new ObjectParameter("p_Password", typeof(string));
    
            var p_DeviceIDParameter = p_DeviceID != null ?
                new ObjectParameter("p_DeviceID", p_DeviceID) :
                new ObjectParameter("p_DeviceID", typeof(string));
    
            var p_DeviceTypeParameter = p_DeviceType != null ?
                new ObjectParameter("p_DeviceType", p_DeviceType) :
                new ObjectParameter("p_DeviceType", typeof(string));
    
            var p_LastAccessPointParameter = p_LastAccessPoint != null ?
                new ObjectParameter("p_LastAccessPoint", p_LastAccessPoint) :
                new ObjectParameter("p_LastAccessPoint", typeof(string));
    
            var p_RequestIDParameter = p_RequestID != null ?
                new ObjectParameter("p_RequestID", p_RequestID) :
                new ObjectParameter("p_RequestID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MobileUserLogin_Result>("MobileUserLogin", p_UsernameParameter, p_PasswordParameter, p_DeviceIDParameter, p_DeviceTypeParameter, p_LastAccessPointParameter, p_RequestIDParameter);
        }
    
        public virtual int RemoveFile(Nullable<long> pFileID, byte[] pTxnTimestamp)
        {
            var pFileIDParameter = pFileID.HasValue ?
                new ObjectParameter("pFileID", pFileID) :
                new ObjectParameter("pFileID", typeof(long));
    
            var pTxnTimestampParameter = pTxnTimestamp != null ?
                new ObjectParameter("pTxnTimestamp", pTxnTimestamp) :
                new ObjectParameter("pTxnTimestamp", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveFile", pFileIDParameter, pTxnTimestampParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ResetPassword(Nullable<int> p_EndUserID, string p_NewPassword, string p_LoginID)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_NewPasswordParameter = p_NewPassword != null ?
                new ObjectParameter("p_NewPassword", p_NewPassword) :
                new ObjectParameter("p_NewPassword", typeof(string));
    
            var p_LoginIDParameter = p_LoginID != null ?
                new ObjectParameter("p_LoginID", p_LoginID) :
                new ObjectParameter("p_LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ResetPassword", p_EndUserIDParameter, p_NewPasswordParameter, p_LoginIDParameter);
        }
    
        public virtual int SendDBMail(string p_From, string p_RecipientMailList, string p_CCMailList, string p_BCCMailList, string p_Subject, string p_body, string file_attachmentsPath, ObjectParameter mailitemid)
        {
            var p_FromParameter = p_From != null ?
                new ObjectParameter("p_From", p_From) :
                new ObjectParameter("p_From", typeof(string));
    
            var p_RecipientMailListParameter = p_RecipientMailList != null ?
                new ObjectParameter("p_RecipientMailList", p_RecipientMailList) :
                new ObjectParameter("p_RecipientMailList", typeof(string));
    
            var p_CCMailListParameter = p_CCMailList != null ?
                new ObjectParameter("p_CCMailList", p_CCMailList) :
                new ObjectParameter("p_CCMailList", typeof(string));
    
            var p_BCCMailListParameter = p_BCCMailList != null ?
                new ObjectParameter("p_BCCMailList", p_BCCMailList) :
                new ObjectParameter("p_BCCMailList", typeof(string));
    
            var p_SubjectParameter = p_Subject != null ?
                new ObjectParameter("p_Subject", p_Subject) :
                new ObjectParameter("p_Subject", typeof(string));
    
            var p_bodyParameter = p_body != null ?
                new ObjectParameter("p_body", p_body) :
                new ObjectParameter("p_body", typeof(string));
    
            var file_attachmentsPathParameter = file_attachmentsPath != null ?
                new ObjectParameter("file_attachmentsPath", file_attachmentsPath) :
                new ObjectParameter("file_attachmentsPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendDBMail", p_FromParameter, p_RecipientMailListParameter, p_CCMailListParameter, p_BCCMailListParameter, p_SubjectParameter, p_bodyParameter, file_attachmentsPathParameter, mailitemid);
        }
    
        public virtual int SendMail_DrillProposalReminder(Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, string p_BaseURL, string p_PasswordData, string p_EncryptURLData, Nullable<int> p_EndUserID, string p_LanguageCode)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_BaseURLParameter = p_BaseURL != null ?
                new ObjectParameter("p_BaseURL", p_BaseURL) :
                new ObjectParameter("p_BaseURL", typeof(string));
    
            var p_PasswordDataParameter = p_PasswordData != null ?
                new ObjectParameter("p_PasswordData", p_PasswordData) :
                new ObjectParameter("p_PasswordData", typeof(string));
    
            var p_EncryptURLDataParameter = p_EncryptURLData != null ?
                new ObjectParameter("p_EncryptURLData", p_EncryptURLData) :
                new ObjectParameter("p_EncryptURLData", typeof(string));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendMail_DrillProposalReminder", p_DrillIDParameter, p_DrillSetupIDParameter, p_BaseURLParameter, p_PasswordDataParameter, p_EncryptURLDataParameter, p_EndUserIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual int SendMail_DrillProposalReminderSendToRemaining(Nullable<int> p_DrillID, Nullable<int> p_DrillSetupID, Nullable<int> p_DrillProposalID, Nullable<int> p_EndUserID, string p_BaseURL, string p_LanguageCode)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillSetupIDParameter = p_DrillSetupID.HasValue ?
                new ObjectParameter("p_DrillSetupID", p_DrillSetupID) :
                new ObjectParameter("p_DrillSetupID", typeof(int));
    
            var p_DrillProposalIDParameter = p_DrillProposalID.HasValue ?
                new ObjectParameter("p_DrillProposalID", p_DrillProposalID) :
                new ObjectParameter("p_DrillProposalID", typeof(int));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_BaseURLParameter = p_BaseURL != null ?
                new ObjectParameter("p_BaseURL", p_BaseURL) :
                new ObjectParameter("p_BaseURL", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendMail_DrillProposalReminderSendToRemaining", p_DrillIDParameter, p_DrillSetupIDParameter, p_DrillProposalIDParameter, p_EndUserIDParameter, p_BaseURLParameter, p_LanguageCodeParameter);
        }
    
        public virtual int SendReportDeviationList(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendReportDeviationList", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int SendReportLocationDeviationList(string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendReportLocationDeviationList", p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int SetLocationSequence(Nullable<int> locatinID)
        {
            var locatinIDParameter = locatinID.HasValue ?
                new ObjectParameter("LocatinID", locatinID) :
                new ObjectParameter("LocatinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetLocationSequence", locatinIDParameter);
        }
    
        public virtual int StatusReport(Nullable<short> p_CustomerID, Nullable<int> p_LocationID, Nullable<short> p_CheckListID, Nullable<System.DateTime> p_FromDate, Nullable<System.DateTime> p_ToDate, Nullable<short> p_ObjectID, Nullable<int> p_EndUserID, string p_LanguageCode)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_FromDateParameter = p_FromDate.HasValue ?
                new ObjectParameter("p_FromDate", p_FromDate) :
                new ObjectParameter("p_FromDate", typeof(System.DateTime));
    
            var p_ToDateParameter = p_ToDate.HasValue ?
                new ObjectParameter("p_ToDate", p_ToDate) :
                new ObjectParameter("p_ToDate", typeof(System.DateTime));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StatusReport", p_CustomerIDParameter, p_LocationIDParameter, p_CheckListIDParameter, p_FromDateParameter, p_ToDateParameter, p_ObjectIDParameter, p_EndUserIDParameter, p_LanguageCodeParameter);
        }
    
        public virtual int UnDeleteFile(Nullable<long> pFileID, byte[] pTxnTimestamp)
        {
            var pFileIDParameter = pFileID.HasValue ?
                new ObjectParameter("pFileID", pFileID) :
                new ObjectParameter("pFileID", typeof(long));
    
            var pTxnTimestampParameter = pTxnTimestamp != null ?
                new ObjectParameter("pTxnTimestamp", pTxnTimestamp) :
                new ObjectParameter("pTxnTimestamp", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnDeleteFile", pFileIDParameter, pTxnTimestampParameter);
        }
    
        public virtual int UpdateAssessmentParameter(Nullable<int> p_AssessmentParameterID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_AssessmentParameterIDParameter = p_AssessmentParameterID.HasValue ?
                new ObjectParameter("p_AssessmentParameterID", p_AssessmentParameterID) :
                new ObjectParameter("p_AssessmentParameterID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAssessmentParameter", p_AssessmentParameterIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCategory(Nullable<short> p_CategoryID, string p_ServiceLineCode, Nullable<short> p_ParentCategoryID, Nullable<bool> p_IsLeaf, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_ParentCategoryIDParameter = p_ParentCategoryID.HasValue ?
                new ObjectParameter("p_ParentCategoryID", p_ParentCategoryID) :
                new ObjectParameter("p_ParentCategoryID", typeof(short));
    
            var p_IsLeafParameter = p_IsLeaf.HasValue ?
                new ObjectParameter("p_IsLeaf", p_IsLeaf) :
                new ObjectParameter("p_IsLeaf", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCategory", p_CategoryIDParameter, p_ServiceLineCodeParameter, p_ParentCategoryIDParameter, p_IsLeafParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCertification(Nullable<short> p_CertificationID, string p_ShortCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CertificationIDParameter = p_CertificationID.HasValue ?
                new ObjectParameter("p_CertificationID", p_CertificationID) :
                new ObjectParameter("p_CertificationID", typeof(short));
    
            var p_ShortCodeParameter = p_ShortCode != null ?
                new ObjectParameter("p_ShortCode", p_ShortCode) :
                new ObjectParameter("p_ShortCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCertification", p_CertificationIDParameter, p_ShortCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCheckList(Nullable<short> p_CheckListID, Nullable<short> p_CategoryID, string p_InspectionType, string p_Frequency, Nullable<byte> p_ExecutionDuration, string p_ExecutionUnit, Nullable<byte> p_ServiceLevelID, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_ExecutionDurationParameter = p_ExecutionDuration.HasValue ?
                new ObjectParameter("p_ExecutionDuration", p_ExecutionDuration) :
                new ObjectParameter("p_ExecutionDuration", typeof(byte));
    
            var p_ExecutionUnitParameter = p_ExecutionUnit != null ?
                new ObjectParameter("p_ExecutionUnit", p_ExecutionUnit) :
                new ObjectParameter("p_ExecutionUnit", typeof(string));
    
            var p_ServiceLevelIDParameter = p_ServiceLevelID.HasValue ?
                new ObjectParameter("p_ServiceLevelID", p_ServiceLevelID) :
                new ObjectParameter("p_ServiceLevelID", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCheckList", p_CheckListIDParameter, p_CategoryIDParameter, p_InspectionTypeParameter, p_FrequencyParameter, p_ExecutionDurationParameter, p_ExecutionUnitParameter, p_ServiceLevelIDParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCheckListTask(Nullable<int> p_CheckListTaskID, Nullable<short> p_CheckListID, Nullable<short> p_TaskSequence, Nullable<short> p_CheckListTaskGroupID, Nullable<bool> p_IsMandatory, string p_ChecklistTaskCode, string p_AttributeType, Nullable<short> p_TextLength, Nullable<byte> p_FloatPrecision, Nullable<byte> p_FloatScale, Nullable<short> p_UOMID, Nullable<bool> p_DeviationIfFalse, Nullable<short> p_BoolDeviationTypeID, Nullable<double> p_DeviationIfLessValue, Nullable<short> p_LessValueDeviationTypeID, Nullable<double> p_DeviationIfMoreValue, Nullable<short> p_MoreValueDeviationTypeID, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListTaskIDParameter = p_CheckListTaskID.HasValue ?
                new ObjectParameter("p_CheckListTaskID", p_CheckListTaskID) :
                new ObjectParameter("p_CheckListTaskID", typeof(int));
    
            var p_CheckListIDParameter = p_CheckListID.HasValue ?
                new ObjectParameter("p_CheckListID", p_CheckListID) :
                new ObjectParameter("p_CheckListID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_ChecklistTaskCodeParameter = p_ChecklistTaskCode != null ?
                new ObjectParameter("p_ChecklistTaskCode", p_ChecklistTaskCode) :
                new ObjectParameter("p_ChecklistTaskCode", typeof(string));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_TextLengthParameter = p_TextLength.HasValue ?
                new ObjectParameter("p_TextLength", p_TextLength) :
                new ObjectParameter("p_TextLength", typeof(short));
    
            var p_FloatPrecisionParameter = p_FloatPrecision.HasValue ?
                new ObjectParameter("p_FloatPrecision", p_FloatPrecision) :
                new ObjectParameter("p_FloatPrecision", typeof(byte));
    
            var p_FloatScaleParameter = p_FloatScale.HasValue ?
                new ObjectParameter("p_FloatScale", p_FloatScale) :
                new ObjectParameter("p_FloatScale", typeof(byte));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_DeviationIfFalseParameter = p_DeviationIfFalse.HasValue ?
                new ObjectParameter("p_DeviationIfFalse", p_DeviationIfFalse) :
                new ObjectParameter("p_DeviationIfFalse", typeof(bool));
    
            var p_BoolDeviationTypeIDParameter = p_BoolDeviationTypeID.HasValue ?
                new ObjectParameter("p_BoolDeviationTypeID", p_BoolDeviationTypeID) :
                new ObjectParameter("p_BoolDeviationTypeID", typeof(short));
    
            var p_DeviationIfLessValueParameter = p_DeviationIfLessValue.HasValue ?
                new ObjectParameter("p_DeviationIfLessValue", p_DeviationIfLessValue) :
                new ObjectParameter("p_DeviationIfLessValue", typeof(double));
    
            var p_LessValueDeviationTypeIDParameter = p_LessValueDeviationTypeID.HasValue ?
                new ObjectParameter("p_LessValueDeviationTypeID", p_LessValueDeviationTypeID) :
                new ObjectParameter("p_LessValueDeviationTypeID", typeof(short));
    
            var p_DeviationIfMoreValueParameter = p_DeviationIfMoreValue.HasValue ?
                new ObjectParameter("p_DeviationIfMoreValue", p_DeviationIfMoreValue) :
                new ObjectParameter("p_DeviationIfMoreValue", typeof(double));
    
            var p_MoreValueDeviationTypeIDParameter = p_MoreValueDeviationTypeID.HasValue ?
                new ObjectParameter("p_MoreValueDeviationTypeID", p_MoreValueDeviationTypeID) :
                new ObjectParameter("p_MoreValueDeviationTypeID", typeof(short));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCheckListTask", p_CheckListTaskIDParameter, p_CheckListIDParameter, p_TaskSequenceParameter, p_CheckListTaskGroupIDParameter, p_IsMandatoryParameter, p_ChecklistTaskCodeParameter, p_AttributeTypeParameter, p_TextLengthParameter, p_FloatPrecisionParameter, p_FloatScaleParameter, p_UOMIDParameter, p_DeviationIfFalseParameter, p_BoolDeviationTypeIDParameter, p_DeviationIfLessValueParameter, p_LessValueDeviationTypeIDParameter, p_DeviationIfMoreValueParameter, p_MoreValueDeviationTypeIDParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateChecklistTaskGroup(Nullable<short> p_ChecklistTaskGroupID, string p_ModuleCode, Nullable<short> p_GroupSequence, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ChecklistTaskGroupIDParameter = p_ChecklistTaskGroupID.HasValue ?
                new ObjectParameter("p_ChecklistTaskGroupID", p_ChecklistTaskGroupID) :
                new ObjectParameter("p_ChecklistTaskGroupID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_GroupSequenceParameter = p_GroupSequence.HasValue ?
                new ObjectParameter("p_GroupSequence", p_GroupSequence) :
                new ObjectParameter("p_GroupSequence", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateChecklistTaskGroup", p_ChecklistTaskGroupIDParameter, p_ModuleCodeParameter, p_GroupSequenceParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateChecklistTaskGroupSortOrder(Nullable<int> p_ChecklistTaskGroupID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ChecklistTaskGroupIDParameter = p_ChecklistTaskGroupID.HasValue ?
                new ObjectParameter("p_ChecklistTaskGroupID", p_ChecklistTaskGroupID) :
                new ObjectParameter("p_ChecklistTaskGroupID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateChecklistTaskGroupSortOrder", p_ChecklistTaskGroupIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCheckListTaskSortOrder(Nullable<int> p_CheckListTaskID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CheckListTaskIDParameter = p_CheckListTaskID.HasValue ?
                new ObjectParameter("p_CheckListTaskID", p_CheckListTaskID) :
                new ObjectParameter("p_CheckListTaskID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCheckListTaskSortOrder", p_CheckListTaskIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateContract(Nullable<int> p_ContractID, Nullable<short> p_CustomerID, Nullable<System.DateTime> p_ContractDate, Nullable<System.DateTime> p_ContractStartDate, Nullable<byte> p_ContractDuration, string p_SourceRefID, Nullable<int> p_ResponsiblePersonID, string p_Remarks, string p_InspectionType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ContractIDParameter = p_ContractID.HasValue ?
                new ObjectParameter("p_ContractID", p_ContractID) :
                new ObjectParameter("p_ContractID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContractDateParameter = p_ContractDate.HasValue ?
                new ObjectParameter("p_ContractDate", p_ContractDate) :
                new ObjectParameter("p_ContractDate", typeof(System.DateTime));
    
            var p_ContractStartDateParameter = p_ContractStartDate.HasValue ?
                new ObjectParameter("p_ContractStartDate", p_ContractStartDate) :
                new ObjectParameter("p_ContractStartDate", typeof(System.DateTime));
    
            var p_ContractDurationParameter = p_ContractDuration.HasValue ?
                new ObjectParameter("p_ContractDuration", p_ContractDuration) :
                new ObjectParameter("p_ContractDuration", typeof(byte));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_ResponsiblePersonIDParameter = p_ResponsiblePersonID.HasValue ?
                new ObjectParameter("p_ResponsiblePersonID", p_ResponsiblePersonID) :
                new ObjectParameter("p_ResponsiblePersonID", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_InspectionTypeParameter = p_InspectionType != null ?
                new ObjectParameter("p_InspectionType", p_InspectionType) :
                new ObjectParameter("p_InspectionType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContract", p_ContractIDParameter, p_CustomerIDParameter, p_ContractDateParameter, p_ContractStartDateParameter, p_ContractDurationParameter, p_SourceRefIDParameter, p_ResponsiblePersonIDParameter, p_RemarksParameter, p_InspectionTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateControllerSpecialization(Nullable<int> p_ControllerID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ControllerIDParameter = p_ControllerID.HasValue ?
                new ObjectParameter("p_ControllerID", p_ControllerID) :
                new ObjectParameter("p_ControllerID", typeof(int));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateControllerSpecialization", p_ControllerIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateControllerTagging(Nullable<int> p_ControllerTaggingID, Nullable<System.DateTime> p_StartDate, Nullable<System.DateTime> p_EndDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ControllerTaggingIDParameter = p_ControllerTaggingID.HasValue ?
                new ObjectParameter("p_ControllerTaggingID", p_ControllerTaggingID) :
                new ObjectParameter("p_ControllerTaggingID", typeof(int));
    
            var p_StartDateParameter = p_StartDate.HasValue ?
                new ObjectParameter("p_StartDate", p_StartDate) :
                new ObjectParameter("p_StartDate", typeof(System.DateTime));
    
            var p_EndDateParameter = p_EndDate.HasValue ?
                new ObjectParameter("p_EndDate", p_EndDate) :
                new ObjectParameter("p_EndDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateControllerTagging", p_ControllerTaggingIDParameter, p_StartDateParameter, p_EndDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCourse(Nullable<short> p_CourseID, Nullable<short> p_CourseTypeID, string p_CourseCode, string p_Frequency, string p_Remarks, Nullable<byte> p_CourseMarks, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_CourseTypeIDParameter = p_CourseTypeID.HasValue ?
                new ObjectParameter("p_CourseTypeID", p_CourseTypeID) :
                new ObjectParameter("p_CourseTypeID", typeof(short));
    
            var p_CourseCodeParameter = p_CourseCode != null ?
                new ObjectParameter("p_CourseCode", p_CourseCode) :
                new ObjectParameter("p_CourseCode", typeof(string));
    
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CourseMarksParameter = p_CourseMarks.HasValue ?
                new ObjectParameter("p_CourseMarks", p_CourseMarks) :
                new ObjectParameter("p_CourseMarks", typeof(byte));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourse", p_CourseIDParameter, p_CourseTypeIDParameter, p_CourseCodeParameter, p_FrequencyParameter, p_RemarksParameter, p_CourseMarksParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCourseType(Nullable<short> p_CourseTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CourseTypeIDParameter = p_CourseTypeID.HasValue ?
                new ObjectParameter("p_CourseTypeID", p_CourseTypeID) :
                new ObjectParameter("p_CourseTypeID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCourseType", p_CourseTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomer(Nullable<short> p_CustomerID, string p_CustomerShortCode, string p_CustomerName, string p_LegalEntityName, Nullable<long> p_Logo, string p_Remarks, Nullable<int> p_AccountManagerID, Nullable<System.DateTime> p_EffectiveFromDate, Nullable<System.DateTime> p_EffectiveTillDate, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_CustomerShortCodeParameter = p_CustomerShortCode != null ?
                new ObjectParameter("p_CustomerShortCode", p_CustomerShortCode) :
                new ObjectParameter("p_CustomerShortCode", typeof(string));
    
            var p_CustomerNameParameter = p_CustomerName != null ?
                new ObjectParameter("p_CustomerName", p_CustomerName) :
                new ObjectParameter("p_CustomerName", typeof(string));
    
            var p_LegalEntityNameParameter = p_LegalEntityName != null ?
                new ObjectParameter("p_LegalEntityName", p_LegalEntityName) :
                new ObjectParameter("p_LegalEntityName", typeof(string));
    
            var p_LogoParameter = p_Logo.HasValue ?
                new ObjectParameter("p_Logo", p_Logo) :
                new ObjectParameter("p_Logo", typeof(long));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_AccountManagerIDParameter = p_AccountManagerID.HasValue ?
                new ObjectParameter("p_AccountManagerID", p_AccountManagerID) :
                new ObjectParameter("p_AccountManagerID", typeof(int));
    
            var p_EffectiveFromDateParameter = p_EffectiveFromDate.HasValue ?
                new ObjectParameter("p_EffectiveFromDate", p_EffectiveFromDate) :
                new ObjectParameter("p_EffectiveFromDate", typeof(System.DateTime));
    
            var p_EffectiveTillDateParameter = p_EffectiveTillDate.HasValue ?
                new ObjectParameter("p_EffectiveTillDate", p_EffectiveTillDate) :
                new ObjectParameter("p_EffectiveTillDate", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", p_CustomerIDParameter, p_CustomerShortCodeParameter, p_CustomerNameParameter, p_LegalEntityNameParameter, p_LogoParameter, p_RemarksParameter, p_AccountManagerIDParameter, p_EffectiveFromDateParameter, p_EffectiveTillDateParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomerAddress(Nullable<short> p_CustomerID, string p_AddressType, string p_AddressTypeOld, string p_AddressLine1, string p_AddressLine2, string p_CityName, string p_StateName, string p_CountryName, string p_Pincode, Nullable<bool> p_IsPrimaryAddress, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_AddressTypeParameter = p_AddressType != null ?
                new ObjectParameter("p_AddressType", p_AddressType) :
                new ObjectParameter("p_AddressType", typeof(string));
    
            var p_AddressTypeOldParameter = p_AddressTypeOld != null ?
                new ObjectParameter("p_AddressTypeOld", p_AddressTypeOld) :
                new ObjectParameter("p_AddressTypeOld", typeof(string));
    
            var p_AddressLine1Parameter = p_AddressLine1 != null ?
                new ObjectParameter("p_AddressLine1", p_AddressLine1) :
                new ObjectParameter("p_AddressLine1", typeof(string));
    
            var p_AddressLine2Parameter = p_AddressLine2 != null ?
                new ObjectParameter("p_AddressLine2", p_AddressLine2) :
                new ObjectParameter("p_AddressLine2", typeof(string));
    
            var p_CityNameParameter = p_CityName != null ?
                new ObjectParameter("p_CityName", p_CityName) :
                new ObjectParameter("p_CityName", typeof(string));
    
            var p_StateNameParameter = p_StateName != null ?
                new ObjectParameter("p_StateName", p_StateName) :
                new ObjectParameter("p_StateName", typeof(string));
    
            var p_CountryNameParameter = p_CountryName != null ?
                new ObjectParameter("p_CountryName", p_CountryName) :
                new ObjectParameter("p_CountryName", typeof(string));
    
            var p_PincodeParameter = p_Pincode != null ?
                new ObjectParameter("p_Pincode", p_Pincode) :
                new ObjectParameter("p_Pincode", typeof(string));
    
            var p_IsPrimaryAddressParameter = p_IsPrimaryAddress.HasValue ?
                new ObjectParameter("p_IsPrimaryAddress", p_IsPrimaryAddress) :
                new ObjectParameter("p_IsPrimaryAddress", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerAddress", p_CustomerIDParameter, p_AddressTypeParameter, p_AddressTypeOldParameter, p_AddressLine1Parameter, p_AddressLine2Parameter, p_CityNameParameter, p_StateNameParameter, p_CountryNameParameter, p_PincodeParameter, p_IsPrimaryAddressParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomerContact(Nullable<short> p_CustomerID, string p_ContactName, string p_ContactNameOld, string p_Email, string p_Telephone, string p_Mobile, Nullable<bool> p_IsPrimaryContact, Nullable<bool> p_IsWebAccess, Nullable<int> p_UserID, string p_CustomerContactLanguageCode, Nullable<decimal> p_CustomerContactUTCOffset, string p_DefaultModuleCode, string p_Gender, string p_UserIdentity, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ContactNameParameter = p_ContactName != null ?
                new ObjectParameter("p_ContactName", p_ContactName) :
                new ObjectParameter("p_ContactName", typeof(string));
    
            var p_ContactNameOldParameter = p_ContactNameOld != null ?
                new ObjectParameter("p_ContactNameOld", p_ContactNameOld) :
                new ObjectParameter("p_ContactNameOld", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_TelephoneParameter = p_Telephone != null ?
                new ObjectParameter("p_Telephone", p_Telephone) :
                new ObjectParameter("p_Telephone", typeof(string));
    
            var p_MobileParameter = p_Mobile != null ?
                new ObjectParameter("p_Mobile", p_Mobile) :
                new ObjectParameter("p_Mobile", typeof(string));
    
            var p_IsPrimaryContactParameter = p_IsPrimaryContact.HasValue ?
                new ObjectParameter("p_IsPrimaryContact", p_IsPrimaryContact) :
                new ObjectParameter("p_IsPrimaryContact", typeof(bool));
    
            var p_IsWebAccessParameter = p_IsWebAccess.HasValue ?
                new ObjectParameter("p_IsWebAccess", p_IsWebAccess) :
                new ObjectParameter("p_IsWebAccess", typeof(bool));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_CustomerContactLanguageCodeParameter = p_CustomerContactLanguageCode != null ?
                new ObjectParameter("p_CustomerContactLanguageCode", p_CustomerContactLanguageCode) :
                new ObjectParameter("p_CustomerContactLanguageCode", typeof(string));
    
            var p_CustomerContactUTCOffsetParameter = p_CustomerContactUTCOffset.HasValue ?
                new ObjectParameter("p_CustomerContactUTCOffset", p_CustomerContactUTCOffset) :
                new ObjectParameter("p_CustomerContactUTCOffset", typeof(decimal));
    
            var p_DefaultModuleCodeParameter = p_DefaultModuleCode != null ?
                new ObjectParameter("p_DefaultModuleCode", p_DefaultModuleCode) :
                new ObjectParameter("p_DefaultModuleCode", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_UserIdentityParameter = p_UserIdentity != null ?
                new ObjectParameter("p_UserIdentity", p_UserIdentity) :
                new ObjectParameter("p_UserIdentity", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerContact", p_CustomerIDParameter, p_ContactNameParameter, p_ContactNameOldParameter, p_EmailParameter, p_TelephoneParameter, p_MobileParameter, p_IsPrimaryContactParameter, p_IsWebAccessParameter, p_UserIDParameter, p_CustomerContactLanguageCodeParameter, p_CustomerContactUTCOffsetParameter, p_DefaultModuleCodeParameter, p_GenderParameter, p_UserIdentityParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomerLocationRiskLevel(Nullable<int> p_LocationID, string p_LocationName, Nullable<int> p_ParentLocationID, Nullable<bool> p_HasCustomers, Nullable<short> p_CustomerID, Nullable<double> p_Longitude, Nullable<double> p_Latitude, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ParentLocationIDParameter = p_ParentLocationID.HasValue ?
                new ObjectParameter("p_ParentLocationID", p_ParentLocationID) :
                new ObjectParameter("p_ParentLocationID", typeof(int));
    
            var p_HasCustomersParameter = p_HasCustomers.HasValue ?
                new ObjectParameter("p_HasCustomers", p_HasCustomers) :
                new ObjectParameter("p_HasCustomers", typeof(bool));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerLocationRiskLevel", p_LocationIDParameter, p_LocationNameParameter, p_ParentLocationIDParameter, p_HasCustomersParameter, p_CustomerIDParameter, p_LongitudeParameter, p_LatitudeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomerLogo(Nullable<short> p_CustomerID, Nullable<long> p_Logo, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LogoParameter = p_Logo.HasValue ?
                new ObjectParameter("p_Logo", p_Logo) :
                new ObjectParameter("p_Logo", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerLogo", p_CustomerIDParameter, p_LogoParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomerServiceLineConfiguration(Nullable<short> p_CustomerID, string p_ServiceLineCode, string p_ConfigurationCode, Nullable<int> p_ConfigurationValue, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_ConfigurationCodeParameter = p_ConfigurationCode != null ?
                new ObjectParameter("p_ConfigurationCode", p_ConfigurationCode) :
                new ObjectParameter("p_ConfigurationCode", typeof(string));
    
            var p_ConfigurationValueParameter = p_ConfigurationValue.HasValue ?
                new ObjectParameter("p_ConfigurationValue", p_ConfigurationValue) :
                new ObjectParameter("p_ConfigurationValue", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerServiceLineConfiguration", p_CustomerIDParameter, p_ServiceLineCodeParameter, p_ConfigurationCodeParameter, p_ConfigurationValueParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateCustomerWeeklyOff(Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerWeeklyOff", p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDepartment(Nullable<short> p_DepartmentID, Nullable<bool> p_IsExternal, string p_ZipCode, string p_City, string p_ContractorCode, string p_Email, string p_WebURL, string p_TelePhone, string p_Address, string p_ContactPerson, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_IsExternalParameter = p_IsExternal.HasValue ?
                new ObjectParameter("p_IsExternal", p_IsExternal) :
                new ObjectParameter("p_IsExternal", typeof(bool));
    
            var p_ZipCodeParameter = p_ZipCode != null ?
                new ObjectParameter("p_ZipCode", p_ZipCode) :
                new ObjectParameter("p_ZipCode", typeof(string));
    
            var p_CityParameter = p_City != null ?
                new ObjectParameter("p_City", p_City) :
                new ObjectParameter("p_City", typeof(string));
    
            var p_ContractorCodeParameter = p_ContractorCode != null ?
                new ObjectParameter("p_ContractorCode", p_ContractorCode) :
                new ObjectParameter("p_ContractorCode", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_WebURLParameter = p_WebURL != null ?
                new ObjectParameter("p_WebURL", p_WebURL) :
                new ObjectParameter("p_WebURL", typeof(string));
    
            var p_TelePhoneParameter = p_TelePhone != null ?
                new ObjectParameter("p_TelePhone", p_TelePhone) :
                new ObjectParameter("p_TelePhone", typeof(string));
    
            var p_AddressParameter = p_Address != null ?
                new ObjectParameter("p_Address", p_Address) :
                new ObjectParameter("p_Address", typeof(string));
    
            var p_ContactPersonParameter = p_ContactPerson != null ?
                new ObjectParameter("p_ContactPerson", p_ContactPerson) :
                new ObjectParameter("p_ContactPerson", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDepartment", p_DepartmentIDParameter, p_IsExternalParameter, p_ZipCodeParameter, p_CityParameter, p_ContractorCodeParameter, p_EmailParameter, p_WebURLParameter, p_TelePhoneParameter, p_AddressParameter, p_ContactPersonParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDesignation(Nullable<short> p_DesignationID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDesignation", p_DesignationIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDeviation(Nullable<long> p_DeviationID, Nullable<int> p_InspectionID, Nullable<int> p_LocationID, Nullable<short> p_DeviationTypeID, string p_DeviationDescription, Nullable<System.DateTime> p_DeviationDateTime, string p_DeviationRemarks, Nullable<double> p_Latitude, Nullable<double> p_Longitude, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationIDParameter = p_DeviationID.HasValue ?
                new ObjectParameter("p_DeviationID", p_DeviationID) :
                new ObjectParameter("p_DeviationID", typeof(long));
    
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_DeviationDescriptionParameter = p_DeviationDescription != null ?
                new ObjectParameter("p_DeviationDescription", p_DeviationDescription) :
                new ObjectParameter("p_DeviationDescription", typeof(string));
    
            var p_DeviationDateTimeParameter = p_DeviationDateTime.HasValue ?
                new ObjectParameter("p_DeviationDateTime", p_DeviationDateTime) :
                new ObjectParameter("p_DeviationDateTime", typeof(System.DateTime));
    
            var p_DeviationRemarksParameter = p_DeviationRemarks != null ?
                new ObjectParameter("p_DeviationRemarks", p_DeviationRemarks) :
                new ObjectParameter("p_DeviationRemarks", typeof(string));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviation", p_DeviationIDParameter, p_InspectionIDParameter, p_LocationIDParameter, p_DeviationTypeIDParameter, p_DeviationDescriptionParameter, p_DeviationDateTimeParameter, p_DeviationRemarksParameter, p_LatitudeParameter, p_LongitudeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDeviationMobile(Nullable<int> p_ObjectInstanceID, Nullable<System.DateTime> p_ResolutionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviationMobile", p_ObjectInstanceIDParameter, p_ResolutionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDeviationResolutionMultiple(Nullable<System.DateTime> p_ResolutionDateTime, string p_ResolutionRemarks, Nullable<int> p_ResolutionControllerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_ResolutionRemarksParameter = p_ResolutionRemarks != null ?
                new ObjectParameter("p_ResolutionRemarks", p_ResolutionRemarks) :
                new ObjectParameter("p_ResolutionRemarks", typeof(string));
    
            var p_ResolutionControllerIDParameter = p_ResolutionControllerID.HasValue ?
                new ObjectParameter("p_ResolutionControllerID", p_ResolutionControllerID) :
                new ObjectParameter("p_ResolutionControllerID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviationResolutionMultiple", p_ResolutionDateTimeParameter, p_ResolutionRemarksParameter, p_ResolutionControllerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDeviationType(Nullable<short> p_DeviationTypeID, string p_ServiceLineCode, Nullable<short> p_CategoryID, Nullable<short> p_DeviationTypeSequence, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<byte> p_RiskLevelID, string p_DeviationTypeCode, Nullable<short> p_DeviationGroupID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ServiceLineCodeParameter = p_ServiceLineCode != null ?
                new ObjectParameter("p_ServiceLineCode", p_ServiceLineCode) :
                new ObjectParameter("p_ServiceLineCode", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_DeviationTypeSequenceParameter = p_DeviationTypeSequence.HasValue ?
                new ObjectParameter("p_DeviationTypeSequence", p_DeviationTypeSequence) :
                new ObjectParameter("p_DeviationTypeSequence", typeof(short));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_DeviationTypeCodeParameter = p_DeviationTypeCode != null ?
                new ObjectParameter("p_DeviationTypeCode", p_DeviationTypeCode) :
                new ObjectParameter("p_DeviationTypeCode", typeof(string));
    
            var p_DeviationGroupIDParameter = p_DeviationGroupID.HasValue ?
                new ObjectParameter("p_DeviationGroupID", p_DeviationGroupID) :
                new ObjectParameter("p_DeviationGroupID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviationType", p_DeviationTypeIDParameter, p_ServiceLineCodeParameter, p_CategoryIDParameter, p_DeviationTypeSequenceParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_RiskLevelIDParameter, p_DeviationTypeCodeParameter, p_DeviationGroupIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDeviationTypeResolution(Nullable<int> p_DeviationTypeResolutionID, Nullable<short> p_DeviationTypeID, Nullable<short> p_ResolutionSequence, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<bool> p_CanAddRepairComponent, Nullable<bool> p_UseRepairComponents, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeResolutionIDParameter = p_DeviationTypeResolutionID.HasValue ?
                new ObjectParameter("p_DeviationTypeResolutionID", p_DeviationTypeResolutionID) :
                new ObjectParameter("p_DeviationTypeResolutionID", typeof(int));
    
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(short));
    
            var p_ResolutionSequenceParameter = p_ResolutionSequence.HasValue ?
                new ObjectParameter("p_ResolutionSequence", p_ResolutionSequence) :
                new ObjectParameter("p_ResolutionSequence", typeof(short));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_CanAddRepairComponentParameter = p_CanAddRepairComponent.HasValue ?
                new ObjectParameter("p_CanAddRepairComponent", p_CanAddRepairComponent) :
                new ObjectParameter("p_CanAddRepairComponent", typeof(bool));
    
            var p_UseRepairComponentsParameter = p_UseRepairComponents.HasValue ?
                new ObjectParameter("p_UseRepairComponents", p_UseRepairComponents) :
                new ObjectParameter("p_UseRepairComponents", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviationTypeResolution", p_DeviationTypeResolutionIDParameter, p_DeviationTypeIDParameter, p_ResolutionSequenceParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_CanAddRepairComponentParameter, p_UseRepairComponentsParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDeviationTypeSortOrder(Nullable<int> p_DeviationTypeID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DeviationTypeIDParameter = p_DeviationTypeID.HasValue ?
                new ObjectParameter("p_DeviationTypeID", p_DeviationTypeID) :
                new ObjectParameter("p_DeviationTypeID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviationTypeSortOrder", p_DeviationTypeIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDocument(Nullable<int> p_DocumentID, Nullable<short> p_DocumentCategoryID, string p_DocumentNumber, string p_DocumentName, Nullable<byte> p_DocumentTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentIDParameter = p_DocumentID.HasValue ?
                new ObjectParameter("p_DocumentID", p_DocumentID) :
                new ObjectParameter("p_DocumentID", typeof(int));
    
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_DocumentNumberParameter = p_DocumentNumber != null ?
                new ObjectParameter("p_DocumentNumber", p_DocumentNumber) :
                new ObjectParameter("p_DocumentNumber", typeof(string));
    
            var p_DocumentNameParameter = p_DocumentName != null ?
                new ObjectParameter("p_DocumentName", p_DocumentName) :
                new ObjectParameter("p_DocumentName", typeof(string));
    
            var p_DocumentTypeIDParameter = p_DocumentTypeID.HasValue ?
                new ObjectParameter("p_DocumentTypeID", p_DocumentTypeID) :
                new ObjectParameter("p_DocumentTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDocument", p_DocumentIDParameter, p_DocumentCategoryIDParameter, p_DocumentNumberParameter, p_DocumentNameParameter, p_DocumentTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDocumentCategory(Nullable<short> p_DocumentCategoryID, Nullable<short> p_ParentDocumentCategoryID, Nullable<bool> p_HasDocuments, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentCategoryIDParameter = p_DocumentCategoryID.HasValue ?
                new ObjectParameter("p_DocumentCategoryID", p_DocumentCategoryID) :
                new ObjectParameter("p_DocumentCategoryID", typeof(short));
    
            var p_ParentDocumentCategoryIDParameter = p_ParentDocumentCategoryID.HasValue ?
                new ObjectParameter("p_ParentDocumentCategoryID", p_ParentDocumentCategoryID) :
                new ObjectParameter("p_ParentDocumentCategoryID", typeof(short));
    
            var p_HasDocumentsParameter = p_HasDocuments.HasValue ?
                new ObjectParameter("p_HasDocuments", p_HasDocuments) :
                new ObjectParameter("p_HasDocuments", typeof(bool));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDocumentCategory", p_DocumentCategoryIDParameter, p_ParentDocumentCategoryIDParameter, p_HasDocumentsParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDocumentFile(Nullable<int> p_DocumentID, Nullable<long> p_FileID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DocumentIDParameter = p_DocumentID.HasValue ?
                new ObjectParameter("p_DocumentID", p_DocumentID) :
                new ObjectParameter("p_DocumentID", typeof(int));
    
            var p_FileIDParameter = p_FileID.HasValue ?
                new ObjectParameter("p_FileID", p_FileID) :
                new ObjectParameter("p_FileID", typeof(long));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDocumentFile", p_DocumentIDParameter, p_FileIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrill(Nullable<int> p_DrillID, Nullable<byte> p_DrillTypeID, Nullable<System.DateTime> p_DrillDatetime, Nullable<int> p_LocationID, string p_DrillTitle, string p_Remarks, Nullable<System.DateTime> p_ConclusionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillDatetimeParameter = p_DrillDatetime.HasValue ?
                new ObjectParameter("p_DrillDatetime", p_DrillDatetime) :
                new ObjectParameter("p_DrillDatetime", typeof(System.DateTime));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_DrillTitleParameter = p_DrillTitle != null ?
                new ObjectParameter("p_DrillTitle", p_DrillTitle) :
                new ObjectParameter("p_DrillTitle", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_ConclusionDateTimeParameter = p_ConclusionDateTime.HasValue ?
                new ObjectParameter("p_ConclusionDateTime", p_ConclusionDateTime) :
                new ObjectParameter("p_ConclusionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrill", p_DrillIDParameter, p_DrillTypeIDParameter, p_DrillDatetimeParameter, p_LocationIDParameter, p_DrillTitleParameter, p_RemarksParameter, p_ConclusionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillActionType(Nullable<byte> p_DrillActionTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillActionTypeIDParameter = p_DrillActionTypeID.HasValue ?
                new ObjectParameter("p_DrillActionTypeID", p_DrillActionTypeID) :
                new ObjectParameter("p_DrillActionTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillActionType", p_DrillActionTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillCheckList(Nullable<short> p_DrillChecklistID, Nullable<byte> p_DrillTypeID, Nullable<short> p_DrillStakeHolderID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillChecklistIDParameter = p_DrillChecklistID.HasValue ?
                new ObjectParameter("p_DrillChecklistID", p_DrillChecklistID) :
                new ObjectParameter("p_DrillChecklistID", typeof(short));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_DrillStakeHolderIDParameter = p_DrillStakeHolderID.HasValue ?
                new ObjectParameter("p_DrillStakeHolderID", p_DrillStakeHolderID) :
                new ObjectParameter("p_DrillStakeHolderID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillCheckList", p_DrillChecklistIDParameter, p_DrillTypeIDParameter, p_DrillStakeHolderIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillCheckListTask(Nullable<int> p_DrillCheckListTaskID, Nullable<short> p_DrillCheckListID, Nullable<short> p_CheckListTaskGroupID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, string p_AttributeType, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillCheckListTaskIDParameter = p_DrillCheckListTaskID.HasValue ?
                new ObjectParameter("p_DrillCheckListTaskID", p_DrillCheckListTaskID) :
                new ObjectParameter("p_DrillCheckListTaskID", typeof(int));
    
            var p_DrillCheckListIDParameter = p_DrillCheckListID.HasValue ?
                new ObjectParameter("p_DrillCheckListID", p_DrillCheckListID) :
                new ObjectParameter("p_DrillCheckListID", typeof(short));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillCheckListTask", p_DrillCheckListTaskIDParameter, p_DrillCheckListIDParameter, p_CheckListTaskGroupIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_AttributeTypeParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillChecklistTaskSortOrder(Nullable<int> p_DrillCheckListTaskID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillCheckListTaskIDParameter = p_DrillCheckListTaskID.HasValue ?
                new ObjectParameter("p_DrillCheckListTaskID", p_DrillCheckListTaskID) :
                new ObjectParameter("p_DrillCheckListTaskID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillChecklistTaskSortOrder", p_DrillCheckListTaskIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillClosureRemark(Nullable<int> p_DrillID, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosureDateTime, string p_DrillClosureRemark, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_DrillClosureRemarkParameter = p_DrillClosureRemark != null ?
                new ObjectParameter("p_DrillClosureRemark", p_DrillClosureRemark) :
                new ObjectParameter("p_DrillClosureRemark", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillClosureRemark", p_DrillIDParameter, p_ClosedByParameter, p_ClosureDateTimeParameter, p_DrillClosureRemarkParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillFollowupRemark(Nullable<int> p_DrillID, Nullable<int> p_ResolutionBy, Nullable<System.DateTime> p_ResolutionDateTime, string p_DrillFollowupRemark, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillIDParameter = p_DrillID.HasValue ?
                new ObjectParameter("p_DrillID", p_DrillID) :
                new ObjectParameter("p_DrillID", typeof(int));
    
            var p_ResolutionByParameter = p_ResolutionBy.HasValue ?
                new ObjectParameter("p_ResolutionBy", p_ResolutionBy) :
                new ObjectParameter("p_ResolutionBy", typeof(int));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_DrillFollowupRemarkParameter = p_DrillFollowupRemark != null ?
                new ObjectParameter("p_DrillFollowupRemark", p_DrillFollowupRemark) :
                new ObjectParameter("p_DrillFollowupRemark", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillFollowupRemark", p_DrillIDParameter, p_ResolutionByParameter, p_ResolutionDateTimeParameter, p_DrillFollowupRemarkParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillStakeholder(Nullable<short> p_DrillStakeholderID, Nullable<short> p_DepartmentID, string p_EmailID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_DrillStakeholderIDParameter = p_DrillStakeholderID.HasValue ?
                new ObjectParameter("p_DrillStakeholderID", p_DrillStakeholderID) :
                new ObjectParameter("p_DrillStakeholderID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_EmailIDParameter = p_EmailID != null ?
                new ObjectParameter("p_EmailID", p_EmailID) :
                new ObjectParameter("p_EmailID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillStakeholder", p_DrillStakeholderIDParameter, p_DepartmentIDParameter, p_EmailIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateDrillType(string p_Frequency, Nullable<byte> p_DrillTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FrequencyParameter = p_Frequency != null ?
                new ObjectParameter("p_Frequency", p_Frequency) :
                new ObjectParameter("p_Frequency", typeof(string));
    
            var p_DrillTypeIDParameter = p_DrillTypeID.HasValue ?
                new ObjectParameter("p_DrillTypeID", p_DrillTypeID) :
                new ObjectParameter("p_DrillTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrillType", p_FrequencyParameter, p_DrillTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> p_EmployeeID, string p_HRMSEmployeeID, string p_Salutation, string p_FirstName, string p_MiddleName, string p_LastName, string p_Gender, string p_ShortCode, string p_FullEmployeeAddress, string p_TelephoneNo, string p_CellNo, string p_ExtensionNo, string p_Email, string p_EmergencyContact1, string p_EmergencyContact2, Nullable<int> p_ReportingEmployeeID, Nullable<System.DateTime> p_AppointmentDate, Nullable<System.DateTime> p_LeavingDate, Nullable<short> p_DesignationID, Nullable<short> p_DepartmentID, Nullable<System.DateTime> p_DOB, string p_Shiftcode, Nullable<short> p_CustomerID, string p_SquadCode, Nullable<int> p_UserID, Nullable<int> p_EndUserID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_EmployeeIDParameter = p_EmployeeID.HasValue ?
                new ObjectParameter("p_EmployeeID", p_EmployeeID) :
                new ObjectParameter("p_EmployeeID", typeof(int));
    
            var p_HRMSEmployeeIDParameter = p_HRMSEmployeeID != null ?
                new ObjectParameter("p_HRMSEmployeeID", p_HRMSEmployeeID) :
                new ObjectParameter("p_HRMSEmployeeID", typeof(string));
    
            var p_SalutationParameter = p_Salutation != null ?
                new ObjectParameter("p_Salutation", p_Salutation) :
                new ObjectParameter("p_Salutation", typeof(string));
    
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("p_FirstName", p_FirstName) :
                new ObjectParameter("p_FirstName", typeof(string));
    
            var p_MiddleNameParameter = p_MiddleName != null ?
                new ObjectParameter("p_MiddleName", p_MiddleName) :
                new ObjectParameter("p_MiddleName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("p_LastName", p_LastName) :
                new ObjectParameter("p_LastName", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_ShortCodeParameter = p_ShortCode != null ?
                new ObjectParameter("p_ShortCode", p_ShortCode) :
                new ObjectParameter("p_ShortCode", typeof(string));
    
            var p_FullEmployeeAddressParameter = p_FullEmployeeAddress != null ?
                new ObjectParameter("p_FullEmployeeAddress", p_FullEmployeeAddress) :
                new ObjectParameter("p_FullEmployeeAddress", typeof(string));
    
            var p_TelephoneNoParameter = p_TelephoneNo != null ?
                new ObjectParameter("p_TelephoneNo", p_TelephoneNo) :
                new ObjectParameter("p_TelephoneNo", typeof(string));
    
            var p_CellNoParameter = p_CellNo != null ?
                new ObjectParameter("p_CellNo", p_CellNo) :
                new ObjectParameter("p_CellNo", typeof(string));
    
            var p_ExtensionNoParameter = p_ExtensionNo != null ?
                new ObjectParameter("p_ExtensionNo", p_ExtensionNo) :
                new ObjectParameter("p_ExtensionNo", typeof(string));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_EmergencyContact1Parameter = p_EmergencyContact1 != null ?
                new ObjectParameter("p_EmergencyContact1", p_EmergencyContact1) :
                new ObjectParameter("p_EmergencyContact1", typeof(string));
    
            var p_EmergencyContact2Parameter = p_EmergencyContact2 != null ?
                new ObjectParameter("p_EmergencyContact2", p_EmergencyContact2) :
                new ObjectParameter("p_EmergencyContact2", typeof(string));
    
            var p_ReportingEmployeeIDParameter = p_ReportingEmployeeID.HasValue ?
                new ObjectParameter("p_ReportingEmployeeID", p_ReportingEmployeeID) :
                new ObjectParameter("p_ReportingEmployeeID", typeof(int));
    
            var p_AppointmentDateParameter = p_AppointmentDate.HasValue ?
                new ObjectParameter("p_AppointmentDate", p_AppointmentDate) :
                new ObjectParameter("p_AppointmentDate", typeof(System.DateTime));
    
            var p_LeavingDateParameter = p_LeavingDate.HasValue ?
                new ObjectParameter("p_LeavingDate", p_LeavingDate) :
                new ObjectParameter("p_LeavingDate", typeof(System.DateTime));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_DOBParameter = p_DOB.HasValue ?
                new ObjectParameter("p_DOB", p_DOB) :
                new ObjectParameter("p_DOB", typeof(System.DateTime));
    
            var p_ShiftcodeParameter = p_Shiftcode != null ?
                new ObjectParameter("p_Shiftcode", p_Shiftcode) :
                new ObjectParameter("p_Shiftcode", typeof(string));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_SquadCodeParameter = p_SquadCode != null ?
                new ObjectParameter("p_SquadCode", p_SquadCode) :
                new ObjectParameter("p_SquadCode", typeof(string));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", p_EmployeeIDParameter, p_HRMSEmployeeIDParameter, p_SalutationParameter, p_FirstNameParameter, p_MiddleNameParameter, p_LastNameParameter, p_GenderParameter, p_ShortCodeParameter, p_FullEmployeeAddressParameter, p_TelephoneNoParameter, p_CellNoParameter, p_ExtensionNoParameter, p_EmailParameter, p_EmergencyContact1Parameter, p_EmergencyContact2Parameter, p_ReportingEmployeeIDParameter, p_AppointmentDateParameter, p_LeavingDateParameter, p_DesignationIDParameter, p_DepartmentIDParameter, p_DOBParameter, p_ShiftcodeParameter, p_CustomerIDParameter, p_SquadCodeParameter, p_UserIDParameter, p_EndUserIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateEndUser(Nullable<int> p_EndUserID, string p_LoginID, string p_FirstName, string p_MiddleName, string p_LastName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, string p_DefaultModuleCode, string p_Gender, string p_EmailID, string p_UserIdentity, Nullable<System.DateTime> p_ActivatedDTM, string p_LastAccessPoint, Nullable<System.DateTime> p_LastLoginDTM, string p_SecretQuestion, string p_SecretAnswer, Nullable<int> p_ActivationURLID, Nullable<int> p_ResetPasswordURLID, Nullable<short> p_DesignationID, Nullable<short> p_DepartmentID, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_CurrentAccessPoint)
        {
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_LoginIDParameter = p_LoginID != null ?
                new ObjectParameter("p_LoginID", p_LoginID) :
                new ObjectParameter("p_LoginID", typeof(string));
    
            var p_FirstNameParameter = p_FirstName != null ?
                new ObjectParameter("p_FirstName", p_FirstName) :
                new ObjectParameter("p_FirstName", typeof(string));
    
            var p_MiddleNameParameter = p_MiddleName != null ?
                new ObjectParameter("p_MiddleName", p_MiddleName) :
                new ObjectParameter("p_MiddleName", typeof(string));
    
            var p_LastNameParameter = p_LastName != null ?
                new ObjectParameter("p_LastName", p_LastName) :
                new ObjectParameter("p_LastName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_DefaultModuleCodeParameter = p_DefaultModuleCode != null ?
                new ObjectParameter("p_DefaultModuleCode", p_DefaultModuleCode) :
                new ObjectParameter("p_DefaultModuleCode", typeof(string));
    
            var p_GenderParameter = p_Gender != null ?
                new ObjectParameter("p_Gender", p_Gender) :
                new ObjectParameter("p_Gender", typeof(string));
    
            var p_EmailIDParameter = p_EmailID != null ?
                new ObjectParameter("p_EmailID", p_EmailID) :
                new ObjectParameter("p_EmailID", typeof(string));
    
            var p_UserIdentityParameter = p_UserIdentity != null ?
                new ObjectParameter("p_UserIdentity", p_UserIdentity) :
                new ObjectParameter("p_UserIdentity", typeof(string));
    
            var p_ActivatedDTMParameter = p_ActivatedDTM.HasValue ?
                new ObjectParameter("p_ActivatedDTM", p_ActivatedDTM) :
                new ObjectParameter("p_ActivatedDTM", typeof(System.DateTime));
    
            var p_LastAccessPointParameter = p_LastAccessPoint != null ?
                new ObjectParameter("p_LastAccessPoint", p_LastAccessPoint) :
                new ObjectParameter("p_LastAccessPoint", typeof(string));
    
            var p_LastLoginDTMParameter = p_LastLoginDTM.HasValue ?
                new ObjectParameter("p_LastLoginDTM", p_LastLoginDTM) :
                new ObjectParameter("p_LastLoginDTM", typeof(System.DateTime));
    
            var p_SecretQuestionParameter = p_SecretQuestion != null ?
                new ObjectParameter("p_SecretQuestion", p_SecretQuestion) :
                new ObjectParameter("p_SecretQuestion", typeof(string));
    
            var p_SecretAnswerParameter = p_SecretAnswer != null ?
                new ObjectParameter("p_SecretAnswer", p_SecretAnswer) :
                new ObjectParameter("p_SecretAnswer", typeof(string));
    
            var p_ActivationURLIDParameter = p_ActivationURLID.HasValue ?
                new ObjectParameter("p_ActivationURLID", p_ActivationURLID) :
                new ObjectParameter("p_ActivationURLID", typeof(int));
    
            var p_ResetPasswordURLIDParameter = p_ResetPasswordURLID.HasValue ?
                new ObjectParameter("p_ResetPasswordURLID", p_ResetPasswordURLID) :
                new ObjectParameter("p_ResetPasswordURLID", typeof(int));
    
            var p_DesignationIDParameter = p_DesignationID.HasValue ?
                new ObjectParameter("p_DesignationID", p_DesignationID) :
                new ObjectParameter("p_DesignationID", typeof(short));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_CurrentAccessPointParameter = p_CurrentAccessPoint != null ?
                new ObjectParameter("p_CurrentAccessPoint", p_CurrentAccessPoint) :
                new ObjectParameter("p_CurrentAccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEndUser", p_EndUserIDParameter, p_LoginIDParameter, p_FirstNameParameter, p_MiddleNameParameter, p_LastNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_DefaultModuleCodeParameter, p_GenderParameter, p_EmailIDParameter, p_UserIdentityParameter, p_ActivatedDTMParameter, p_LastAccessPointParameter, p_LastLoginDTMParameter, p_SecretQuestionParameter, p_SecretAnswerParameter, p_ActivationURLIDParameter, p_ResetPasswordURLIDParameter, p_DesignationIDParameter, p_DepartmentIDParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_CurrentAccessPointParameter);
        }
    
        public virtual int UpdateFeedbackParameter(Nullable<short> p_FeedbackParameterID, string p_AttributeType, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FeedbackParameterIDParameter = p_FeedbackParameterID.HasValue ?
                new ObjectParameter("p_FeedbackParameterID", p_FeedbackParameterID) :
                new ObjectParameter("p_FeedbackParameterID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFeedbackParameter", p_FeedbackParameterIDParameter, p_AttributeTypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFileInfo(Nullable<long> pFileID, string pFileRemarks, ObjectParameter pTxnTimestamp)
        {
            var pFileIDParameter = pFileID.HasValue ?
                new ObjectParameter("pFileID", pFileID) :
                new ObjectParameter("pFileID", typeof(long));
    
            var pFileRemarksParameter = pFileRemarks != null ?
                new ObjectParameter("pFileRemarks", pFileRemarks) :
                new ObjectParameter("pFileRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileInfo", pFileIDParameter, pFileRemarksParameter, pTxnTimestamp);
        }
    
        public virtual int UpdateFRASCheckList(Nullable<short> p_FRASChecklistID, string p_FRASInspectionType, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASChecklistIDParameter = p_FRASChecklistID.HasValue ?
                new ObjectParameter("p_FRASChecklistID", p_FRASChecklistID) :
                new ObjectParameter("p_FRASChecklistID", typeof(short));
    
            var p_FRASInspectionTypeParameter = p_FRASInspectionType != null ?
                new ObjectParameter("p_FRASInspectionType", p_FRASInspectionType) :
                new ObjectParameter("p_FRASInspectionType", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASCheckList", p_FRASChecklistIDParameter, p_FRASInspectionTypeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFRASCheckListTask(Nullable<int> p_FRASCheckListTaskID, Nullable<short> p_FRASCheckListID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, Nullable<short> p_CheckListTaskGroupID, string p_AttributeType, Nullable<bool> p_MarkIfTrue, Nullable<int> p_MarkIfTrueValue, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASCheckListTaskIDParameter = p_FRASCheckListTaskID.HasValue ?
                new ObjectParameter("p_FRASCheckListTaskID", p_FRASCheckListTaskID) :
                new ObjectParameter("p_FRASCheckListTaskID", typeof(int));
    
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_MarkIfTrueParameter = p_MarkIfTrue.HasValue ?
                new ObjectParameter("p_MarkIfTrue", p_MarkIfTrue) :
                new ObjectParameter("p_MarkIfTrue", typeof(bool));
    
            var p_MarkIfTrueValueParameter = p_MarkIfTrueValue.HasValue ?
                new ObjectParameter("p_MarkIfTrueValue", p_MarkIfTrueValue) :
                new ObjectParameter("p_MarkIfTrueValue", typeof(int));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASCheckListTask", p_FRASCheckListTaskIDParameter, p_FRASCheckListIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_CheckListTaskGroupIDParameter, p_AttributeTypeParameter, p_MarkIfTrueParameter, p_MarkIfTrueValueParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFRASChecklistTaskSortOrder(Nullable<int> p_FRASCheckListTaskID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASCheckListTaskIDParameter = p_FRASCheckListTaskID.HasValue ?
                new ObjectParameter("p_FRASCheckListTaskID", p_FRASCheckListTaskID) :
                new ObjectParameter("p_FRASCheckListTaskID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASChecklistTaskSortOrder", p_FRASCheckListTaskIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFRASInspection(Nullable<int> p_FRASInspectionID, Nullable<short> p_FRASCheckListID, Nullable<int> p_LocationID, Nullable<System.DateTime> p_ExecutedDateTime, string p_Remarks, Nullable<byte> p_ActualRiskLevelID, Nullable<double> p_ActualMarkValue, Nullable<byte> p_RiskLevelID, Nullable<double> p_MarkValue, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_ENDUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_FRASCheckListIDParameter = p_FRASCheckListID.HasValue ?
                new ObjectParameter("p_FRASCheckListID", p_FRASCheckListID) :
                new ObjectParameter("p_FRASCheckListID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ExecutedDateTimeParameter = p_ExecutedDateTime.HasValue ?
                new ObjectParameter("p_ExecutedDateTime", p_ExecutedDateTime) :
                new ObjectParameter("p_ExecutedDateTime", typeof(System.DateTime));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_ActualRiskLevelIDParameter = p_ActualRiskLevelID.HasValue ?
                new ObjectParameter("p_ActualRiskLevelID", p_ActualRiskLevelID) :
                new ObjectParameter("p_ActualRiskLevelID", typeof(byte));
    
            var p_ActualMarkValueParameter = p_ActualMarkValue.HasValue ?
                new ObjectParameter("p_ActualMarkValue", p_ActualMarkValue) :
                new ObjectParameter("p_ActualMarkValue", typeof(double));
    
            var p_RiskLevelIDParameter = p_RiskLevelID.HasValue ?
                new ObjectParameter("p_RiskLevelID", p_RiskLevelID) :
                new ObjectParameter("p_RiskLevelID", typeof(byte));
    
            var p_MarkValueParameter = p_MarkValue.HasValue ?
                new ObjectParameter("p_MarkValue", p_MarkValue) :
                new ObjectParameter("p_MarkValue", typeof(double));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_ENDUserIDParameter = p_ENDUserID.HasValue ?
                new ObjectParameter("p_ENDUserID", p_ENDUserID) :
                new ObjectParameter("p_ENDUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASInspection", p_FRASInspectionIDParameter, p_FRASCheckListIDParameter, p_LocationIDParameter, p_ExecutedDateTimeParameter, p_RemarksParameter, p_ActualRiskLevelIDParameter, p_ActualMarkValueParameter, p_RiskLevelIDParameter, p_MarkValueParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_ENDUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFRASInspectionClosure(Nullable<int> p_FRASInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASInspectionClosure", p_FRASInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFRASInspectionResolution(Nullable<int> p_FRASInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASInspectionResolution", p_FRASInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateFRASInspectionResolutionClosure(Nullable<int> p_FRASInspectionID, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosedDateTime, string p_ClosureRemarks, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_FRASInspectionIDParameter = p_FRASInspectionID.HasValue ?
                new ObjectParameter("p_FRASInspectionID", p_FRASInspectionID) :
                new ObjectParameter("p_FRASInspectionID", typeof(int));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosedDateTimeParameter = p_ClosedDateTime.HasValue ?
                new ObjectParameter("p_ClosedDateTime", p_ClosedDateTime) :
                new ObjectParameter("p_ClosedDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFRASInspectionResolutionClosure", p_FRASInspectionIDParameter, p_ClosedByParameter, p_ClosedDateTimeParameter, p_ClosureRemarksParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncident(Nullable<int> p_IncidentID, string p_IncidentTitle, Nullable<byte> p_IncidentTypeID, Nullable<short> p_IncidentCategoryID, Nullable<byte> p_IncidentSeverityLevel, Nullable<byte> p_IncidentPriorityLevel, Nullable<System.DateTime> p_OccurenceDateTime, Nullable<int> p_RecordedBy, Nullable<System.DateTime> p_RecordedDateTime, string p_ReportedBy, Nullable<System.DateTime> p_ReportedDateTime, string p_BriefDescription, string p_DetailedDescription, Nullable<int> p_IncidentOwner, Nullable<byte> p_IncidentStatus, string p_IncidentTag, Nullable<byte> p_ResolutionDuration, string p_ResolutionUnit, Nullable<int> p_ClosedBy, Nullable<System.DateTime> p_ClosureDateTime, string p_ClosureRemarks, Nullable<int> p_WaterQuantityUsed, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_IncidentTitleParameter = p_IncidentTitle != null ?
                new ObjectParameter("p_IncidentTitle", p_IncidentTitle) :
                new ObjectParameter("p_IncidentTitle", typeof(string));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_IncidentSeverityLevelParameter = p_IncidentSeverityLevel.HasValue ?
                new ObjectParameter("p_IncidentSeverityLevel", p_IncidentSeverityLevel) :
                new ObjectParameter("p_IncidentSeverityLevel", typeof(byte));
    
            var p_IncidentPriorityLevelParameter = p_IncidentPriorityLevel.HasValue ?
                new ObjectParameter("p_IncidentPriorityLevel", p_IncidentPriorityLevel) :
                new ObjectParameter("p_IncidentPriorityLevel", typeof(byte));
    
            var p_OccurenceDateTimeParameter = p_OccurenceDateTime.HasValue ?
                new ObjectParameter("p_OccurenceDateTime", p_OccurenceDateTime) :
                new ObjectParameter("p_OccurenceDateTime", typeof(System.DateTime));
    
            var p_RecordedByParameter = p_RecordedBy.HasValue ?
                new ObjectParameter("p_RecordedBy", p_RecordedBy) :
                new ObjectParameter("p_RecordedBy", typeof(int));
    
            var p_RecordedDateTimeParameter = p_RecordedDateTime.HasValue ?
                new ObjectParameter("p_RecordedDateTime", p_RecordedDateTime) :
                new ObjectParameter("p_RecordedDateTime", typeof(System.DateTime));
    
            var p_ReportedByParameter = p_ReportedBy != null ?
                new ObjectParameter("p_ReportedBy", p_ReportedBy) :
                new ObjectParameter("p_ReportedBy", typeof(string));
    
            var p_ReportedDateTimeParameter = p_ReportedDateTime.HasValue ?
                new ObjectParameter("p_ReportedDateTime", p_ReportedDateTime) :
                new ObjectParameter("p_ReportedDateTime", typeof(System.DateTime));
    
            var p_BriefDescriptionParameter = p_BriefDescription != null ?
                new ObjectParameter("p_BriefDescription", p_BriefDescription) :
                new ObjectParameter("p_BriefDescription", typeof(string));
    
            var p_DetailedDescriptionParameter = p_DetailedDescription != null ?
                new ObjectParameter("p_DetailedDescription", p_DetailedDescription) :
                new ObjectParameter("p_DetailedDescription", typeof(string));
    
            var p_IncidentOwnerParameter = p_IncidentOwner.HasValue ?
                new ObjectParameter("p_IncidentOwner", p_IncidentOwner) :
                new ObjectParameter("p_IncidentOwner", typeof(int));
    
            var p_IncidentStatusParameter = p_IncidentStatus.HasValue ?
                new ObjectParameter("p_IncidentStatus", p_IncidentStatus) :
                new ObjectParameter("p_IncidentStatus", typeof(byte));
    
            var p_IncidentTagParameter = p_IncidentTag != null ?
                new ObjectParameter("p_IncidentTag", p_IncidentTag) :
                new ObjectParameter("p_IncidentTag", typeof(string));
    
            var p_ResolutionDurationParameter = p_ResolutionDuration.HasValue ?
                new ObjectParameter("p_ResolutionDuration", p_ResolutionDuration) :
                new ObjectParameter("p_ResolutionDuration", typeof(byte));
    
            var p_ResolutionUnitParameter = p_ResolutionUnit != null ?
                new ObjectParameter("p_ResolutionUnit", p_ResolutionUnit) :
                new ObjectParameter("p_ResolutionUnit", typeof(string));
    
            var p_ClosedByParameter = p_ClosedBy.HasValue ?
                new ObjectParameter("p_ClosedBy", p_ClosedBy) :
                new ObjectParameter("p_ClosedBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_WaterQuantityUsedParameter = p_WaterQuantityUsed.HasValue ?
                new ObjectParameter("p_WaterQuantityUsed", p_WaterQuantityUsed) :
                new ObjectParameter("p_WaterQuantityUsed", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncident", p_IncidentIDParameter, p_IncidentTitleParameter, p_IncidentTypeIDParameter, p_IncidentCategoryIDParameter, p_IncidentSeverityLevelParameter, p_IncidentPriorityLevelParameter, p_OccurenceDateTimeParameter, p_RecordedByParameter, p_RecordedDateTimeParameter, p_ReportedByParameter, p_ReportedDateTimeParameter, p_BriefDescriptionParameter, p_DetailedDescriptionParameter, p_IncidentOwnerParameter, p_IncidentStatusParameter, p_IncidentTagParameter, p_ResolutionDurationParameter, p_ResolutionUnitParameter, p_ClosedByParameter, p_ClosureDateTimeParameter, p_ClosureRemarksParameter, p_WaterQuantityUsedParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentCategory(Nullable<short> p_IncidentCategoryID, Nullable<short> p_ParentCategoryID, Nullable<bool> p_IsLeaf, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCategoryIDParameter = p_IncidentCategoryID.HasValue ?
                new ObjectParameter("p_IncidentCategoryID", p_IncidentCategoryID) :
                new ObjectParameter("p_IncidentCategoryID", typeof(short));
    
            var p_ParentCategoryIDParameter = p_ParentCategoryID.HasValue ?
                new ObjectParameter("p_ParentCategoryID", p_ParentCategoryID) :
                new ObjectParameter("p_ParentCategoryID", typeof(short));
    
            var p_IsLeafParameter = p_IsLeaf.HasValue ?
                new ObjectParameter("p_IsLeaf", p_IsLeaf) :
                new ObjectParameter("p_IsLeaf", typeof(bool));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentCategory", p_IncidentCategoryIDParameter, p_ParentCategoryIDParameter, p_IsLeafParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentCause(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentCause", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentCauseType(Nullable<byte> p_IncidentCauseTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCauseTypeIDParameter = p_IncidentCauseTypeID.HasValue ?
                new ObjectParameter("p_IncidentCauseTypeID", p_IncidentCauseTypeID) :
                new ObjectParameter("p_IncidentCauseTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentCauseType", p_IncidentCauseTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentCheckList(Nullable<short> p_IncidentChecklistID, Nullable<byte> p_IncidentTypeID, Nullable<short> p_DepartmentID, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentChecklistIDParameter = p_IncidentChecklistID.HasValue ?
                new ObjectParameter("p_IncidentChecklistID", p_IncidentChecklistID) :
                new ObjectParameter("p_IncidentChecklistID", typeof(short));
    
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("p_DepartmentID", p_DepartmentID) :
                new ObjectParameter("p_DepartmentID", typeof(short));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentCheckList", p_IncidentChecklistIDParameter, p_IncidentTypeIDParameter, p_DepartmentIDParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentCheckListTask(Nullable<int> p_IncidentCheckListTaskID, Nullable<short> p_IncidentCheckListID, Nullable<short> p_CheckListTaskGroupID, Nullable<short> p_TaskSequence, Nullable<bool> p_IsMandatory, string p_AttributeType, Nullable<short> p_TextLength, Nullable<byte> p_FloatPrecision, Nullable<byte> p_FloatScale, Nullable<short> p_UOMID, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCheckListTaskIDParameter = p_IncidentCheckListTaskID.HasValue ?
                new ObjectParameter("p_IncidentCheckListTaskID", p_IncidentCheckListTaskID) :
                new ObjectParameter("p_IncidentCheckListTaskID", typeof(int));
    
            var p_IncidentCheckListIDParameter = p_IncidentCheckListID.HasValue ?
                new ObjectParameter("p_IncidentCheckListID", p_IncidentCheckListID) :
                new ObjectParameter("p_IncidentCheckListID", typeof(short));
    
            var p_CheckListTaskGroupIDParameter = p_CheckListTaskGroupID.HasValue ?
                new ObjectParameter("p_CheckListTaskGroupID", p_CheckListTaskGroupID) :
                new ObjectParameter("p_CheckListTaskGroupID", typeof(short));
    
            var p_TaskSequenceParameter = p_TaskSequence.HasValue ?
                new ObjectParameter("p_TaskSequence", p_TaskSequence) :
                new ObjectParameter("p_TaskSequence", typeof(short));
    
            var p_IsMandatoryParameter = p_IsMandatory.HasValue ?
                new ObjectParameter("p_IsMandatory", p_IsMandatory) :
                new ObjectParameter("p_IsMandatory", typeof(bool));
    
            var p_AttributeTypeParameter = p_AttributeType != null ?
                new ObjectParameter("p_AttributeType", p_AttributeType) :
                new ObjectParameter("p_AttributeType", typeof(string));
    
            var p_TextLengthParameter = p_TextLength.HasValue ?
                new ObjectParameter("p_TextLength", p_TextLength) :
                new ObjectParameter("p_TextLength", typeof(short));
    
            var p_FloatPrecisionParameter = p_FloatPrecision.HasValue ?
                new ObjectParameter("p_FloatPrecision", p_FloatPrecision) :
                new ObjectParameter("p_FloatPrecision", typeof(byte));
    
            var p_FloatScaleParameter = p_FloatScale.HasValue ?
                new ObjectParameter("p_FloatScale", p_FloatScale) :
                new ObjectParameter("p_FloatScale", typeof(byte));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentCheckListTask", p_IncidentCheckListTaskIDParameter, p_IncidentCheckListIDParameter, p_CheckListTaskGroupIDParameter, p_TaskSequenceParameter, p_IsMandatoryParameter, p_AttributeTypeParameter, p_TextLengthParameter, p_FloatPrecisionParameter, p_FloatScaleParameter, p_UOMIDParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentChecklistTaskSortOrder(Nullable<int> p_IncidentCheckListTaskID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentCheckListTaskIDParameter = p_IncidentCheckListTaskID.HasValue ?
                new ObjectParameter("p_IncidentCheckListTaskID", p_IncidentCheckListTaskID) :
                new ObjectParameter("p_IncidentCheckListTaskID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentChecklistTaskSortOrder", p_IncidentCheckListTaskIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentClosureRemarks(Nullable<int> p_IncidentID, string p_ClosureRemarks, Nullable<int> p_ClosureBy, Nullable<System.DateTime> p_ClosureDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_ClosureRemarksParameter = p_ClosureRemarks != null ?
                new ObjectParameter("p_ClosureRemarks", p_ClosureRemarks) :
                new ObjectParameter("p_ClosureRemarks", typeof(string));
    
            var p_ClosureByParameter = p_ClosureBy.HasValue ?
                new ObjectParameter("p_ClosureBy", p_ClosureBy) :
                new ObjectParameter("p_ClosureBy", typeof(int));
    
            var p_ClosureDateTimeParameter = p_ClosureDateTime.HasValue ?
                new ObjectParameter("p_ClosureDateTime", p_ClosureDateTime) :
                new ObjectParameter("p_ClosureDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentClosureRemarks", p_IncidentIDParameter, p_ClosureRemarksParameter, p_ClosureByParameter, p_ClosureDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentImpact(Nullable<int> p_IncidentID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentImpact", p_IncidentIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentImpactType(Nullable<byte> p_IncidentImpactTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentImpactTypeIDParameter = p_IncidentImpactTypeID.HasValue ?
                new ObjectParameter("p_IncidentImpactTypeID", p_IncidentImpactTypeID) :
                new ObjectParameter("p_IncidentImpactTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentImpactType", p_IncidentImpactTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentInspectionActionRemark(Nullable<int> p_IncidentInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentInspectionIDParameter = p_IncidentInspectionID.HasValue ?
                new ObjectParameter("p_IncidentInspectionID", p_IncidentInspectionID) :
                new ObjectParameter("p_IncidentInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentInspectionActionRemark", p_IncidentInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentInspectionClosureRemark(Nullable<int> p_IncidentInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentInspectionIDParameter = p_IncidentInspectionID.HasValue ?
                new ObjectParameter("p_IncidentInspectionID", p_IncidentInspectionID) :
                new ObjectParameter("p_IncidentInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentInspectionClosureRemark", p_IncidentInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentInspectionFollowupRemark(Nullable<int> p_IncidentInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentInspectionIDParameter = p_IncidentInspectionID.HasValue ?
                new ObjectParameter("p_IncidentInspectionID", p_IncidentInspectionID) :
                new ObjectParameter("p_IncidentInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentInspectionFollowupRemark", p_IncidentInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentResolutionRemarks(Nullable<int> p_IncidentID, string p_ResolutionRemarks, Nullable<int> p_ResolutionBy, Nullable<System.DateTime> p_ResolutionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentIDParameter = p_IncidentID.HasValue ?
                new ObjectParameter("p_IncidentID", p_IncidentID) :
                new ObjectParameter("p_IncidentID", typeof(int));
    
            var p_ResolutionRemarksParameter = p_ResolutionRemarks != null ?
                new ObjectParameter("p_ResolutionRemarks", p_ResolutionRemarks) :
                new ObjectParameter("p_ResolutionRemarks", typeof(string));
    
            var p_ResolutionByParameter = p_ResolutionBy.HasValue ?
                new ObjectParameter("p_ResolutionBy", p_ResolutionBy) :
                new ObjectParameter("p_ResolutionBy", typeof(int));
    
            var p_ResolutionDateTimeParameter = p_ResolutionDateTime.HasValue ?
                new ObjectParameter("p_ResolutionDateTime", p_ResolutionDateTime) :
                new ObjectParameter("p_ResolutionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentResolutionRemarks", p_IncidentIDParameter, p_ResolutionRemarksParameter, p_ResolutionByParameter, p_ResolutionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentStatus(Nullable<byte> p_IncidentStatusID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentStatusIDParameter = p_IncidentStatusID.HasValue ?
                new ObjectParameter("p_IncidentStatusID", p_IncidentStatusID) :
                new ObjectParameter("p_IncidentStatusID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentStatus", p_IncidentStatusIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentType(Nullable<byte> p_IncidentTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentTypeIDParameter = p_IncidentTypeID.HasValue ?
                new ObjectParameter("p_IncidentTypeID", p_IncidentTypeID) :
                new ObjectParameter("p_IncidentTypeID", typeof(byte));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentType", p_IncidentTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateIncidentWithCheckListTask(Nullable<int> p_IncidentInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_IncidentInspectionIDParameter = p_IncidentInspectionID.HasValue ?
                new ObjectParameter("p_IncidentInspectionID", p_IncidentInspectionID) :
                new ObjectParameter("p_IncidentInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentWithCheckListTask", p_IncidentInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateLocation(Nullable<int> p_LocationID, string p_LocationName, Nullable<int> p_ParentLocationID, Nullable<bool> p_HasCustomers, Nullable<double> p_Longitude, Nullable<double> p_Latitude, string p_Remarks, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ParentLocationIDParameter = p_ParentLocationID.HasValue ?
                new ObjectParameter("p_ParentLocationID", p_ParentLocationID) :
                new ObjectParameter("p_ParentLocationID", typeof(int));
    
            var p_HasCustomersParameter = p_HasCustomers.HasValue ?
                new ObjectParameter("p_HasCustomers", p_HasCustomers) :
                new ObjectParameter("p_HasCustomers", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocation", p_LocationIDParameter, p_LocationNameParameter, p_ParentLocationIDParameter, p_HasCustomersParameter, p_LongitudeParameter, p_LatitudeParameter, p_RemarksParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateLocationSortOrder(Nullable<int> p_LocationID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocationSortOrder", p_LocationIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateNotInUseReason(Nullable<short> p_NotInUseReasonID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNotInUseReason", p_NotInUseReasonIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateObject(Nullable<short> p_ObjectID, Nullable<short> p_CategoryID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("p_CategoryID", p_CategoryID) :
                new ObjectParameter("p_CategoryID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateObject", p_ObjectIDParameter, p_CategoryIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<UpdateObjectInstance_Result> UpdateObjectInstance(Nullable<int> p_SearchLocationID, Nullable<int> p_ObjectInstanceID, Nullable<short> p_CustomerID, string p_LocationName, Nullable<short> p_ObjectID, Nullable<int> p_LocationID, string p_QRCode, string p_SerialNumber, Nullable<short> p_ObjectSequence, string p_Make, string p_Remarks, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<System.DateTime> p_WarrantyEndDate, Nullable<System.DateTime> p_EffectiveFromDate, Nullable<System.DateTime> p_EffectiveTillDate, Nullable<System.DateTime> p_AMCStartDate, Nullable<System.DateTime> p_AMCEndDate, Nullable<short> p_NotInUseReasonID, string p_SourceRefID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_SearchLocationIDParameter = p_SearchLocationID.HasValue ?
                new ObjectParameter("p_SearchLocationID", p_SearchLocationID) :
                new ObjectParameter("p_SearchLocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("p_LocationName", p_LocationName) :
                new ObjectParameter("p_LocationName", typeof(string));
    
            var p_ObjectIDParameter = p_ObjectID.HasValue ?
                new ObjectParameter("p_ObjectID", p_ObjectID) :
                new ObjectParameter("p_ObjectID", typeof(short));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_QRCodeParameter = p_QRCode != null ?
                new ObjectParameter("p_QRCode", p_QRCode) :
                new ObjectParameter("p_QRCode", typeof(string));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("p_SerialNumber", p_SerialNumber) :
                new ObjectParameter("p_SerialNumber", typeof(string));
    
            var p_ObjectSequenceParameter = p_ObjectSequence.HasValue ?
                new ObjectParameter("p_ObjectSequence", p_ObjectSequence) :
                new ObjectParameter("p_ObjectSequence", typeof(short));
    
            var p_MakeParameter = p_Make != null ?
                new ObjectParameter("p_Make", p_Make) :
                new ObjectParameter("p_Make", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_WarrantyEndDateParameter = p_WarrantyEndDate.HasValue ?
                new ObjectParameter("p_WarrantyEndDate", p_WarrantyEndDate) :
                new ObjectParameter("p_WarrantyEndDate", typeof(System.DateTime));
    
            var p_EffectiveFromDateParameter = p_EffectiveFromDate.HasValue ?
                new ObjectParameter("p_EffectiveFromDate", p_EffectiveFromDate) :
                new ObjectParameter("p_EffectiveFromDate", typeof(System.DateTime));
    
            var p_EffectiveTillDateParameter = p_EffectiveTillDate.HasValue ?
                new ObjectParameter("p_EffectiveTillDate", p_EffectiveTillDate) :
                new ObjectParameter("p_EffectiveTillDate", typeof(System.DateTime));
    
            var p_AMCStartDateParameter = p_AMCStartDate.HasValue ?
                new ObjectParameter("p_AMCStartDate", p_AMCStartDate) :
                new ObjectParameter("p_AMCStartDate", typeof(System.DateTime));
    
            var p_AMCEndDateParameter = p_AMCEndDate.HasValue ?
                new ObjectParameter("p_AMCEndDate", p_AMCEndDate) :
                new ObjectParameter("p_AMCEndDate", typeof(System.DateTime));
    
            var p_NotInUseReasonIDParameter = p_NotInUseReasonID.HasValue ?
                new ObjectParameter("p_NotInUseReasonID", p_NotInUseReasonID) :
                new ObjectParameter("p_NotInUseReasonID", typeof(short));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateObjectInstance_Result>("UpdateObjectInstance", p_SearchLocationIDParameter, p_ObjectInstanceIDParameter, p_CustomerIDParameter, p_LocationNameParameter, p_ObjectIDParameter, p_LocationIDParameter, p_QRCodeParameter, p_SerialNumberParameter, p_ObjectSequenceParameter, p_MakeParameter, p_RemarksParameter, p_LongitudeParameter, p_LatitudeParameter, p_WarrantyEndDateParameter, p_EffectiveFromDateParameter, p_EffectiveTillDateParameter, p_AMCStartDateParameter, p_AMCEndDateParameter, p_NotInUseReasonIDParameter, p_SourceRefIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateObjectInstanceCheckListTaskDeviation(Nullable<int> p_InspectionID, Nullable<int> p_LocationID, Nullable<int> p_ObjectInstanceID, Nullable<long> p_ObjectInstanceInspectionID, Nullable<bool> p_IsMobileDeviceUsed, Nullable<bool> p_IsObjectLocatedWithQRCode, Nullable<double> p_Longitude, Nullable<double> p_Latitude, Nullable<System.DateTime> p_InspectionDateTime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_InspectionIDParameter = p_InspectionID.HasValue ?
                new ObjectParameter("p_InspectionID", p_InspectionID) :
                new ObjectParameter("p_InspectionID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("p_LocationID", p_LocationID) :
                new ObjectParameter("p_LocationID", typeof(int));
    
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_ObjectInstanceInspectionIDParameter = p_ObjectInstanceInspectionID.HasValue ?
                new ObjectParameter("p_ObjectInstanceInspectionID", p_ObjectInstanceInspectionID) :
                new ObjectParameter("p_ObjectInstanceInspectionID", typeof(long));
    
            var p_IsMobileDeviceUsedParameter = p_IsMobileDeviceUsed.HasValue ?
                new ObjectParameter("p_IsMobileDeviceUsed", p_IsMobileDeviceUsed) :
                new ObjectParameter("p_IsMobileDeviceUsed", typeof(bool));
    
            var p_IsObjectLocatedWithQRCodeParameter = p_IsObjectLocatedWithQRCode.HasValue ?
                new ObjectParameter("p_IsObjectLocatedWithQRCode", p_IsObjectLocatedWithQRCode) :
                new ObjectParameter("p_IsObjectLocatedWithQRCode", typeof(bool));
    
            var p_LongitudeParameter = p_Longitude.HasValue ?
                new ObjectParameter("p_Longitude", p_Longitude) :
                new ObjectParameter("p_Longitude", typeof(double));
    
            var p_LatitudeParameter = p_Latitude.HasValue ?
                new ObjectParameter("p_Latitude", p_Latitude) :
                new ObjectParameter("p_Latitude", typeof(double));
    
            var p_InspectionDateTimeParameter = p_InspectionDateTime.HasValue ?
                new ObjectParameter("p_InspectionDateTime", p_InspectionDateTime) :
                new ObjectParameter("p_InspectionDateTime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateObjectInstanceCheckListTaskDeviation", p_InspectionIDParameter, p_LocationIDParameter, p_ObjectInstanceIDParameter, p_ObjectInstanceInspectionIDParameter, p_IsMobileDeviceUsedParameter, p_IsObjectLocatedWithQRCodeParameter, p_LongitudeParameter, p_LatitudeParameter, p_InspectionDateTimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateObjectInstanceMake(string p_MakeName, string p_MakeOldName, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_MakeNameParameter = p_MakeName != null ?
                new ObjectParameter("p_MakeName", p_MakeName) :
                new ObjectParameter("p_MakeName", typeof(string));
    
            var p_MakeOldNameParameter = p_MakeOldName != null ?
                new ObjectParameter("p_MakeOldName", p_MakeOldName) :
                new ObjectParameter("p_MakeOldName", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateObjectInstanceMake", p_MakeNameParameter, p_MakeOldNameParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateObjectInstanceSortOrder(Nullable<int> p_ObjectInstanceID, Nullable<int> p_Index, string p_Type, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_ObjectInstanceIDParameter = p_ObjectInstanceID.HasValue ?
                new ObjectParameter("p_ObjectInstanceID", p_ObjectInstanceID) :
                new ObjectParameter("p_ObjectInstanceID", typeof(int));
    
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("p_Index", p_Index) :
                new ObjectParameter("p_Index", typeof(int));
    
            var p_TypeParameter = p_Type != null ?
                new ObjectParameter("p_Type", p_Type) :
                new ObjectParameter("p_Type", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateObjectInstanceSortOrder", p_ObjectInstanceIDParameter, p_IndexParameter, p_TypeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateRepairComponent(Nullable<short> p_RepairComponentID, Nullable<short> p_UOMID, Nullable<bool> p_IsResidentOnDevice, string p_SourceRefID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_RepairComponentIDParameter = p_RepairComponentID.HasValue ?
                new ObjectParameter("p_RepairComponentID", p_RepairComponentID) :
                new ObjectParameter("p_RepairComponentID", typeof(short));
    
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_IsResidentOnDeviceParameter = p_IsResidentOnDevice.HasValue ?
                new ObjectParameter("p_IsResidentOnDevice", p_IsResidentOnDevice) :
                new ObjectParameter("p_IsResidentOnDevice", typeof(bool));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRepairComponent", p_RepairComponentIDParameter, p_UOMIDParameter, p_IsResidentOnDeviceParameter, p_SourceRefIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateSquad(string p_Squadcode, string p_OldSquadcode, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_SquadcodeParameter = p_Squadcode != null ?
                new ObjectParameter("p_Squadcode", p_Squadcode) :
                new ObjectParameter("p_Squadcode", typeof(string));
    
            var p_OldSquadcodeParameter = p_OldSquadcode != null ?
                new ObjectParameter("p_OldSquadcode", p_OldSquadcode) :
                new ObjectParameter("p_OldSquadcode", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSquad", p_SquadcodeParameter, p_OldSquadcodeParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateTraining(Nullable<int> p_TrainingID, Nullable<short> p_CourseID, Nullable<System.DateTime> p_EffectiveFromDateTime, Nullable<System.DateTime> p_EffectiveTillDateTime, Nullable<int> p_CreatedBy, string p_Remarks, Nullable<short> p_CertificationID, Nullable<bool> p_IsExternalTraining, string p_TrainingLocation, string p_SourceRefID, Nullable<bool> p_EnrolmentRequired, Nullable<short> p_CustomerID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_TrainingIDParameter = p_TrainingID.HasValue ?
                new ObjectParameter("p_TrainingID", p_TrainingID) :
                new ObjectParameter("p_TrainingID", typeof(int));
    
            var p_CourseIDParameter = p_CourseID.HasValue ?
                new ObjectParameter("p_CourseID", p_CourseID) :
                new ObjectParameter("p_CourseID", typeof(short));
    
            var p_EffectiveFromDateTimeParameter = p_EffectiveFromDateTime.HasValue ?
                new ObjectParameter("p_EffectiveFromDateTime", p_EffectiveFromDateTime) :
                new ObjectParameter("p_EffectiveFromDateTime", typeof(System.DateTime));
    
            var p_EffectiveTillDateTimeParameter = p_EffectiveTillDateTime.HasValue ?
                new ObjectParameter("p_EffectiveTillDateTime", p_EffectiveTillDateTime) :
                new ObjectParameter("p_EffectiveTillDateTime", typeof(System.DateTime));
    
            var p_CreatedByParameter = p_CreatedBy.HasValue ?
                new ObjectParameter("p_CreatedBy", p_CreatedBy) :
                new ObjectParameter("p_CreatedBy", typeof(int));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CertificationIDParameter = p_CertificationID.HasValue ?
                new ObjectParameter("p_CertificationID", p_CertificationID) :
                new ObjectParameter("p_CertificationID", typeof(short));
    
            var p_IsExternalTrainingParameter = p_IsExternalTraining.HasValue ?
                new ObjectParameter("p_IsExternalTraining", p_IsExternalTraining) :
                new ObjectParameter("p_IsExternalTraining", typeof(bool));
    
            var p_TrainingLocationParameter = p_TrainingLocation != null ?
                new ObjectParameter("p_TrainingLocation", p_TrainingLocation) :
                new ObjectParameter("p_TrainingLocation", typeof(string));
    
            var p_SourceRefIDParameter = p_SourceRefID != null ?
                new ObjectParameter("p_SourceRefID", p_SourceRefID) :
                new ObjectParameter("p_SourceRefID", typeof(string));
    
            var p_EnrolmentRequiredParameter = p_EnrolmentRequired.HasValue ?
                new ObjectParameter("p_EnrolmentRequired", p_EnrolmentRequired) :
                new ObjectParameter("p_EnrolmentRequired", typeof(bool));
    
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTraining", p_TrainingIDParameter, p_CourseIDParameter, p_EffectiveFromDateTimeParameter, p_EffectiveTillDateTimeParameter, p_CreatedByParameter, p_RemarksParameter, p_CertificationIDParameter, p_IsExternalTrainingParameter, p_TrainingLocationParameter, p_SourceRefIDParameter, p_EnrolmentRequiredParameter, p_CustomerIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateUOM(Nullable<short> p_UOMID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_UserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_UOMIDParameter = p_UOMID.HasValue ?
                new ObjectParameter("p_UOMID", p_UOMID) :
                new ObjectParameter("p_UOMID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUOM", p_UOMIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_UserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateUserRole(Nullable<short> p_UserRoleID, string p_UserRoleName, Nullable<int> p_UserID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(short));
    
            var p_UserRoleNameParameter = p_UserRoleName != null ?
                new ObjectParameter("p_UserRoleName", p_UserRoleName) :
                new ObjectParameter("p_UserRoleName", typeof(string));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("p_UserID", p_UserID) :
                new ObjectParameter("p_UserID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserRole", p_UserRoleIDParameter, p_UserRoleNameParameter, p_UserIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateWorkingShift(string p_Shiftcode, Nullable<System.TimeSpan> p_StartTime, Nullable<System.TimeSpan> p_EndTime, string p_Remarks, string p_CurrentLanguageCode, Nullable<decimal> p_CurrentUTCOffset, Nullable<int> p_CurrentEndUserID, Nullable<int> p_CurrentUserRoleID, Nullable<short> p_CurrentScreenID, string p_AccessPoint)
        {
            var p_ShiftcodeParameter = p_Shiftcode != null ?
                new ObjectParameter("p_Shiftcode", p_Shiftcode) :
                new ObjectParameter("p_Shiftcode", typeof(string));
    
            var p_StartTimeParameter = p_StartTime.HasValue ?
                new ObjectParameter("p_StartTime", p_StartTime) :
                new ObjectParameter("p_StartTime", typeof(System.TimeSpan));
    
            var p_EndTimeParameter = p_EndTime.HasValue ?
                new ObjectParameter("p_EndTime", p_EndTime) :
                new ObjectParameter("p_EndTime", typeof(System.TimeSpan));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_CurrentLanguageCodeParameter = p_CurrentLanguageCode != null ?
                new ObjectParameter("p_CurrentLanguageCode", p_CurrentLanguageCode) :
                new ObjectParameter("p_CurrentLanguageCode", typeof(string));
    
            var p_CurrentUTCOffsetParameter = p_CurrentUTCOffset.HasValue ?
                new ObjectParameter("p_CurrentUTCOffset", p_CurrentUTCOffset) :
                new ObjectParameter("p_CurrentUTCOffset", typeof(decimal));
    
            var p_CurrentEndUserIDParameter = p_CurrentEndUserID.HasValue ?
                new ObjectParameter("p_CurrentEndUserID", p_CurrentEndUserID) :
                new ObjectParameter("p_CurrentEndUserID", typeof(int));
    
            var p_CurrentUserRoleIDParameter = p_CurrentUserRoleID.HasValue ?
                new ObjectParameter("p_CurrentUserRoleID", p_CurrentUserRoleID) :
                new ObjectParameter("p_CurrentUserRoleID", typeof(int));
    
            var p_CurrentScreenIDParameter = p_CurrentScreenID.HasValue ?
                new ObjectParameter("p_CurrentScreenID", p_CurrentScreenID) :
                new ObjectParameter("p_CurrentScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkingShift", p_ShiftcodeParameter, p_StartTimeParameter, p_EndTimeParameter, p_RemarksParameter, p_CurrentLanguageCodeParameter, p_CurrentUTCOffsetParameter, p_CurrentEndUserIDParameter, p_CurrentUserRoleIDParameter, p_CurrentScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateWorkPermit(Nullable<int> p_WorkPermitID, Nullable<short> p_WorkPermitTypeID, string p_WPTitle, Nullable<System.DateTime> p_WPRecordedDateTime, Nullable<int> p_WPRecordedBy, string p_RequesterName, string p_RequesterCompany, string p_RequesterMobile, string p_RequesterEmail, Nullable<int> p_Location, Nullable<System.DateTime> p_EffectiveFrom, Nullable<System.DateTime> p_EffectiveTill, Nullable<System.TimeSpan> p_WorkFrom, Nullable<System.TimeSpan> p_WorkTill, Nullable<short> p_PeopleCount, string p_SupervisorName, string p_HelperName, string p_Remarks, string p_SafetyEquipment, string p_ApprovalRemarks, Nullable<int> p_ApprovedBy, Nullable<System.DateTime> p_ApprovedDatetime, string p_CancellationRemarks, Nullable<int> p_CancelledBy, Nullable<System.DateTime> p_CancellationDatetime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitIDParameter = p_WorkPermitID.HasValue ?
                new ObjectParameter("p_WorkPermitID", p_WorkPermitID) :
                new ObjectParameter("p_WorkPermitID", typeof(int));
    
            var p_WorkPermitTypeIDParameter = p_WorkPermitTypeID.HasValue ?
                new ObjectParameter("p_WorkPermitTypeID", p_WorkPermitTypeID) :
                new ObjectParameter("p_WorkPermitTypeID", typeof(short));
    
            var p_WPTitleParameter = p_WPTitle != null ?
                new ObjectParameter("p_WPTitle", p_WPTitle) :
                new ObjectParameter("p_WPTitle", typeof(string));
    
            var p_WPRecordedDateTimeParameter = p_WPRecordedDateTime.HasValue ?
                new ObjectParameter("p_WPRecordedDateTime", p_WPRecordedDateTime) :
                new ObjectParameter("p_WPRecordedDateTime", typeof(System.DateTime));
    
            var p_WPRecordedByParameter = p_WPRecordedBy.HasValue ?
                new ObjectParameter("p_WPRecordedBy", p_WPRecordedBy) :
                new ObjectParameter("p_WPRecordedBy", typeof(int));
    
            var p_RequesterNameParameter = p_RequesterName != null ?
                new ObjectParameter("p_RequesterName", p_RequesterName) :
                new ObjectParameter("p_RequesterName", typeof(string));
    
            var p_RequesterCompanyParameter = p_RequesterCompany != null ?
                new ObjectParameter("p_RequesterCompany", p_RequesterCompany) :
                new ObjectParameter("p_RequesterCompany", typeof(string));
    
            var p_RequesterMobileParameter = p_RequesterMobile != null ?
                new ObjectParameter("p_RequesterMobile", p_RequesterMobile) :
                new ObjectParameter("p_RequesterMobile", typeof(string));
    
            var p_RequesterEmailParameter = p_RequesterEmail != null ?
                new ObjectParameter("p_RequesterEmail", p_RequesterEmail) :
                new ObjectParameter("p_RequesterEmail", typeof(string));
    
            var p_LocationParameter = p_Location.HasValue ?
                new ObjectParameter("p_Location", p_Location) :
                new ObjectParameter("p_Location", typeof(int));
    
            var p_EffectiveFromParameter = p_EffectiveFrom.HasValue ?
                new ObjectParameter("p_EffectiveFrom", p_EffectiveFrom) :
                new ObjectParameter("p_EffectiveFrom", typeof(System.DateTime));
    
            var p_EffectiveTillParameter = p_EffectiveTill.HasValue ?
                new ObjectParameter("p_EffectiveTill", p_EffectiveTill) :
                new ObjectParameter("p_EffectiveTill", typeof(System.DateTime));
    
            var p_WorkFromParameter = p_WorkFrom.HasValue ?
                new ObjectParameter("p_WorkFrom", p_WorkFrom) :
                new ObjectParameter("p_WorkFrom", typeof(System.TimeSpan));
    
            var p_WorkTillParameter = p_WorkTill.HasValue ?
                new ObjectParameter("p_WorkTill", p_WorkTill) :
                new ObjectParameter("p_WorkTill", typeof(System.TimeSpan));
    
            var p_PeopleCountParameter = p_PeopleCount.HasValue ?
                new ObjectParameter("p_PeopleCount", p_PeopleCount) :
                new ObjectParameter("p_PeopleCount", typeof(short));
    
            var p_SupervisorNameParameter = p_SupervisorName != null ?
                new ObjectParameter("p_SupervisorName", p_SupervisorName) :
                new ObjectParameter("p_SupervisorName", typeof(string));
    
            var p_HelperNameParameter = p_HelperName != null ?
                new ObjectParameter("p_HelperName", p_HelperName) :
                new ObjectParameter("p_HelperName", typeof(string));
    
            var p_RemarksParameter = p_Remarks != null ?
                new ObjectParameter("p_Remarks", p_Remarks) :
                new ObjectParameter("p_Remarks", typeof(string));
    
            var p_SafetyEquipmentParameter = p_SafetyEquipment != null ?
                new ObjectParameter("p_SafetyEquipment", p_SafetyEquipment) :
                new ObjectParameter("p_SafetyEquipment", typeof(string));
    
            var p_ApprovalRemarksParameter = p_ApprovalRemarks != null ?
                new ObjectParameter("p_ApprovalRemarks", p_ApprovalRemarks) :
                new ObjectParameter("p_ApprovalRemarks", typeof(string));
    
            var p_ApprovedByParameter = p_ApprovedBy.HasValue ?
                new ObjectParameter("p_ApprovedBy", p_ApprovedBy) :
                new ObjectParameter("p_ApprovedBy", typeof(int));
    
            var p_ApprovedDatetimeParameter = p_ApprovedDatetime.HasValue ?
                new ObjectParameter("p_ApprovedDatetime", p_ApprovedDatetime) :
                new ObjectParameter("p_ApprovedDatetime", typeof(System.DateTime));
    
            var p_CancellationRemarksParameter = p_CancellationRemarks != null ?
                new ObjectParameter("p_CancellationRemarks", p_CancellationRemarks) :
                new ObjectParameter("p_CancellationRemarks", typeof(string));
    
            var p_CancelledByParameter = p_CancelledBy.HasValue ?
                new ObjectParameter("p_CancelledBy", p_CancelledBy) :
                new ObjectParameter("p_CancelledBy", typeof(int));
    
            var p_CancellationDatetimeParameter = p_CancellationDatetime.HasValue ?
                new ObjectParameter("p_CancellationDatetime", p_CancellationDatetime) :
                new ObjectParameter("p_CancellationDatetime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkPermit", p_WorkPermitIDParameter, p_WorkPermitTypeIDParameter, p_WPTitleParameter, p_WPRecordedDateTimeParameter, p_WPRecordedByParameter, p_RequesterNameParameter, p_RequesterCompanyParameter, p_RequesterMobileParameter, p_RequesterEmailParameter, p_LocationParameter, p_EffectiveFromParameter, p_EffectiveTillParameter, p_WorkFromParameter, p_WorkTillParameter, p_PeopleCountParameter, p_SupervisorNameParameter, p_HelperNameParameter, p_RemarksParameter, p_SafetyEquipmentParameter, p_ApprovalRemarksParameter, p_ApprovedByParameter, p_ApprovedDatetimeParameter, p_CancellationRemarksParameter, p_CancelledByParameter, p_CancellationDatetimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateWorkPermitApproval(Nullable<int> p_WorkPermitID, string p_ApprovalRemarks, Nullable<int> p_ApprovedBy, Nullable<System.DateTime> p_ApprovedDatetime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitIDParameter = p_WorkPermitID.HasValue ?
                new ObjectParameter("p_WorkPermitID", p_WorkPermitID) :
                new ObjectParameter("p_WorkPermitID", typeof(int));
    
            var p_ApprovalRemarksParameter = p_ApprovalRemarks != null ?
                new ObjectParameter("p_ApprovalRemarks", p_ApprovalRemarks) :
                new ObjectParameter("p_ApprovalRemarks", typeof(string));
    
            var p_ApprovedByParameter = p_ApprovedBy.HasValue ?
                new ObjectParameter("p_ApprovedBy", p_ApprovedBy) :
                new ObjectParameter("p_ApprovedBy", typeof(int));
    
            var p_ApprovedDatetimeParameter = p_ApprovedDatetime.HasValue ?
                new ObjectParameter("p_ApprovedDatetime", p_ApprovedDatetime) :
                new ObjectParameter("p_ApprovedDatetime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkPermitApproval", p_WorkPermitIDParameter, p_ApprovalRemarksParameter, p_ApprovedByParameter, p_ApprovedDatetimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateWorkPermitCancellation(Nullable<int> p_WorkPermitID, string p_CancellationRemarks, Nullable<int> p_CancelledBy, Nullable<System.DateTime> p_CancellationDatetime, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitIDParameter = p_WorkPermitID.HasValue ?
                new ObjectParameter("p_WorkPermitID", p_WorkPermitID) :
                new ObjectParameter("p_WorkPermitID", typeof(int));
    
            var p_CancellationRemarksParameter = p_CancellationRemarks != null ?
                new ObjectParameter("p_CancellationRemarks", p_CancellationRemarks) :
                new ObjectParameter("p_CancellationRemarks", typeof(string));
    
            var p_CancelledByParameter = p_CancelledBy.HasValue ?
                new ObjectParameter("p_CancelledBy", p_CancelledBy) :
                new ObjectParameter("p_CancelledBy", typeof(int));
    
            var p_CancellationDatetimeParameter = p_CancellationDatetime.HasValue ?
                new ObjectParameter("p_CancellationDatetime", p_CancellationDatetime) :
                new ObjectParameter("p_CancellationDatetime", typeof(System.DateTime));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkPermitCancellation", p_WorkPermitIDParameter, p_CancellationRemarksParameter, p_CancelledByParameter, p_CancellationDatetimeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateWorkPermitType(Nullable<short> p_WorkPermitTypeID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkPermitTypeIDParameter = p_WorkPermitTypeID.HasValue ?
                new ObjectParameter("p_WorkPermitTypeID", p_WorkPermitTypeID) :
                new ObjectParameter("p_WorkPermitTypeID", typeof(short));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkPermitType", p_WorkPermitTypeIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual int UpdateWorkWithCheckListTask(Nullable<int> p_WorkInspectionID, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_WorkInspectionIDParameter = p_WorkInspectionID.HasValue ?
                new ObjectParameter("p_WorkInspectionID", p_WorkInspectionID) :
                new ObjectParameter("p_WorkInspectionID", typeof(int));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkWithCheckListTask", p_WorkInspectionIDParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<UserLogin_Result> UserLogin(string p_LoginID, string p_UserIdentity, string p_LastAccessPoint)
        {
            var p_LoginIDParameter = p_LoginID != null ?
                new ObjectParameter("p_LoginID", p_LoginID) :
                new ObjectParameter("p_LoginID", typeof(string));
    
            var p_UserIdentityParameter = p_UserIdentity != null ?
                new ObjectParameter("p_UserIdentity", p_UserIdentity) :
                new ObjectParameter("p_UserIdentity", typeof(string));
    
            var p_LastAccessPointParameter = p_LastAccessPoint != null ?
                new ObjectParameter("p_LastAccessPoint", p_LastAccessPoint) :
                new ObjectParameter("p_LastAccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLogin_Result>("UserLogin", p_LoginIDParameter, p_UserIdentityParameter, p_LastAccessPointParameter);
        }
    
        public virtual ObjectResult<GetTopDeviationByLocation_Result> GetTopDeviationByLocation(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopDeviationByLocation_Result>("GetTopDeviationByLocation", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    
        public virtual ObjectResult<GetTopDeviationByRegisteredResolved_Result> GetTopDeviationByRegisteredResolved(Nullable<short> p_CustomerID, string p_ModuleCode, string p_LanguageCode, Nullable<decimal> p_UTCOffset, Nullable<int> p_EndUserID, Nullable<int> p_UserRoleID, Nullable<short> p_ScreenID, string p_AccessPoint)
        {
            var p_CustomerIDParameter = p_CustomerID.HasValue ?
                new ObjectParameter("p_CustomerID", p_CustomerID) :
                new ObjectParameter("p_CustomerID", typeof(short));
    
            var p_ModuleCodeParameter = p_ModuleCode != null ?
                new ObjectParameter("p_ModuleCode", p_ModuleCode) :
                new ObjectParameter("p_ModuleCode", typeof(string));
    
            var p_LanguageCodeParameter = p_LanguageCode != null ?
                new ObjectParameter("p_LanguageCode", p_LanguageCode) :
                new ObjectParameter("p_LanguageCode", typeof(string));
    
            var p_UTCOffsetParameter = p_UTCOffset.HasValue ?
                new ObjectParameter("p_UTCOffset", p_UTCOffset) :
                new ObjectParameter("p_UTCOffset", typeof(decimal));
    
            var p_EndUserIDParameter = p_EndUserID.HasValue ?
                new ObjectParameter("p_EndUserID", p_EndUserID) :
                new ObjectParameter("p_EndUserID", typeof(int));
    
            var p_UserRoleIDParameter = p_UserRoleID.HasValue ?
                new ObjectParameter("p_UserRoleID", p_UserRoleID) :
                new ObjectParameter("p_UserRoleID", typeof(int));
    
            var p_ScreenIDParameter = p_ScreenID.HasValue ?
                new ObjectParameter("p_ScreenID", p_ScreenID) :
                new ObjectParameter("p_ScreenID", typeof(short));
    
            var p_AccessPointParameter = p_AccessPoint != null ?
                new ObjectParameter("p_AccessPoint", p_AccessPoint) :
                new ObjectParameter("p_AccessPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopDeviationByRegisteredResolved_Result>("GetTopDeviationByRegisteredResolved", p_CustomerIDParameter, p_ModuleCodeParameter, p_LanguageCodeParameter, p_UTCOffsetParameter, p_EndUserIDParameter, p_UserRoleIDParameter, p_ScreenIDParameter, p_AccessPointParameter);
        }
    }
}
